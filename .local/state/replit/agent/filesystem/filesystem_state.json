{"file_contents":{"README.md":{"content":"# DRONE_MANAGEMENT_SYSTEM","size_bytes":25},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"eslint.config.js":{"content":"import js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);\n","size_bytes":739},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nDroneFlow is a comprehensive drone survey management system designed to handle mission planning, fleet monitoring, and analytics for autonomous drone operations. Based on the FlytBase design challenge, the application enables large organizations to plan, manage, and monitor autonomous drone surveys across multiple global sites.\n\n**Key Requirements:**\n- Mission Planning and Configuration System (survey areas, flight paths, waypoints)\n- Fleet Visualization and Management Dashboard (inventory, real-time status, battery levels)\n- Real-time Mission Monitoring Interface (flight paths on map, progress tracking, mission control)\n- Survey Reporting and Analytics Portal (comprehensive summaries, flight statistics, org-wide data)\n\nThe system focuses on mission management and reporting aspects rather than actual data capture, live video feeds, or 3D map generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (TanStack Query) for server state management with local context for UI state\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system using CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: RESTful APIs with structured route handling\n- **Data Layer**: In-memory storage with interface-based design for easy database integration\n- **Development**: Hot module replacement and middleware-based request/response logging\n\n### Data Storage Solutions\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe queries\n- **Schema Management**: Shared schema definitions between frontend and backend\n- **Validation**: Zod for runtime schema validation and type inference\n- **Migration**: Drizzle Kit for database schema migrations\n- **Current Implementation**: MemStorage class for development with mock data, designed for easy PostgreSQL integration\n\n### Database Schema Design\n- **Drones Table**: Comprehensive drone information including status, battery, location, flight hours, and sensor configurations\n- **Missions Table**: Complete mission lifecycle tracking with flight paths, parameters, progress monitoring, and statistics\n- **JSON Fields**: Flexible storage for complex data like coordinates, sensor arrays, and mission statistics\n- **Relationships**: Foreign key relationships between drones and missions\n\n### Authentication and Authorization\n- **Current State**: Not implemented, ready for integration\n- **Planned Approach**: Session-based authentication with connect-pg-simple for PostgreSQL session storage\n- **Security**: Prepared for role-based access control and organization-level data isolation\n\n### Component Architecture\n- **Page Components**: Feature-complete pages for dashboard, monitoring, planning, reporting, and settings\n- **Shared Components**: Reusable UI components for drones, missions, maps, and analytics\n- **Context Providers**: React context for drone and mission state management\n- **Custom Hooks**: useToast for notifications and other utility hooks\n\n### Real-time Features\n- **Mission Monitoring**: Live mission progress tracking and status updates\n- **Fleet Status**: Real-time drone availability and battery monitoring\n- **Mission Control**: Pause, resume, and abort mission capabilities\n- **Progress Visualization**: Dynamic progress bars and status indicators\n\n### API Structure\n- **RESTful Endpoints**: CRUD operations for drones and missions\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Validation**: Request validation using shared schema definitions\n- **Response Format**: Consistent JSON response structure\n\n## External Dependencies\n\n### Core Frontend Dependencies\n- **React Ecosystem**: React 18 with TypeScript support\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n- **React Hook Form**: Form handling with validation\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe CSS-in-JS styling utilities\n\n### Backend Dependencies\n- **Express.js**: Web application framework\n- **Drizzle ORM**: Type-safe database toolkit\n- **Neon Database**: Serverless PostgreSQL platform integration\n- **Zod**: TypeScript-first schema validation\n\n### Development Tools\n- **Vite**: Build tool with HMR and optimized bundling\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution for development server\n- **Replit Integration**: Development environment optimization plugins\n\n### Database and Storage\n- **PostgreSQL**: Primary database (via Neon serverless)\n- **Connect PG Simple**: PostgreSQL session store\n- **Drizzle Kit**: Database migration and management tools\n\n### Utilities and Helpers\n- **Date-fns**: Date manipulation and formatting\n- **Nanoid**: Unique ID generation\n- **CLSX**: Conditional CSS class management\n- **CMDK**: Command palette implementation\n\nThe system is architected for scalability and maintainability, with clear separation between frontend and backend concerns, type safety throughout the stack, and preparation for production deployment with proper database integration.","size_bytes":5690},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n","size_bytes":170},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertDroneSchema, insertMissionSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Drone routes\n  app.get(\"/api/drones\", async (req, res) => {\n    try {\n      const drones = await storage.getDrones();\n      res.json(drones);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch drones\" });\n    }\n  });\n\n  app.get(\"/api/drones/:id\", async (req, res) => {\n    try {\n      const drone = await storage.getDrone(req.params.id);\n      if (!drone) {\n        return res.status(404).json({ message: \"Drone not found\" });\n      }\n      res.json(drone);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch drone\" });\n    }\n  });\n\n  app.post(\"/api/drones\", async (req, res) => {\n    try {\n      const validatedData = insertDroneSchema.parse(req.body);\n      const drone = await storage.createDrone(validatedData);\n      res.status(201).json(drone);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid drone data\" });\n    }\n  });\n\n  app.patch(\"/api/drones/:id\", async (req, res) => {\n    try {\n      const drone = await storage.updateDrone(req.params.id, req.body);\n      if (!drone) {\n        return res.status(404).json({ message: \"Drone not found\" });\n      }\n      res.json(drone);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update drone\" });\n    }\n  });\n\n  app.delete(\"/api/drones/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteDrone(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Drone not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete drone\" });\n    }\n  });\n\n  // Mission routes\n  app.get(\"/api/missions\", async (req, res) => {\n    try {\n      const missions = await storage.getMissions();\n      res.json(missions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch missions\" });\n    }\n  });\n\n  app.get(\"/api/missions/:id\", async (req, res) => {\n    try {\n      const mission = await storage.getMission(req.params.id);\n      if (!mission) {\n        return res.status(404).json({ message: \"Mission not found\" });\n      }\n      res.json(mission);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch mission\" });\n    }\n  });\n\n  app.post(\"/api/missions\", async (req, res) => {\n    try {\n      const validatedData = insertMissionSchema.parse(req.body);\n      const mission = await storage.createMission(validatedData);\n      res.status(201).json(mission);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mission data\" });\n    }\n  });\n\n  app.patch(\"/api/missions/:id\", async (req, res) => {\n    try {\n      const mission = await storage.updateMission(req.params.id, req.body);\n      if (!mission) {\n        return res.status(404).json({ message: \"Mission not found\" });\n      }\n      res.json(mission);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update mission\" });\n    }\n  });\n\n  app.delete(\"/api/missions/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMission(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Mission not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete mission\" });\n    }\n  });\n\n  // Organization stats route\n  app.get(\"/api/organization/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getOrganizationStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch organization stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3932},"server/storage.ts":{"content":"import { drones, missions, type Drone, type Mission, type InsertDrone, type InsertMission, type Organization } from \"@shared/schema\";\n\nexport interface IStorage {\n  // Drone operations\n  getDrones(): Promise<Drone[]>;\n  getDrone(id: string): Promise<Drone | undefined>;\n  createDrone(drone: InsertDrone): Promise<Drone>;\n  updateDrone(id: string, updates: Partial<InsertDrone>): Promise<Drone | undefined>;\n  deleteDrone(id: string): Promise<boolean>;\n\n  // Mission operations\n  getMissions(): Promise<Mission[]>;\n  getMission(id: string): Promise<Mission | undefined>;\n  createMission(mission: InsertMission): Promise<Mission>;\n  updateMission(id: string, updates: Partial<InsertMission>): Promise<Mission | undefined>;\n  deleteMission(id: string): Promise<boolean>;\n\n  // Organization stats\n  getOrganizationStats(): Promise<Organization>;\n}\n\nexport class MemStorage implements IStorage {\n  private drones: Map<string, Drone>;\n  private missions: Map<string, Mission>;\n\n  constructor() {\n    this.drones = new Map();\n    this.missions = new Map();\n    \n    // Initialize with mock data\n    this.initializeMockData();\n  }\n\n  private initializeMockData() {\n    // Initialize mock drones\n    const mockDrones: Drone[] = [\n      {\n        id: 'drone-001',\n        name: 'Surveyor Alpha',\n        model: 'DJI Matrice 300 RTK',\n        serialNumber: 'DJ001MAT300',\n        status: 'available',\n        batteryLevel: 85,\n        location: { lat: 37.7749, lng: -122.4194 },\n        flightHours: 245.5,\n        lastMaintenance: '2024-01-15',\n        maxFlightTime: 55,\n        sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n      },\n      {\n        id: 'drone-002',\n        name: 'Inspector Beta',\n        model: 'DJI Phantom 4 RTK',\n        serialNumber: 'DJ002PH4RTK',\n        status: 'in-mission',\n        batteryLevel: 72,\n        location: { lat: 37.7849, lng: -122.4094 },\n        flightHours: 189.2,\n        lastMaintenance: '2024-01-20',\n        maxFlightTime: 30,\n        sensors: ['RGB Camera', 'Multispectral']\n      },\n      {\n        id: 'drone-003',\n        name: 'Guardian Gamma',\n        model: 'Autel EVO Max 4T',\n        serialNumber: 'AU003EVMax4T',\n        status: 'charging',\n        batteryLevel: 15,\n        location: { lat: 37.7649, lng: -122.4294 },\n        flightHours: 156.8,\n        lastMaintenance: '2024-01-10',\n        maxFlightTime: 42,\n        sensors: ['RGB Camera', 'Thermal', 'Night Vision']\n      },\n      {\n        id: 'drone-004',\n        name: 'Mapper Delta',\n        model: 'Skydio X2D',\n        serialNumber: 'SK004X2D',\n        status: 'available',\n        batteryLevel: 95,\n        location: { lat: 37.7549, lng: -122.4394 },\n        flightHours: 312.1,\n        lastMaintenance: '2024-01-25',\n        maxFlightTime: 35,\n        sensors: ['RGB Camera', 'Thermal', '3D Mapping']\n      },\n      {\n        id: 'drone-005',\n        name: 'Scout Echo',\n        model: 'Parrot ANAFI USA',\n        serialNumber: 'PA005ANAFIUSA',\n        status: 'maintenance',\n        batteryLevel: 45,\n        location: { lat: 37.7449, lng: -122.4494 },\n        flightHours: 198.7,\n        lastMaintenance: '2024-01-05',\n        maxFlightTime: 32,\n        sensors: ['RGB Camera', 'Zoom Camera', 'Thermal']\n      },\n      {\n        id: 'drone-006',\n        name: 'Recon Foxtrot',\n        model: 'Yuneec Typhoon H520',\n        serialNumber: 'YU006TH520',\n        status: 'available',\n        batteryLevel: 78,\n        location: { lat: 37.7349, lng: -122.4594 },\n        flightHours: 167.3,\n        lastMaintenance: '2024-01-18',\n        maxFlightTime: 28,\n        sensors: ['RGB Camera', 'Multispectral', 'Infrared']\n      }\n    ];\n\n    mockDrones.forEach(drone => this.drones.set(drone.id, drone));\n\n    // Initialize mock missions\n    const mockMissions: Mission[] = [\n      {\n        id: 'mission-001',\n        name: 'Weekly Security Patrol - North Wing',\n        type: 'security-patrol',\n        status: 'in-progress',\n        droneId: 'drone-002',\n        area: {\n          name: 'North Wing Perimeter',\n          bounds: [\n            { lat: 37.7849, lng: -122.4094 },\n            { lat: 37.7859, lng: -122.4084 },\n            { lat: 37.7869, lng: -122.4104 },\n            { lat: 37.7859, lng: -122.4114 }\n          ]\n        },\n        flightPath: [\n          { lat: 37.7849, lng: -122.4094, altitude: 50 },\n          { lat: 37.7859, lng: -122.4084, altitude: 50 },\n          { lat: 37.7869, lng: -122.4104, altitude: 50 },\n          { lat: 37.7859, lng: -122.4114, altitude: 50 }\n        ],\n        pattern: 'perimeter',\n        parameters: {\n          altitude: 50,\n          speed: 8,\n          overlapPercentage: 60,\n          captureFrequency: 2,\n          sensors: ['RGB Camera', 'Thermal']\n        },\n        priority: 'medium',\n        progress: 65,\n        scheduledAt: null,\n        estimatedDuration: 25,\n        createdAt: new Date('2024-01-28T10:00:00Z'),\n        startedAt: new Date('2024-01-28T10:15:00Z'),\n        actualDuration: null,\n        completedAt: null,\n        stats: {\n          distanceCovered: 2.1,\n          areasCovered: 0.8,\n          dataPointsCollected: 156\n        }\n      },\n      {\n        id: 'mission-002',\n        name: 'Infrastructure Inspection - Main Building',\n        type: 'facility-inspection',\n        status: 'completed',\n        droneId: 'drone-001',\n        area: {\n          name: 'Main Building Complex',\n          bounds: [\n            { lat: 37.7749, lng: -122.4194 },\n            { lat: 37.7759, lng: -122.4184 },\n            { lat: 37.7769, lng: -122.4204 },\n            { lat: 37.7759, lng: -122.4214 }\n          ]\n        },\n        flightPath: [\n          { lat: 37.7749, lng: -122.4194, altitude: 75 },\n          { lat: 37.7759, lng: -122.4184, altitude: 75 },\n          { lat: 37.7769, lng: -122.4204, altitude: 75 },\n          { lat: 37.7759, lng: -122.4214, altitude: 75 }\n        ],\n        pattern: 'crosshatch',\n        parameters: {\n          altitude: 75,\n          speed: 6,\n          overlapPercentage: 80,\n          captureFrequency: 1,\n          sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n        },\n        priority: 'high',\n        scheduledAt: null,\n        progress: 100,\n        estimatedDuration: 35,\n        actualDuration: 32,\n        createdAt: new Date('2024-01-27T14:00:00Z'),\n        startedAt: new Date('2024-01-27T14:30:00Z'),\n        completedAt: new Date('2024-01-27T15:02:00Z'),\n        stats: {\n          distanceCovered: 4.2,\n          areasCovered: 1.5,\n          dataPointsCollected: 284\n        }\n      }\n    ];\n\n    mockMissions.forEach(mission => this.missions.set(mission.id, mission));\n  }\n\n  // Drone operations\n  async getDrones(): Promise<Drone[]> {\n    return Array.from(this.drones.values());\n  }\n\n  async getDrone(id: string): Promise<Drone | undefined> {\n    return this.drones.get(id);\n  }\n\n  async createDrone(droneData: InsertDrone): Promise<Drone> {\n    const id = `drone-${Date.now()}`;\n    const drone: Drone = { \n      id,\n      name: droneData.name,\n      model: droneData.model,\n      serialNumber: droneData.serialNumber,\n      status: droneData.status || 'available',\n      batteryLevel: droneData.batteryLevel || 0,\n      location: droneData.location,\n      flightHours: droneData.flightHours || 0,\n      lastMaintenance: droneData.lastMaintenance,\n      maxFlightTime: droneData.maxFlightTime,\n      sensors: [...droneData.sensors]\n    };\n    this.drones.set(id, drone);\n    return drone;\n  }\n\n  async updateDrone(id: string, updates: Partial<InsertDrone>): Promise<Drone | undefined> {\n    const drone = this.drones.get(id);\n    if (!drone) return undefined;\n    \n    const updatedDrone: Drone = { \n      ...drone, \n      ...updates,\n      sensors: updates.sensors ? [...updates.sensors] : drone.sensors\n    };\n    this.drones.set(id, updatedDrone);\n    return updatedDrone;\n  }\n\n  async deleteDrone(id: string): Promise<boolean> {\n    return this.drones.delete(id);\n  }\n\n  // Mission operations\n  async getMissions(): Promise<Mission[]> {\n    return Array.from(this.missions.values());\n  }\n\n  async getMission(id: string): Promise<Mission | undefined> {\n    return this.missions.get(id);\n  }\n\n  async createMission(missionData: InsertMission): Promise<Mission> {\n    const id = `mission-${Date.now()}`;\n    const mission: Mission = { \n      id,\n      name: missionData.name,\n      type: missionData.type,\n      status: missionData.status || 'planned',\n      droneId: missionData.droneId || null,\n      area: { ...missionData.area, bounds: [...missionData.area.bounds] },\n      flightPath: [...missionData.flightPath],\n      pattern: missionData.pattern,\n      parameters: missionData.parameters,\n      progress: missionData.progress || 0,\n      estimatedDuration: missionData.estimatedDuration,\n      actualDuration: missionData.actualDuration || null,\n      createdAt: new Date(),\n      startedAt: missionData.startedAt || null,\n      completedAt: missionData.completedAt || null,\n      stats: missionData.stats || null\n    };\n    this.missions.set(id, mission);\n    return mission;\n  }\n\n  async updateMission(id: string, updates: Partial<InsertMission>): Promise<Mission | undefined> {\n    const mission = this.missions.get(id);\n    if (!mission) return undefined;\n    \n    const updatedMission: Mission = { \n      ...mission, \n      ...updates,\n      area: updates.area ? { ...updates.area, bounds: [...updates.area.bounds] } : mission.area,\n      flightPath: updates.flightPath ? [...updates.flightPath] : mission.flightPath,\n      parameters: updates.parameters ? { \n        ...updates.parameters, \n        sensors: [...updates.parameters.sensors] \n      } : mission.parameters\n    };\n    this.missions.set(id, updatedMission);\n    return updatedMission;\n  }\n\n  async deleteMission(id: string): Promise<boolean> {\n    return this.missions.delete(id);\n  }\n\n  // Organization stats\n  async getOrganizationStats(): Promise<Organization> {\n    const allMissions = Array.from(this.missions.values());\n    const allDrones = Array.from(this.drones.values());\n    \n    return {\n      totalSurveys: allMissions.length,\n      totalFlightHours: allDrones.reduce((sum, drone) => sum + drone.flightHours, 0),\n      activeDrones: allDrones.filter(drone => drone.status !== 'maintenance').length,\n      completedMissions: allMissions.filter(mission => mission.status === 'completed').length\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10373},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, real, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Drone schema\nexport const drones = pgTable(\"drones\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  model: text(\"model\").notNull(),\n  serialNumber: text(\"serial_number\").notNull().unique(),\n  status: text(\"status\", { enum: ['available', 'in-mission', 'maintenance', 'charging'] }).notNull().default('available'),\n  batteryLevel: integer(\"battery_level\").notNull().default(0),\n  location: json(\"location\").$type<{ lat: number; lng: number }>().notNull(),\n  flightHours: real(\"flight_hours\").notNull().default(0),\n  lastMaintenance: text(\"last_maintenance\").notNull(),\n  maxFlightTime: integer(\"max_flight_time\").notNull(),\n  sensors: json(\"sensors\").$type<string[]>().notNull(),\n});\n\n// Mission schema\nexport const missions = pgTable(\"missions\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: ['facility-inspection', 'security-patrol', 'site-mapping', 'perimeter-survey'] }).notNull(),\n  status: text(\"status\", { enum: ['planned', 'in-progress', 'completed', 'aborted', 'paused'] }).notNull().default('planned'),\n  droneId: text(\"drone_id\").references(() => drones.id),\n  area: json(\"area\").$type<{\n    name: string;\n    bounds: Array<{ lat: number; lng: number }>;\n  }>().notNull(),\n  flightPath: json(\"flight_path\").$type<Array<{ lat: number; lng: number; altitude: number }>>().notNull(),\n  pattern: text(\"pattern\", { enum: ['crosshatch', 'perimeter', 'grid', 'spiral', 'custom'] }).notNull(),\n  parameters: json(\"parameters\").$type<{\n    altitude: number;\n    speed: number;\n    overlapPercentage: number;\n    captureFrequency: number;\n    sensors: string[];\n  }>().notNull(),\n  progress: integer(\"progress\").notNull().default(0),\n  estimatedDuration: integer(\"estimated_duration\").notNull(),\n  actualDuration: integer(\"actual_duration\"),\n  priority: text(\"priority\", { enum: ['low', 'medium', 'high', 'emergency'] }).notNull().default('medium'),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  stats: json(\"stats\").$type<{\n    distanceCovered: number;\n    areasCovered: number;\n    dataPointsCollected: number;\n    averageSpeed?: number;\n    batteryUsed?: number;\n  }>(),\n});\n\n// Create insert schemas\nexport const insertDroneSchema = createInsertSchema(drones).omit({\n  id: true,\n});\n\nexport const insertMissionSchema = createInsertSchema(missions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Type exports\nexport type InsertDrone = z.infer<typeof insertDroneSchema>;\nexport type Drone = typeof drones.$inferSelect;\nexport type InsertMission = z.infer<typeof insertMissionSchema>;\nexport type Mission = typeof missions.$inferSelect;\n\n// Organization data type (not stored in DB, calculated)\nexport type Organization = {\n  totalSurveys: number;\n  totalFlightHours: number;\n  activeDrones: number;\n  completedMissions: number;\n};\n","size_bytes":3119},"src/App.tsx":{"content":"import React, { useState } from 'react';\nimport Navigation from './components/Navigation';\nimport FleetDashboard from './components/dashboard/FleetDashboard';\nimport LiveMonitoring from './components/monitoring/LiveMonitoring';\nimport MissionPlanning from './components/planning/MissionPlanning';\nimport ReportingDashboard from './components/reporting/ReportingDashboard';\nimport SettingsPanel from './components/settings/SettingsPanel';\nimport { DroneProvider } from './contexts/DroneContext';\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState('dashboard');\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'dashboard':\n        return <FleetDashboard />;\n      case 'monitoring':\n        return <LiveMonitoring />;\n      case 'planning':\n        return <MissionPlanning />;\n      case 'reporting':\n        return <ReportingDashboard />;\n      case 'settings':\n        return <SettingsPanel />;\n      default:\n        return <FleetDashboard />;\n    }\n  };\n\n  return (\n    <DroneProvider>\n      <div className=\"min-h-screen bg-gray-900\">\n        <Navigation activeTab={activeTab} setActiveTab={setActiveTab} />\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {renderContent()}\n        </main>\n      </div>\n    </DroneProvider>\n  );\n}\n\nexport default App;","size_bytes":1319},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":234},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/App.tsx":{"content":"import { Router, Route, Switch } from 'wouter';\nimport Navigation from './components/Navigation';\nimport FleetDashboard from './pages/FleetDashboard.tsx';\nimport LiveMonitoring from './pages/LiveMonitoring.tsx';\nimport MissionPlanning from './pages/MissionPlanning.tsx';\nimport ReportingDashboard from './pages/ReportingDashboard.tsx';\nimport SettingsPanel from './pages/SettingsPanel.tsx';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"min-h-screen relative\" style={{\n        background: 'rgb(248, 250, 252)'\n      }}>\n        {/* Subtle background pattern */}\n        <div className=\"fixed inset-0 opacity-30\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `radial-gradient(circle at 1px 1px, rgba(139, 92, 246, 0.05) 1px, transparent 0)`,\n            backgroundSize: '20px 20px'\n          }}></div>\n        </div>\n        \n        <Navigation />\n        <main className=\"relative z-10 max-w-8xl mx-auto px-6 sm:px-8 lg:px-12 py-12 container-comfortable\">\n          <Switch>\n            <Route path=\"/\" component={FleetDashboard} />\n            <Route path=\"/dashboard\" component={FleetDashboard} />\n            <Route path=\"/monitoring\" component={LiveMonitoring} />\n            <Route path=\"/planning\" component={MissionPlanning} />\n            <Route path=\"/reporting\" component={ReportingDashboard} />\n            <Route path=\"/settings\" component={SettingsPanel} />\n            <Route>\n              <FleetDashboard />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","size_bytes":1591},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Force export button icons to be large */\n.export-button svg {\n  width: 60px !important;\n  height: 60px !important;\n  display: block;\n  vertical-align: middle;\n}\n\n/* Fix select component transparency issues and styling */\n[data-radix-select-content] {\n  background-color: white !important;\n  backdrop-filter: none !important;\n  min-width: var(--radix-select-trigger-width) !important;\n  max-width: 320px !important;\n}\n\n[data-radix-select-trigger] {\n  background-color: white !important;\n  border: 1px solid rgb(226 232 240) !important;\n  height: 40px !important;\n}\n\n[data-radix-select-item] {\n  background-color: transparent !important;\n  position: relative !important;\n  padding-left: 2rem !important;\n}\n\n[data-radix-select-item]:hover,\n[data-radix-select-item][data-highlighted] {\n  background-color: rgb(241 245 249) !important;\n}\n\n[data-radix-select-item][data-state=\"checked\"] {\n  background-color: rgb(239 246 255) !important;\n  color: rgb(59 130 246) !important;\n}\n\n/* Completely hide all check mark indicators */\n[data-radix-select-item] [data-radix-select-item-indicator] {\n  display: none !important;\n  visibility: hidden !important;\n  opacity: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n}\n\n/* Hide any check mark icons specifically */\n[data-radix-select-item-indicator] svg,\n[data-radix-select-item-indicator] * {\n  display: none !important;\n}\n\n/* Remove padding from items since we don't need space for check marks */\n[data-radix-select-item] {\n  background-color: transparent !important;\n  padding-left: 0.75rem !important;\n  position: relative !important;\n}\n\n/* Override any default radix styles for selected items */\n[data-radix-select-item][data-state=\"checked\"] [data-radix-select-item-indicator] {\n  display: none !important;\n  visibility: hidden !important;\n}\n\n/* Ensure all select components are fully opaque and sized consistently */\n.select-trigger-solid {\n  background-color: white !important;\n  border: 1px solid rgb(226 232 240) !important;\n  height: 40px !important;\n  min-height: 40px !important;\n}\n\n.select-content-solid {\n  background-color: white !important;\n  border: 1px solid rgb(226 232 240) !important;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;\n  min-width: var(--radix-select-trigger-width) !important;\n  max-width: 320px !important;\n}\n\n/* Clean White/Light Color Scheme */\n:root {\n  /* Primary Colors - Royal Purple & Violet */\n  --primary-50: 250 245 255;\n  --primary-100: 243 232 255;\n  --primary-200: 233 213 255;\n  --primary-300: 196 181 253;\n  --primary-400: 167 139 250;\n  --primary-500: 139 92 246;\n  --primary-600: 124 58 237;\n  --primary-700: 109 40 217;\n  --primary-800: 91 33 182;\n  --primary-900: 76 29 149;\n  \n  /* Background - Clean White */\n  --bg-primary: 255 255 255;\n  --bg-secondary: 248 250 252;\n  --bg-tertiary: 241 245 249;\n  --bg-card: 255 255 255;\n  --bg-accent: 248 250 252;\n  \n  /* Text - Clean Contrast */\n  --text-primary: 15 23 42;\n  --text-secondary: 51 65 85;\n  --text-muted: 100 116 139;\n  --text-accent: 139 92 246;\n  \n  /* Status Colors - Vibrant & Clear */\n  --success: 16 185 129;\n  --success-light: 52 211 153;\n  --warning: 245 158 11;\n  --warning-light: 251 191 36;\n  --error: 239 68 68;\n  --error-light: 248 113 113;\n  --info: 139 92 246;\n  --info-light: 167 139 250;\n  \n  /* Beautiful Purple Gradients */\n  --gradient-primary: linear-gradient(135deg, rgb(139 92 246) 0%, rgb(168 85 247) 100%);\n  --gradient-secondary: linear-gradient(135deg, rgb(16 185 129) 0%, rgb(5 150 105) 100%);\n  --gradient-accent: linear-gradient(135deg, rgb(124 58 237) 0%, rgb(147 51 234) 100%);\n  --gradient-danger: linear-gradient(135deg, rgb(239 68 68) 0%, rgb(220 38 38) 100%);\n  --gradient-warning: linear-gradient(135deg, rgb(245 158 11) 0%, rgb(217 119 6) 100%);\n  --gradient-cosmic: linear-gradient(135deg, rgb(168 85 247) 0%, rgb(124 58 237) 50%, rgb(109 40 217) 100%);\n  \n  /* Card and Surface Colors */\n  --surface-primary: rgba(255, 255, 255, 0.95);\n  --surface-secondary: rgba(248, 250, 252, 0.8);\n  --surface-accent: rgba(241, 245, 249, 0.9);\n  \n  /* Border Colors */\n  --border-primary: rgba(139, 92, 246, 0.15);\n  --border-secondary: rgba(148, 163, 184, 0.2);\n  --border-accent: rgba(168, 85, 247, 0.2);\n}\n\n/* Custom animations */\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }\n  50% { box-shadow: 0 0 30px rgba(59, 130, 246, 0.6); }\n}\n\n@keyframes slide-in-up {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes shimmer {\n  0% { background-position: -200px 0; }\n  100% { background-position: 200px 0; }\n}\n\n/* Custom utility classes */\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n.animate-slide-in-up {\n  animation: slide-in-up 0.5s ease-out;\n}\n\n.gradient-primary {\n  background: var(--gradient-primary);\n}\n\n.gradient-secondary {\n  background: var(--gradient-secondary);\n}\n\n.gradient-danger {\n  background: var(--gradient-danger);\n}\n\n.gradient-warning {\n  background: var(--gradient-warning);\n}\n\n.glass-effect {\n  background: white;\n  border: 1px solid rgb(229 231 235);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  border-radius: 8px;\n}\n\n.glass-effect-strong {\n  background: white;\n  border: 1px solid rgba(139, 92, 246, 0.2);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  border-radius: 12px;\n}\n\n/* Text contrast improvements */\n.text-high-contrast {\n  color: rgb(var(--text-primary));\n  font-weight: 600;\n}\n\n.text-medium-contrast {\n  color: rgb(var(--text-secondary));\n}\n\n.text-accent {\n  color: rgb(var(--text-accent));\n}\n\n/* Better spacing system */\n.container-comfortable {\n  padding: 2rem;\n  gap: 2rem;\n}\n\n.container-relaxed {\n  padding: 3rem;\n  gap: 3rem;\n}\n\n.grid-comfortable {\n  gap: 2rem;\n}\n\n.grid-relaxed {\n  gap: 3rem;\n}\n\n.shimmer {\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n  background-size: 200px 100%;\n  animation: shimmer 2s infinite;\n}\n\n/* Enhanced scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgb(30 41 59);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgb(59 130 246);\n  border-radius: 4px;\n  transition: background 0.3s ease;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgb(37 99 235);\n}\n\n/* Custom focus styles */\n.focus-ring:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px rgb(59 130 246 / 0.5);\n  border-color: rgb(59 130 246);\n}\n\n/* Loading skeleton */\n.skeleton {\n  background: linear-gradient(90deg, rgb(30 41 59), rgb(51 65 85), rgb(30 41 59));\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n  border-radius: 0.375rem;\n}\n\n/* Beautiful Status Indicators */\n.status-available {\n  background: var(--gradient-secondary);\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.status-in-mission {\n  background: var(--gradient-accent);\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.status-maintenance {\n  background: var(--gradient-danger);\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.status-charging {\n  background: var(--gradient-warning);\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.status-offline {\n  background: linear-gradient(135deg, rgb(107 114 128) 0%, rgb(75 85 99) 100%);\n  color: white;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n/* Improved spacing utilities */\n.spacing-comfortable {\n  margin: 1.5rem;\n}\n\n.spacing-relaxed {\n  margin: 2rem;\n}\n\n.gap-comfortable {\n  gap: 1.5rem;\n}\n\n.gap-relaxed {\n  gap: 2rem;\n}\n\n/* Hover effects */\n.hover-lift {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1);\n}\n\n/* Clean Card System */\n.card-enhanced {\n  background: white;\n  border: 1px solid rgb(229 231 235);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 12px;\n}\n\n.card-enhanced:hover {\n  border-color: rgba(139, 92, 246, 0.3);\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  transform: translateY(-2px);\n}\n\n.card-premium {\n  background: white;\n  border: 1px solid rgba(139, 92, 246, 0.15);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  border-radius: 12px;\n  padding: 24px;\n  text-align: center;\n}\n\n.card-premium:hover {\n  box-shadow: 0 10px 15px -3px rgba(139, 92, 246, 0.1), 0 4px 6px -2px rgba(139, 92, 246, 0.05);\n  border-color: rgba(139, 92, 246, 0.25);\n  transform: translateY(-2px);\n}\n\n/* Beautiful Button System */\n.btn-primary {\n  background: var(--gradient-primary);\n  border: none;\n  color: white;\n  font-weight: 600;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  box-shadow: 0 4px 14px 0 rgba(139, 92, 246, 0.3);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px 0 rgba(139, 92, 246, 0.4);\n}\n\n.btn-secondary {\n  background: var(--gradient-secondary);\n  border: none;\n  color: white;\n  font-weight: 600;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  box-shadow: 0 4px 14px 0 rgba(16, 185, 129, 0.3);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-secondary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px 0 rgba(16, 185, 129, 0.4);\n}\n\n.btn-outline {\n  background: rgba(255, 255, 255, 0.05);\n  border: 2px solid var(--border-accent);\n  color: rgb(var(--text-primary));\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.btn-outline:hover {\n  background: var(--gradient-primary);\n  border-color: transparent;\n  color: white;\n  transform: translateY(-1px);\n}\n\n/* Enhanced Progress Bars */\n.progress-bar {\n  position: relative;\n  overflow: hidden;\n  background: rgba(var(--bg-accent), 0.3);\n  border-radius: 9999px;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.progress-fill {\n  background: var(--gradient-primary);\n  transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);\n}\n\n.progress-fill:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n  background-size: 200% 100%;\n  animation: shimmer 2s infinite;\n}\n\n.progress-success .progress-fill {\n  background: var(--gradient-secondary);\n  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);\n}\n\n.progress-warning .progress-fill {\n  background: var(--gradient-warning);\n  box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);\n}\n\n.progress-danger .progress-fill {\n  background: var(--gradient-danger);\n  box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);\n}\n\n/* Mission status indicators */\n.mission-planned {\n  background: linear-gradient(135deg, rgb(156 163 175) 0%, rgb(107 114 128) 100%);\n}\n\n.mission-in-progress {\n  background: linear-gradient(135deg, rgb(59 130 246) 0%, rgb(37 99 235) 100%);\n}\n\n.mission-completed {\n  background: linear-gradient(135deg, rgb(34 197 94) 0%, rgb(16 185 129) 100%);\n}\n\n.mission-paused {\n  background: linear-gradient(135deg, rgb(251 146 60) 0%, rgb(249 115 22) 100%);\n}\n\n.mission-aborted {\n  background: linear-gradient(135deg, rgb(239 68 68) 0%, rgb(220 38 38) 100%);\n}\n\n/* Ensure proper CardHeader layout with reduced spacing */\n.card-header {\n  display: flex !important;\n  flex-direction: column !important;\n  gap: 0.125rem !important; /* Reduced from space-y-1.5 to minimal gap */\n}\n\n.card-header .card-title {\n  display: block !important;\n  width: 100% !important;\n}\n\n.card-header .card-description {\n  display: block !important;\n  width: 100% !important;\n  margin-top: 0.125rem !important; /* Reduced spacing */\n}\n","size_bytes":12168},"client/src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from './lib/frontendQueryClient';\nimport App from './App';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StrictMode>\n);\n","size_bytes":424},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/components/Navigation.tsx":{"content":"import React from 'react';\nimport { MapPin, Bone as Drone, BarChart3, PlusCircle, Settings } from 'lucide-react';\n\ninterface NavigationProps {\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ activeTab, setActiveTab }) => {\n  const navItems = [\n    { id: 'dashboard', label: 'Fleet Dashboard', icon: Drone },\n    { id: 'monitoring', label: 'Live Monitoring', icon: MapPin },\n    { id: 'planning', label: 'Mission Planning', icon: PlusCircle },\n    { id: 'reporting', label: 'Reports & Analytics', icon: BarChart3 },\n    { id: 'settings', label: 'Settings', icon: Settings },\n  ];\n\n  return (\n    <nav className=\"bg-gray-800 border-b border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-xl font-bold text-white flex items-center gap-2\">\n                <Drone className=\"h-6 w-6 text-blue-400\" />\n                DroneFlow\n              </h1>\n            </div>\n          </div>\n          <div className=\"flex\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              {navItems.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <button\n                    key={item.id}\n                    onClick={() => setActiveTab(item.id)}\n                    className={`px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${\n                      activeTab === item.id\n                        ? 'bg-blue-600 text-white'\n                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n                    }`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;","size_bytes":2071},"src/contexts/DroneContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Drone, Mission, Organization } from '../types';\n\ninterface DroneContextType {\n  drones: Drone[];\n  missions: Mission[];\n  organization: Organization;\n  addMission: (mission: Omit<Mission, 'id' | 'createdAt'>) => void;\n  updateMission: (id: string, updates: Partial<Mission>) => void;\n  updateDroneStatus: (id: string, status: Drone['status']) => void;\n  deleteMission: (id: string) => void;\n}\n\nconst DroneContext = createContext<DroneContextType | undefined>(undefined);\n\n// Mock data\nconst mockDrones: Drone[] = [\n  {\n    id: 'drone-001',\n    name: 'Surveyor Alpha',\n    model: 'DJI Matrice 300 RTK',\n    serialNumber: 'DJ001MAT300',\n    status: 'available',\n    batteryLevel: 85,\n    location: { lat: 37.7749, lng: -122.4194 },\n    flightHours: 245.5,\n    lastMaintenance: '2024-01-15',\n    maxFlightTime: 55,\n    sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n  },\n  {\n    id: 'drone-002',\n    name: 'Inspector Beta',\n    model: 'DJI Phantom 4 RTK',\n    serialNumber: 'DJ002PH4RTK',\n    status: 'in-mission',\n    batteryLevel: 72,\n    location: { lat: 37.7849, lng: -122.4094 },\n    flightHours: 189.2,\n    lastMaintenance: '2024-01-20',\n    maxFlightTime: 30,\n    sensors: ['RGB Camera', 'Multispectral']\n  },\n  {\n    id: 'drone-003',\n    name: 'Guardian Gamma',\n    model: 'Autel EVO Max 4T',\n    serialNumber: 'AU003EVMax4T',\n    status: 'charging',\n    batteryLevel: 15,\n    location: { lat: 37.7649, lng: -122.4294 },\n    flightHours: 156.8,\n    lastMaintenance: '2024-01-10',\n    maxFlightTime: 42,\n    sensors: ['RGB Camera', 'Thermal', 'Night Vision']\n  },\n  {\n    id: 'drone-004',\n    name: 'Mapper Delta',\n    model: 'Skydio X2D',\n    serialNumber: 'SK004X2D',\n    status: 'available',\n    batteryLevel: 95,\n    location: { lat: 37.7549, lng: -122.4394 },\n    flightHours: 312.1,\n    lastMaintenance: '2024-01-25',\n    maxFlightTime: 35,\n    sensors: ['RGB Camera', 'Thermal', '3D Mapping']\n  }\n];\n\nconst mockMissions: Mission[] = [\n  {\n    id: 'mission-001',\n    name: 'Weekly Security Patrol - North Wing',\n    type: 'security',\n    status: 'in-progress',\n    droneId: 'drone-002',\n    area: {\n      name: 'North Wing Perimeter',\n      bounds: [\n        { lat: 37.7849, lng: -122.4094 },\n        { lat: 37.7859, lng: -122.4084 },\n        { lat: 37.7869, lng: -122.4104 },\n        { lat: 37.7859, lng: -122.4114 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7849, lng: -122.4094, altitude: 50 },\n      { lat: 37.7859, lng: -122.4084, altitude: 50 },\n      { lat: 37.7869, lng: -122.4104, altitude: 50 },\n      { lat: 37.7859, lng: -122.4114, altitude: 50 }\n    ],\n    pattern: 'perimeter',\n    parameters: {\n      altitude: 50,\n      speed: 8,\n      overlapPercentage: 60,\n      captureFrequency: 2\n    },\n    progress: 65,\n    estimatedDuration: 25,\n    createdAt: '2024-01-28T10:00:00Z',\n    startedAt: '2024-01-28T10:15:00Z',\n    stats: {\n      distanceCovered: 2.1,\n      areasCovered: 0.8,\n      dataPointsCollected: 156\n    }\n  },\n  {\n    id: 'mission-002',\n    name: 'Infrastructure Inspection - Main Building',\n    type: 'inspection',\n    status: 'completed',\n    droneId: 'drone-001',\n    area: {\n      name: 'Main Building Complex',\n      bounds: [\n        { lat: 37.7749, lng: -122.4194 },\n        { lat: 37.7759, lng: -122.4184 },\n        { lat: 37.7769, lng: -122.4204 },\n        { lat: 37.7759, lng: -122.4214 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7749, lng: -122.4194, altitude: 75 },\n      { lat: 37.7759, lng: -122.4184, altitude: 75 },\n      { lat: 37.7769, lng: -122.4204, altitude: 75 },\n      { lat: 37.7759, lng: -122.4214, altitude: 75 }\n    ],\n    pattern: 'crosshatch',\n    parameters: {\n      altitude: 75,\n      speed: 6,\n      overlapPercentage: 80,\n      captureFrequency: 1\n    },\n    progress: 100,\n    estimatedDuration: 35,\n    actualDuration: 32,\n    createdAt: '2024-01-27T14:00:00Z',\n    startedAt: '2024-01-27T14:30:00Z',\n    completedAt: '2024-01-27T15:02:00Z',\n    stats: {\n      distanceCovered: 4.2,\n      areasCovered: 1.5,\n      dataPointsCollected: 284\n    }\n  }\n];\n\nconst mockOrganization: Organization = {\n  totalSurveys: 156,\n  totalFlightHours: 2847.3,\n  activeDrones: 4,\n  completedMissions: 142\n};\n\nexport const DroneProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [drones, setDrones] = useState<Drone[]>(mockDrones);\n  const [missions, setMissions] = useState<Mission[]>(mockMissions);\n  const [organization, setOrganization] = useState<Organization>(mockOrganization);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMissions(prev => prev.map(mission => {\n        if (mission.status === 'in-progress') {\n          const newProgress = Math.min(mission.progress + Math.random() * 5, 100);\n          return {\n            ...mission,\n            progress: newProgress,\n            status: newProgress >= 100 ? 'completed' : 'in-progress'\n          };\n        }\n        return mission;\n      }));\n\n      setDrones(prev => prev.map(drone => {\n        if (drone.status === 'in-mission') {\n          const newBattery = Math.max(drone.batteryLevel - Math.random() * 2, 10);\n          return {\n            ...drone,\n            batteryLevel: newBattery\n          };\n        }\n        return drone;\n      }));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addMission = (mission: Omit<Mission, 'id' | 'createdAt'>) => {\n    const newMission: Mission = {\n      ...mission,\n      id: `mission-${Date.now()}`,\n      createdAt: new Date().toISOString()\n    };\n    setMissions(prev => [newMission, ...prev]);\n  };\n\n  const updateMission = (id: string, updates: Partial<Mission>) => {\n    setMissions(prev => prev.map(mission => \n      mission.id === id ? { ...mission, ...updates } : mission\n    ));\n  };\n\n  const updateDroneStatus = (id: string, status: Drone['status']) => {\n    setDrones(prev => prev.map(drone => \n      drone.id === id ? { ...drone, status } : drone\n    ));\n  };\n\n  const deleteMission = (id: string) => {\n    setMissions(prev => prev.filter(mission => mission.id !== id));\n  };\n\n  return (\n    <DroneContext.Provider value={{\n      drones,\n      missions,\n      organization,\n      addMission,\n      updateMission,\n      updateDroneStatus,\n      deleteMission\n    }}>\n      {children}\n    </DroneContext.Provider>\n  );\n};\n\nexport const useDrone = () => {\n  const context = useContext(DroneContext);\n  if (context === undefined) {\n    throw new Error('useDrone must be used within a DroneProvider');\n  }\n  return context;\n};","size_bytes":6614},"src/types/index.ts":{"content":"export interface Drone {\n  id: string;\n  name: string;\n  model: string;\n  serialNumber: string;\n  status: 'available' | 'in-mission' | 'maintenance' | 'charging';\n  batteryLevel: number;\n  location: {\n    lat: number;\n    lng: number;\n  };\n  flightHours: number;\n  lastMaintenance: string;\n  maxFlightTime: number;\n  sensors: string[];\n}\n\nexport interface Mission {\n  id: string;\n  name: string;\n  type: 'inspection' | 'security' | 'mapping';\n  status: 'planned' | 'in-progress' | 'completed' | 'aborted' | 'paused';\n  droneId: string;\n  area: {\n    name: string;\n    bounds: Array<{ lat: number; lng: number }>;\n  };\n  flightPath: Array<{ lat: number; lng: number; altitude: number }>;\n  pattern: 'crosshatch' | 'perimeter' | 'custom';\n  parameters: {\n    altitude: number;\n    speed: number;\n    overlapPercentage: number;\n    captureFrequency: number;\n  };\n  progress: number;\n  estimatedDuration: number;\n  actualDuration?: number;\n  createdAt: string;\n  startedAt?: string;\n  completedAt?: string;\n  stats?: {\n    distanceCovered: number;\n    areasCovered: number;\n    dataPointsCollected: number;\n  };\n}\n\nexport interface Organization {\n  totalSurveys: number;\n  totalFlightHours: number;\n  activeDrones: number;\n  completedMissions: number;\n}","size_bytes":1249},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { MapPin, Bone as Drone, BarChart3, PlusCircle, Settings, Zap } from 'lucide-react';\n\nconst Navigation = () => {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: '/dashboard', label: 'Fleet Dashboard', icon: Drone },\n    { path: '/monitoring', label: 'Live Monitoring', icon: MapPin },\n    { path: '/planning', label: 'Mission Planning', icon: PlusCircle },\n    { path: '/reporting', label: 'Reports & Analytics', icon: BarChart3 },\n    { path: '/settings', label: 'Settings', icon: Settings },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === '/dashboard' && (location === '/' || location === '/dashboard')) {\n      return true;\n    }\n    return location === path;\n  };\n\n  return (\n    <motion.nav \n      className=\"bg-white border-b border-gray-200 sticky top-0 z-50 shadow-sm\"\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <motion.div \n              className=\"flex-shrink-0\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <Link href=\"/\" data-testid=\"link-home\">\n                <motion.h1 \n                  className=\"text-xl font-bold flex items-center gap-3 text-gray-900\"\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 10, repeat: Infinity, ease: \"linear\" }}\n                    className=\"relative\"\n                  >\n                    <Drone className=\"h-7 w-7 text-purple-600\" />\n                    <motion.div \n                      className=\"absolute -top-1 -right-1 w-2 h-2 bg-emerald-400 rounded-full\"\n                      animate={{ scale: [1, 1.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  DroneFlow\n                  <motion.div\n                    animate={{ opacity: [0.5, 1, 0.5] }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"ml-2\"\n                  >\n                    <Zap className=\"h-4 w-4 text-purple-500\" />\n                  </motion.div>\n                </motion.h1>\n              </Link>\n            </motion.div>\n          </div>\n          <div className=\"flex\">\n            <div className=\"ml-10 flex items-baseline space-x-2\">\n              {navItems.map((item, index) => {\n                const Icon = item.icon;\n                const active = isActive(item.path);\n                return (\n                  <motion.div\n                    key={item.path}\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Link\n                      href={item.path}\n                      data-testid={`link-${item.path.replace('/', '')}`}\n                    >\n                      <motion.div\n                        className={`px-4 py-2.5 rounded-xl text-sm font-bold transition-all flex items-center gap-2 relative overflow-hidden ${\n                          active\n                            ? 'text-white shadow-lg'\n                            : 'text-gray-600 hover:text-gray-900'\n                        }`}\n                        style={{\n                          background: active ? 'var(--gradient-primary)' : 'transparent'\n                        }}\n                        whileHover={{ \n                          scale: 1.05,\n                          backgroundColor: active ? undefined : 'rgba(139, 92, 246, 0.05)'\n                        }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        {active && (\n                          <motion.div\n                            className=\"absolute inset-0 bg-white opacity-20\"\n                            initial={{ x: '-100%' }}\n                            animate={{ x: '100%' }}\n                            transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                          />\n                        )}\n                        <Icon className=\"h-4 w-4\" />\n                        {item.label}\n                        {active && (\n                          <motion.div\n                            className=\"absolute -bottom-1 left-1/2 w-1 h-1 bg-white rounded-full\"\n                            layoutId=\"activeIndicator\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            style={{ x: '-50%' }}\n                          />\n                        )}\n                      </motion.div>\n                    </Link>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </motion.nav>\n  );\n};\n\nexport default Navigation;","size_bytes":5187},"client/src/contexts/DroneContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Drone, Mission, Organization } from '../types';\n\ninterface DroneContextType {\n  drones: Drone[];\n  missions: Mission[];\n  organization: Organization;\n  addMission: (mission: Omit<Mission, 'id' | 'createdAt'>) => void;\n  updateMission: (id: string, updates: Partial<Mission>) => void;\n  updateDroneStatus: (id: string, status: Drone['status']) => void;\n  deleteMission: (id: string) => void;\n}\n\nconst DroneContext = createContext<DroneContextType | undefined>(undefined);\n\n// Mock data\nconst mockDrones: Drone[] = [\n  {\n    id: 'drone-001',\n    name: 'Surveyor Alpha',\n    model: 'DJI Matrice 300 RTK',\n    serialNumber: 'DJ001MAT300',\n    status: 'available',\n    batteryLevel: 85,\n    location: { lat: 37.7749, lng: -122.4194 },\n    flightHours: 245.5,\n    lastMaintenance: '2024-01-15',\n    maxFlightTime: 55,\n    sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n  },\n  {\n    id: 'drone-002',\n    name: 'Inspector Beta',\n    model: 'DJI Phantom 4 RTK',\n    serialNumber: 'DJ002PH4RTK',\n    status: 'in-mission',\n    batteryLevel: 72,\n    location: { lat: 37.7849, lng: -122.4094 },\n    flightHours: 189.2,\n    lastMaintenance: '2024-01-20',\n    maxFlightTime: 30,\n    sensors: ['RGB Camera', 'Multispectral']\n  },\n  {\n    id: 'drone-003',\n    name: 'Guardian Gamma',\n    model: 'Autel EVO Max 4T',\n    serialNumber: 'AU003EVMax4T',\n    status: 'charging',\n    batteryLevel: 15,\n    location: { lat: 37.7649, lng: -122.4294 },\n    flightHours: 156.8,\n    lastMaintenance: '2024-01-10',\n    maxFlightTime: 42,\n    sensors: ['RGB Camera', 'Thermal', 'Night Vision']\n  },\n  {\n    id: 'drone-004',\n    name: 'Mapper Delta',\n    model: 'Skydio X2D',\n    serialNumber: 'SK004X2D',\n    status: 'available',\n    batteryLevel: 95,\n    location: { lat: 37.7549, lng: -122.4394 },\n    flightHours: 312.1,\n    lastMaintenance: '2024-01-25',\n    maxFlightTime: 35,\n    sensors: ['RGB Camera', 'Thermal', '3D Mapping']\n  }\n];\n\nconst mockMissions: Mission[] = [\n  {\n    id: 'mission-001',\n    name: 'Weekly Security Patrol - North Wing',\n    type: 'security',\n    status: 'in-progress',\n    droneId: 'drone-002',\n    area: {\n      name: 'North Wing Perimeter',\n      bounds: [\n        { lat: 37.7849, lng: -122.4094 },\n        { lat: 37.7859, lng: -122.4084 },\n        { lat: 37.7869, lng: -122.4104 },\n        { lat: 37.7859, lng: -122.4114 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7849, lng: -122.4094, altitude: 50 },\n      { lat: 37.7859, lng: -122.4084, altitude: 50 },\n      { lat: 37.7869, lng: -122.4104, altitude: 50 },\n      { lat: 37.7859, lng: -122.4114, altitude: 50 }\n    ],\n    pattern: 'perimeter',\n    parameters: {\n      altitude: 50,\n      speed: 8,\n      overlapPercentage: 60,\n      captureFrequency: 2\n    },\n    progress: 65,\n    estimatedDuration: 25,\n    createdAt: '2024-01-28T10:00:00Z',\n    startedAt: '2024-01-28T10:15:00Z',\n    stats: {\n      distanceCovered: 2.1,\n      areasCovered: 0.8,\n      dataPointsCollected: 156\n    }\n  },\n  {\n    id: 'mission-002',\n    name: 'Infrastructure Inspection - Main Building',\n    type: 'inspection',\n    status: 'completed',\n    droneId: 'drone-001',\n    area: {\n      name: 'Main Building Complex',\n      bounds: [\n        { lat: 37.7749, lng: -122.4194 },\n        { lat: 37.7759, lng: -122.4184 },\n        { lat: 37.7769, lng: -122.4204 },\n        { lat: 37.7759, lng: -122.4214 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7749, lng: -122.4194, altitude: 75 },\n      { lat: 37.7759, lng: -122.4184, altitude: 75 },\n      { lat: 37.7769, lng: -122.4204, altitude: 75 },\n      { lat: 37.7759, lng: -122.4214, altitude: 75 }\n    ],\n    pattern: 'crosshatch',\n    parameters: {\n      altitude: 75,\n      speed: 6,\n      overlapPercentage: 80,\n      captureFrequency: 1\n    },\n    progress: 100,\n    estimatedDuration: 35,\n    actualDuration: 32,\n    createdAt: '2024-01-27T14:00:00Z',\n    startedAt: '2024-01-27T14:30:00Z',\n    completedAt: '2024-01-27T15:02:00Z',\n    stats: {\n      distanceCovered: 4.2,\n      areasCovered: 1.5,\n      dataPointsCollected: 284\n    }\n  }\n];\n\nconst mockOrganization: Organization = {\n  totalSurveys: 156,\n  totalFlightHours: 2847.3,\n  activeDrones: 4,\n  completedMissions: 142\n};\n\nexport const DroneProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [drones, setDrones] = useState<Drone[]>(mockDrones);\n  const [missions, setMissions] = useState<Mission[]>(mockMissions);\n  const [organization, setOrganization] = useState<Organization>(mockOrganization);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMissions(prev => prev.map(mission => {\n        if (mission.status === 'in-progress') {\n          const newProgress = Math.min(mission.progress + Math.random() * 5, 100);\n          return {\n            ...mission,\n            progress: newProgress,\n            status: newProgress >= 100 ? 'completed' : 'in-progress'\n          };\n        }\n        return mission;\n      }));\n\n      setDrones(prev => prev.map(drone => {\n        if (drone.status === 'in-mission') {\n          const newBattery = Math.max(drone.batteryLevel - Math.random() * 2, 10);\n          return {\n            ...drone,\n            batteryLevel: newBattery\n          };\n        }\n        return drone;\n      }));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addMission = (mission: Omit<Mission, 'id' | 'createdAt'>) => {\n    const newMission: Mission = {\n      ...mission,\n      id: `mission-${Date.now()}`,\n      createdAt: new Date().toISOString()\n    };\n    setMissions(prev => [newMission, ...prev]);\n  };\n\n  const updateMission = (id: string, updates: Partial<Mission>) => {\n    setMissions(prev => prev.map(mission => \n      mission.id === id ? { ...mission, ...updates } : mission\n    ));\n  };\n\n  const updateDroneStatus = (id: string, status: Drone['status']) => {\n    setDrones(prev => prev.map(drone => \n      drone.id === id ? { ...drone, status } : drone\n    ));\n  };\n\n  const deleteMission = (id: string) => {\n    setMissions(prev => prev.filter(mission => mission.id !== id));\n  };\n\n  return (\n    <DroneContext.Provider value={{\n      drones,\n      missions,\n      organization,\n      addMission,\n      updateMission,\n      updateDroneStatus,\n      deleteMission\n    }}>\n      {children}\n    </DroneContext.Provider>\n  );\n};\n\nexport const useDrone = () => {\n  const context = useContext(DroneContext);\n  if (context === undefined) {\n    throw new Error('useDrone must be used within a DroneProvider');\n  }\n  return context;\n};","size_bytes":6614},"client/src/hooks/use-toast.ts":{"content":"import { useState, useCallback } from 'react';\n\nexport interface Toast {\n  id: string;\n  title?: string;\n  description?: string;\n  variant?: 'default' | 'destructive';\n}\n\nexport const useToast = () => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const toast = useCallback(({ title, description, variant = 'default' }: Omit<Toast, 'id'>) => {\n    const id = Math.random().toString(36).substring(2, 9);\n    const newToast: Toast = { id, title, description, variant };\n    \n    setToasts(prev => [...prev, newToast]);\n    \n    // Auto-dismiss after 5 seconds\n    setTimeout(() => {\n      setToasts(prev => prev.filter(t => t.id !== id));\n    }, 5000);\n    \n    return {\n      id,\n      dismiss: () => setToasts(prev => prev.filter(t => t.id !== id))\n    };\n  }, []);\n\n  return { toast, toasts };\n};","size_bytes":808},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from '@tanstack/react-query';\n\n// Configure the default fetcher for React Query\nconst defaultQueryFn = async ({ queryKey }: { queryKey: readonly unknown[] }) => {\n  const response = await fetch(queryKey[0] as string);\n  \n  if (!response.ok) {\n    throw new Error(`HTTP Error: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: defaultQueryFn,\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 2,\n    },\n  },\n});\n\n// Helper function for API requests with mutations\nexport async function apiRequest(url: string, options: RequestInit = {}) {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: 'Request failed' }));\n    throw new Error(error.message || `HTTP Error: ${response.status}`);\n  }\n\n  // Handle 204 No Content responses\n  if (response.status === 204) {\n    return null;\n  }\n\n  return response.json();\n}","size_bytes":1128},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","size_bytes":165},"client/src/pages/FleetDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Plane, \n  Battery, \n  Zap, \n  Settings, \n  MapPin, \n  Clock, \n  Wrench, \n  Activity,\n  Filter,\n  Search,\n  RefreshCw,\n  CheckCircle\n} from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/frontendQueryClient';\nimport type { Drone as DroneType, Mission } from '@shared/schema';\n\nexport default function FleetDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data: drones = [], isLoading: dronesLoading, refetch: refetchDrones } = useQuery<DroneType[]>({\n    queryKey: ['/api/drones'],\n    refetchInterval: 30000, // Refresh every 30 seconds for real-time data\n  });\n\n  const { data: missions = [], isLoading: missionsLoading } = useQuery<Mission[]>({\n    queryKey: ['/api/missions'],\n    refetchInterval: 30000,\n  });\n\n  const updateDroneMutation = useMutation({\n    mutationFn: async ({ droneId, status }: { droneId: string; status: string }) => {\n      return apiRequest(`/api/drones/${droneId}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/drones'] });\n      toast({\n        title: 'Drone Status Updated',\n        description: 'Drone status has been successfully updated.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update drone status.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Filter drones based on status and search\n  const filteredDrones = drones.filter(drone => {\n    const matchesStatus = statusFilter === 'all' || drone.status === statusFilter;\n    const matchesSearch = drone.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         drone.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         drone.serialNumber.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  // Calculate fleet statistics\n  const fleetStats = {\n    total: drones.length,\n    available: drones.filter(d => d.status === 'available').length,\n    inMission: drones.filter(d => d.status === 'in-mission').length,\n    charging: drones.filter(d => d.status === 'charging').length,\n    maintenance: drones.filter(d => d.status === 'maintenance').length,\n    offline: drones.filter(d => d.status === 'offline').length,\n    avgBattery: Math.round(drones.reduce((sum, d) => sum + d.batteryLevel, 0) / (drones.length || 1)),\n    totalFlightHours: drones.reduce((sum, d) => sum + d.flightHours, 0),\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-green-500';\n      case 'in-mission': return 'bg-blue-500';\n      case 'charging': return 'bg-yellow-500';\n      case 'maintenance': return 'bg-orange-500';\n      case 'offline': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-green-100 text-green-800 border-green-200';\n      case 'in-mission': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'charging': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'maintenance': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'offline': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 75) return 'text-green-600';\n    if (level > 50) return 'text-yellow-600';\n    if (level > 25) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  const getDroneActiveMission = (droneId: string) => {\n    return missions.find(m => m.droneId === droneId && m.status === 'in-progress');\n  };\n\n  if (dronesLoading || missionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n        Loading fleet data...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Fleet Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Real-time drone fleet management and monitoring\n          </p>\n        </div>\n        <Button \n          onClick={() => { refetchDrones(); }}\n          variant=\"outline\"\n          data-testid=\"button-refresh-fleet\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Refresh Fleet\n        </Button>\n      </div>\n\n      {/* Fleet Overview Statistics */}\n      <div>\n        <h3 className=\"text-xl font-semibold text-high-contrast mb-4\">Fleet Performance Overview</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 grid-comfortable\">\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-total-drones\">\n            <Plane className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Total Drones</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{fleetStats.total}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-available-drones\">\n            <Activity className=\"h-10 w-10 text-green-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Available</h4>\n            <span className=\"text-3xl font-bold text-green-400\">{fleetStats.available}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-active-missions\">\n            <Activity className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Active Missions</h4>\n            <span className=\"text-3xl font-bold text-blue-400\">{fleetStats.inMission}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-charging\">\n            <Zap className=\"h-10 w-10 text-yellow-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Charging</h4>\n            <span className=\"text-3xl font-bold text-yellow-400\">{fleetStats.charging}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-avg-battery\">\n            <Battery className=\"h-10 w-10 text-purple-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Avg Battery</h4>\n            <span className=\"text-3xl font-bold text-purple-400\">{fleetStats.avgBattery}%</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-flight-hours\">\n            <Clock className=\"h-10 w-10 text-orange-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Total Flight Hours</h4>\n            <span className=\"text-3xl font-bold text-orange-400\">{Math.round(fleetStats.totalFlightHours)}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Filter and Search Controls */}\n      <Card>\n        <CardHeader className=\"card-header\">\n          <CardTitle className=\"card-title\">Fleet Management</CardTitle>\n          <CardDescription className=\"card-description\">Monitor and manage your drone fleet inventory</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search drones by name, model, or serial...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-drones\"\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"sm:w-48\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-status-filter\" className=\"select-trigger-solid\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent className=\"select-content-solid\">\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"available\">Available</SelectItem>\n                  <SelectItem value=\"in-mission\">In Mission</SelectItem>\n                  <SelectItem value=\"charging\">Charging</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"offline\">Offline</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Drone Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredDrones.length === 0 ? (\n              <div className=\"col-span-full text-center py-8\">\n                <Plane className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm || statusFilter !== 'all' ? 'No drones match your filters' : 'No drones found'}\n                </p>\n              </div>\n            ) : (\n              filteredDrones.map((drone) => {\n                const activeMission = getDroneActiveMission(drone.id);\n                return (\n                  <Card \n                    key={drone.id} \n                    className=\"relative overflow-hidden\"\n                    data-testid={`drone-card-${drone.id}`}\n                  >\n                    <div className={`absolute top-0 left-0 w-full h-1 ${getStatusColor(drone.status)}`} />\n                    \n                    <CardHeader className=\"pb-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg\">{drone.name}</CardTitle>\n                          <CardDescription>{drone.model}</CardDescription>\n                        </div>\n                        <Badge \n                          className={`capitalize ${getStatusBadgeColor(drone.status)} px-3 py-1 rounded-full text-xs font-medium ml-4 flex-shrink-0`}\n                          data-testid={`badge-status-${drone.id}`}\n                        >\n                          {drone.status.replace('-', ' ')}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n\n                    <CardContent className=\"space-y-4\">\n                      {/* Battery Level */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"flex items-center\">\n                            <Battery className=\"h-4 w-4 mr-1\" />\n                            Battery Level\n                          </span>\n                          <span className={`font-semibold ${getBatteryColor(drone.batteryLevel)}`}>\n                            {drone.batteryLevel}%\n                          </span>\n                        </div>\n                        <Progress \n                          value={drone.batteryLevel} \n                          className=\"h-2\"\n                          data-testid={`battery-progress-${drone.id}`}\n                        />\n                      </div>\n\n                      {/* Location */}\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        <span>\n                          {drone.location.lat.toFixed(4)}, {drone.location.lng.toFixed(4)}\n                        </span>\n                      </div>\n\n                      {/* Flight Stats */}\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Flight Hours</span>\n                          <p className=\"font-semibold\">{drone.flightHours.toFixed(1)}h</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Max Flight Time</span>\n                          <p className=\"font-semibold\">{drone.maxFlightTime}min</p>\n                        </div>\n                      </div>\n\n                      {/* Sensors */}\n                      <div className=\"space-y-2\">\n                        <span className=\"text-sm text-muted-foreground\">Sensors</span>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {drone.sensors.slice(0, 3).map((sensor, index) => (\n                            <Badge \n                              key={index} \n                              variant=\"outline\" \n                              className=\"text-xs px-2 py-0\"\n                            >\n                              {sensor}\n                            </Badge>\n                          ))}\n                          {drone.sensors.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                              +{drone.sensors.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Active Mission */}\n                      {activeMission && (\n                        <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                          <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                            Active Mission\n                          </p>\n                          <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                            {activeMission.name}\n                          </p>\n                          <div className=\"mt-2\">\n                            <div className=\"flex items-center justify-between text-xs text-blue-600 dark:text-blue-400 mb-1\">\n                              <span>Progress</span>\n                              <span>{activeMission.progress}%</span>\n                            </div>\n                            <Progress value={activeMission.progress} className=\"h-1\" />\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Last Maintenance */}\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"flex items-center text-muted-foreground\">\n                          <Wrench className=\"h-4 w-4 mr-1\" />\n                          Last Maintenance\n                        </span>\n                        <span className=\"font-medium\">\n                          {new Date(drone.lastMaintenance).toLocaleDateString()}\n                        </span>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-2 pt-2\">\n                        {drone.status === 'available' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateDroneMutation.mutate({ \n                              droneId: drone.id, \n                              status: 'maintenance' \n                            })}\n                            data-testid={`button-maintenance-${drone.id}`}\n                            disabled={updateDroneMutation.isPending}\n                          >\n                            <Wrench className=\"h-3 w-3 mr-1\" />\n                            Maintenance\n                          </Button>\n                        )}\n                        \n                        {drone.status === 'maintenance' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateDroneMutation.mutate({ \n                              droneId: drone.id, \n                              status: 'available' \n                            })}\n                            data-testid={`button-available-${drone.id}`}\n                            disabled={updateDroneMutation.isPending}\n                          >\n                            <Activity className=\"h-3 w-3 mr-1\" />\n                            Set Available\n                          </Button>\n                        )}\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          data-testid={`button-details-${drone.id}`}\n                        >\n                          <Settings className=\"h-3 w-3 mr-1\" />\n                          Details\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18103},"client/src/pages/LiveMonitoring.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Play, \n  Pause, \n  Square, \n  MapPin, \n  Clock, \n  Route,\n  Activity,\n  Zap,\n  AlertTriangle,\n  RefreshCw,\n  Radio,\n  Target,\n  Camera\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/frontendQueryClient';\nimport type { Drone, Mission } from '@shared/schema';\n\nexport default function LiveMonitoring() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMission, setSelectedMission] = useState<string>('');\n  const [mapView, setMapView] = useState<'overview' | 'detailed'>('overview');\n\n  const { data: missions = [], isLoading: missionsLoading } = useQuery<Mission[]>({\n    queryKey: ['/api/missions'],\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time monitoring\n  });\n\n  const { data: drones = [], isLoading: dronesLoading } = useQuery<Drone[]>({\n    queryKey: ['/api/drones'],\n    refetchInterval: 5000,\n  });\n\n  const missionControlMutation = useMutation({\n    mutationFn: async ({ missionId, action }: { missionId: string; action: 'pause' | 'resume' | 'abort' }) => {\n      let newStatus: string;\n      switch (action) {\n        case 'pause':\n          newStatus = 'paused';\n          break;\n        case 'resume':\n          newStatus = 'in-progress';\n          break;\n        case 'abort':\n          newStatus = 'aborted';\n          break;\n        default:\n          throw new Error('Invalid action');\n      }\n\n      return apiRequest(`/api/missions/${missionId}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status: newStatus }),\n      });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/missions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/drones'] });\n      \n      let actionText = '';\n      switch (variables.action) {\n        case 'pause':\n          actionText = 'paused';\n          break;\n        case 'resume':\n          actionText = 'resumed';\n          break;\n        case 'abort':\n          actionText = 'aborted';\n          break;\n      }\n      \n      toast({\n        title: 'Mission Control',\n        description: `Mission has been ${actionText} successfully.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to control mission. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const activeMissions = missions.filter(m => m.status === 'in-progress');\n  const pausedMissions = missions.filter(m => m.status === 'paused');\n  const completedMissions = missions.filter(m => m.status === 'completed');\n  const completedToday = missions.filter(m => \n    m.status === 'completed' && \n    m.completedAt && \n    new Date(m.completedAt).toDateString() === new Date().toDateString()\n  );\n\n  // Get mission details for selected mission\n  const currentMission = selectedMission \n    ? missions.find(m => m.id === selectedMission)\n    : activeMissions[0];\n\n  const assignedDrone = currentMission?.droneId \n    ? drones.find(d => d.id === currentMission.droneId)\n    : null;\n\n  // Calculate estimated completion time\n  const getEstimatedCompletion = (mission: Mission) => {\n    if (!mission.startedAt || mission.status !== 'in-progress') return null;\n    \n    const startTime = new Date(mission.startedAt).getTime();\n    const now = Date.now();\n    const elapsedMinutes = (now - startTime) / (1000 * 60);\n    \n    if (mission.progress > 0) {\n      const totalEstimatedMinutes = (elapsedMinutes / mission.progress) * 100;\n      const remainingMinutes = Math.max(0, totalEstimatedMinutes - elapsedMinutes);\n      return Math.round(remainingMinutes);\n    }\n    \n    return mission.estimatedDuration - elapsedMinutes;\n  };\n\n  // Get mission status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'in-progress': return 'bg-blue-500';\n      case 'paused': return 'bg-yellow-500';\n      case 'completed': return 'bg-green-500';\n      case 'aborted': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'emergency': return 'text-red-600 border-red-200 bg-red-50';\n      case 'high': return 'text-orange-600 border-orange-200 bg-orange-50';\n      case 'medium': return 'text-blue-600 border-blue-200 bg-blue-50';\n      case 'low': return 'text-green-600 border-green-200 bg-green-50';\n      default: return 'text-gray-600 border-gray-200 bg-gray-50';\n    }\n  };\n\n  if (missionsLoading || dronesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n        Loading mission data...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Live Mission Monitoring</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Real-time flight path visualization and mission control\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm text-muted-foreground\">Live Data</span>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-monitoring\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Mission Overview Stats */}\n      <div>\n        <h3 className=\"text-xl font-semibold text-high-contrast mb-6\">Mission Status Overview</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n        <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-active-missions\">\n          <Activity className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Active Missions</h4>\n          <span className=\"text-3xl font-bold text-high-contrast\">{activeMissions.length}</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-paused-missions\">\n          <Pause className=\"h-10 w-10 text-yellow-400 mx-auto mb-3\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Paused</h4>\n          <span className=\"text-3xl font-bold text-high-contrast\">{pausedMissions.length}</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-completed-today\">\n          <Target className=\"h-10 w-10 text-green-400 mx-auto mb-3\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Completed Today</h4>\n          <span className=\"text-3xl font-bold text-high-contrast\">{completedToday.length}</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-drones-active\">\n          <Radio className=\"h-10 w-10 text-purple-400 mx-auto mb-3\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Drones Active</h4>\n          <span className=\"text-3xl font-bold text-high-contrast\">{drones.filter(d => d.status === 'in-mission').length}</span>\n        </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\" style={{ marginTop: '60px' }}>\n        {/* Mission Control Panel */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Mission Selection */}\n          <Card className=\"bg-gradient-to-br from-white to-blue-50 dark:from-gray-900 dark:to-blue-950/20 border-2 border-blue-200 dark:border-blue-800 shadow-xl hover:shadow-2xl transition-all duration-300\">\n            <CardHeader className=\"card-header bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-b border-blue-200 dark:border-blue-800\">\n              <CardTitle className=\"card-title bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">Mission Control Center</CardTitle>\n              <CardDescription className=\"card-description\">Monitor and control active drone survey missions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex-1\">\n                    <Select \n                      value={selectedMission} \n                      onValueChange={setSelectedMission}\n                    >\n                      <SelectTrigger data-testid=\"select-mission\" className=\"select-trigger-solid\">\n                        <SelectValue placeholder=\"Select mission to monitor\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        {[...activeMissions, ...pausedMissions].map((mission) => (\n                          <SelectItem key={mission.id} value={mission.id}>\n                            {mission.name} - {mission.status}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <Select value={mapView} onValueChange={(value: any) => setMapView(value)}>\n                    <SelectTrigger className=\"w-32 select-trigger-solid\" data-testid=\"select-map-view\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"select-content-solid\">\n                      <SelectItem value=\"overview\">Overview</SelectItem>\n                      <SelectItem value=\"detailed\">Detailed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Current Mission Details */}\n                {currentMission ? (\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold\">{currentMission.name}</h3>\n                        <p className=\"text-muted-foreground\">\n                          {currentMission.type.replace('-', ' ')} • {currentMission.area.name}\n                        </p>\n                      </div>\n                      <Badge \n                        className={`${getPriorityColor(currentMission.priority)} capitalize`}\n                        data-testid=\"badge-mission-priority\"\n                      >\n                        {currentMission.priority} Priority\n                      </Badge>\n                    </div>\n\n                    {/* Mission Progress */}\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">Mission Progress</span>\n                        <div className=\"flex items-center gap-4 text-sm\">\n                          <span>{currentMission.progress}% Complete</span>\n                          {currentMission.status === 'in-progress' && (\n                            <span className=\"text-muted-foreground\">\n                              ~{getEstimatedCompletion(currentMission)} min remaining\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <Progress \n                        value={currentMission.progress} \n                        className=\"h-3\"\n                        data-testid=\"progress-mission\"\n                      />\n                      <div className={`absolute top-0 left-0 w-full h-1 ${getStatusColor(currentMission.status)}`} />\n                    </div>\n\n                    {/* Drone Information */}\n                    {assignedDrone && (\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Assigned Drone</p>\n                          <p className=\"font-semibold\">{assignedDrone.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">{assignedDrone.model}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Battery Level</p>\n                          <div className=\"flex items-center gap-2\">\n                            <Zap className=\"h-4 w-4\" />\n                            <span className=\"font-semibold\">{assignedDrone.batteryLevel}%</span>\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Current Location</p>\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            <span className=\"text-xs font-mono\">\n                              {assignedDrone.location.lat.toFixed(4)}, {assignedDrone.location.lng.toFixed(4)}\n                            </span>\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Flight Time</p>\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span className=\"font-semibold\">\n                              {currentMission.startedAt \n                                ? Math.round((Date.now() - new Date(currentMission.startedAt).getTime()) / (1000 * 60))\n                                : 0\n                              }min\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Flight Path Visualization */}\n                    <div className=\"p-6 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-lg border\">\n                      <h4 className=\"font-semibold mb-4 flex items-center gap-2\">\n                        <Route className=\"h-5 w-5\" />\n                        Flight Path Visualization\n                      </h4>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Pattern</span>\n                            <p className=\"font-semibold capitalize\">{currentMission.pattern}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Altitude</span>\n                            <p className=\"font-semibold\">{currentMission.parameters.altitude}m</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Speed</span>\n                            <p className=\"font-semibold\">{currentMission.parameters.speed} m/s</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Waypoints</span>\n                            <p className=\"font-semibold\">{currentMission.flightPath.length}</p>\n                          </div>\n                        </div>\n\n                        {/* Simulated Map View */}\n                        <div className=\"h-64 bg-white dark:bg-gray-900 rounded border-2 border-dashed border-gray-300 flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            <MapPin className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                            <p className=\"text-muted-foreground\">\n                              Interactive map showing real-time flight path\n                            </p>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {mapView === 'detailed' ? 'Detailed view' : 'Overview'} • {currentMission.flightPath.length} waypoints\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Mission Control Buttons */}\n                    <div className=\"flex gap-3\">\n                      {currentMission.status === 'in-progress' && (\n                        <>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => missionControlMutation.mutate({ \n                              missionId: currentMission.id, \n                              action: 'pause' \n                            })}\n                            disabled={missionControlMutation.isPending}\n                            data-testid=\"button-pause-mission\"\n                          >\n                            <Pause className=\"h-4 w-4 mr-2\" />\n                            Pause Mission\n                          </Button>\n                          \n                          <Button\n                            variant=\"destructive\"\n                            onClick={() => missionControlMutation.mutate({ \n                              missionId: currentMission.id, \n                              action: 'abort' \n                            })}\n                            disabled={missionControlMutation.isPending}\n                            data-testid=\"button-abort-mission\"\n                          >\n                            <Square className=\"h-4 w-4 mr-2\" />\n                            Abort Mission\n                          </Button>\n                        </>\n                      )}\n\n                      {currentMission.status === 'paused' && (\n                        <>\n                          <Button\n                            onClick={() => missionControlMutation.mutate({ \n                              missionId: currentMission.id, \n                              action: 'resume' \n                            })}\n                            disabled={missionControlMutation.isPending}\n                            data-testid=\"button-resume-mission\"\n                          >\n                            <Play className=\"h-4 w-4 mr-2\" />\n                            Resume Mission\n                          </Button>\n                          \n                          <Button\n                            variant=\"destructive\"\n                            onClick={() => missionControlMutation.mutate({ \n                              missionId: currentMission.id, \n                              action: 'abort' \n                            })}\n                            disabled={missionControlMutation.isPending}\n                            data-testid=\"button-abort-paused-mission\"\n                          >\n                            <Square className=\"h-4 w-4 mr-2\" />\n                            Abort Mission\n                          </Button>\n                        </>\n                      )}\n                    </div>\n\n                    {/* Mission Statistics */}\n                    {currentMission.stats && (\n                      <div className=\"grid grid-cols-3 gap-4 p-4 bg-muted/30 rounded-lg\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-blue-600\">{currentMission.stats.distanceCovered}</p>\n                          <p className=\"text-sm text-muted-foreground\">km covered</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-green-600\">{currentMission.stats.areasCovered}</p>\n                          <p className=\"text-sm text-muted-foreground\">km² surveyed</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-purple-600\">{currentMission.stats.dataPointsCollected}</p>\n                          <p className=\"text-sm text-muted-foreground\">data points</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      No active missions to monitor\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Create a new mission to start monitoring drone operations\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Mission Queue & Alerts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"mission-queue-card\" className=\"bg-gradient-to-br from-white to-purple-50 dark:from-gray-900 dark:to-purple-950/20 border-2 border-purple-200 dark:border-purple-800 shadow-xl hover:shadow-2xl transition-all duration-300\">\n            <CardHeader className=\"card-header bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 border-b border-purple-200 dark:border-purple-800\">\n              <CardTitle className=\"card-title flex items-center gap-2 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                <Activity className=\"h-5 w-5 text-purple-500\" />\n                Mission Queue\n              </CardTitle>\n              <CardDescription className=\"card-description\">Active and pending missions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[...activeMissions, ...pausedMissions, ...completedMissions.slice(0, 2)].length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No missions</p>\n                ) : (\n                  [...activeMissions, ...pausedMissions, ...completedMissions.slice(0, 2)].map((mission) => (\n                    <div \n                      key={mission.id} \n                      className=\"p-3 border rounded-lg space-y-2 cursor-pointer hover:bg-muted/50\"\n                      onClick={() => setSelectedMission(mission.id)}\n                      data-testid={`mission-queue-item-${mission.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium text-sm\">{mission.name}</h4>\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-2 h-2 rounded-full ${getStatusColor(mission.status)}`} />\n                          <Badge \n                            className={`text-xs text-white ${\n                              mission.status === 'in-progress' ? 'bg-blue-500 hover:bg-blue-600' :\n                              mission.status === 'completed' ? 'bg-green-500 hover:bg-green-600' :\n                              mission.status === 'paused' ? 'bg-yellow-500 hover:bg-yellow-600' :\n                              'bg-gray-500 hover:bg-gray-600'\n                            }`}\n                          >\n                            {mission.status}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {mission.type.replace('-', ' ')} • {mission.estimatedDuration}min • {mission.priority} priority\n                      </p>\n                      {mission.progress > 0 && (\n                        <Progress value={mission.progress} className=\"h-1.5\" />\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Alerts */}\n          <Card data-testid=\"system-alerts-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                System Alerts\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {/* Low battery alerts */}\n                {drones.filter(d => d.batteryLevel < 25 && d.status === 'in-mission').map(drone => (\n                  <div key={`battery-${drone.id}`} className=\"p-3 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"h-4 w-4 text-yellow-600\" />\n                      <span className=\"text-sm font-medium\">Low Battery Warning</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {drone.name} battery at {drone.batteryLevel}%\n                    </p>\n                  </div>\n                ))}\n\n                {/* High priority missions */}\n                {missions.filter(m => m.priority === 'emergency' && m.status === 'planned').map(mission => (\n                  <div key={`priority-${mission.id}`} className=\"p-3 bg-red-50 dark:bg-red-950/20 border border-red-200 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                      <span className=\"text-sm font-medium\">Emergency Mission</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {mission.name} requires immediate attention\n                    </p>\n                  </div>\n                ))}\n\n                {drones.filter(d => d.batteryLevel < 25 && d.status === 'in-mission').length === 0 &&\n                 missions.filter(m => m.priority === 'emergency' && m.status === 'planned').length === 0 && (\n                  <p className=\"text-sm text-muted-foreground\">No active alerts</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data Collection Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Camera className=\"h-5 w-5\" />\n                Data Collection\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {currentMission && currentMission.parameters.sensors.map((sensor, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">{sensor}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-xs text-muted-foreground\">Active</span>\n                    </div>\n                  </div>\n                ))}\n                {!currentMission && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select a mission to view sensor status\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28100},"client/src/pages/MissionPlanning.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { MapPin, Plane, Settings, Calendar, AlertCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/frontendQueryClient';\nimport type { Drone, Mission, InsertMission } from '@shared/schema';\n\n// Mission planning form schema\nconst missionPlanningSchema = z.object({\n  name: z.string().min(1, 'Mission name is required'),\n  type: z.enum(['facility-inspection', 'security-patrol', 'site-mapping', 'perimeter-survey']),\n  priority: z.enum(['low', 'medium', 'high', 'emergency']).default('medium'),\n  droneId: z.string().optional(),\n  areaName: z.string().min(1, 'Area name is required'),\n  areaDescription: z.string().optional(),\n  pattern: z.enum(['crosshatch', 'perimeter', 'grid', 'spiral', 'custom']),\n  altitude: z.number().min(10).max(400),\n  speed: z.number().min(1).max(15),\n  overlapPercentage: z.number().min(0).max(100),\n  captureFrequency: z.number().min(0.1).max(10),\n  sensors: z.array(z.string()).min(1, 'At least one sensor must be selected'),\n  estimatedDuration: z.number().min(5),\n  scheduledAt: z.string().optional(),\n});\n\ntype MissionPlanningFormData = z.infer<typeof missionPlanningSchema>;\n\nexport default function MissionPlanning() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedArea, setSelectedArea] = useState<{lat: number, lng: number}[]>([]);\n  const [flightPath, setFlightPath] = useState<{lat: number, lng: number, altitude: number}[]>([]);\n\n  const { data: drones = [], isLoading: dronesLoading } = useQuery<Drone[]>({\n    queryKey: ['/api/drones'],\n  });\n\n  const { data: missions = [], isLoading: missionsLoading } = useQuery<Mission[]>({\n    queryKey: ['/api/missions'],\n  });\n\n  const form = useForm<MissionPlanningFormData>({\n    resolver: zodResolver(missionPlanningSchema),\n    defaultValues: {\n      name: '',\n      type: 'facility-inspection',\n      priority: 'medium',\n      areaName: '',\n      areaDescription: '',\n      pattern: 'crosshatch',\n      altitude: 75,\n      speed: 8,\n      overlapPercentage: 70,\n      captureFrequency: 2,\n      sensors: [],\n      estimatedDuration: 30,\n      scheduledAt: '',\n    },\n  });\n\n  const createMissionMutation = useMutation({\n    mutationFn: async (data: MissionPlanningFormData) => {\n      // Generate flight path based on pattern and area\n      const generatedFlightPath = generateFlightPath(selectedArea, data.pattern, data.altitude);\n      \n      const missionData: InsertMission = {\n        name: data.name,\n        type: data.type,\n        priority: data.priority,\n        droneId: data.droneId || null,\n        area: {\n          name: data.areaName,\n          bounds: selectedArea,\n        },\n        flightPath: generatedFlightPath,\n        pattern: data.pattern,\n        parameters: {\n          altitude: data.altitude,\n          speed: data.speed,\n          overlapPercentage: data.overlapPercentage,\n          captureFrequency: data.captureFrequency,\n          sensors: data.sensors,\n        },\n        estimatedDuration: data.estimatedDuration,\n        scheduledAt: data.scheduledAt ? new Date(data.scheduledAt) : null,\n      };\n\n      return apiRequest('/api/missions', {\n        method: 'POST',\n        body: JSON.stringify(missionData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/missions'] });\n      toast({\n        title: 'Mission Created',\n        description: 'Survey mission has been successfully planned and saved.',\n      });\n      form.reset();\n      setSelectedArea([]);\n      setFlightPath([]);\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create mission. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const availableDrones = drones.filter(drone => drone.status === 'available');\n  const availableSensors = [\n    'RGB Camera', 'Thermal Imaging', 'LiDAR', 'Multispectral', \n    'Night Vision', '360° Camera', '3D Mapping', 'Obstacle Avoidance'\n  ];\n\n  // Generate flight path based on pattern\n  function generateFlightPath(bounds: {lat: number, lng: number}[], pattern: string, altitude: number) {\n    if (bounds.length < 3) return [];\n    \n    switch (pattern) {\n      case 'perimeter':\n        return bounds.map(point => ({ ...point, altitude }));\n      case 'crosshatch':\n        return generateCrosshatchPath(bounds, altitude);\n      case 'grid':\n        return generateGridPath(bounds, altitude);\n      case 'spiral':\n        return generateSpiralPath(bounds, altitude);\n      default:\n        return bounds.map(point => ({ ...point, altitude }));\n    }\n  }\n\n  function generateCrosshatchPath(bounds: {lat: number, lng: number}[], altitude: number) {\n    // Simplified crosshatch pattern generation\n    const path = [];\n    const steps = 5;\n    const latStep = (Math.max(...bounds.map(b => b.lat)) - Math.min(...bounds.map(b => b.lat))) / steps;\n    const lngStep = (Math.max(...bounds.map(b => b.lng)) - Math.min(...bounds.map(b => b.lng))) / steps;\n    \n    for (let i = 0; i <= steps; i++) {\n      const lat = Math.min(...bounds.map(b => b.lat)) + (latStep * i);\n      path.push(\n        { lat, lng: Math.min(...bounds.map(b => b.lng)), altitude },\n        { lat, lng: Math.max(...bounds.map(b => b.lng)), altitude }\n      );\n    }\n    return path;\n  }\n\n  function generateGridPath(bounds: {lat: number, lng: number}[], altitude: number) {\n    // Simplified grid pattern\n    return bounds.map(point => ({ ...point, altitude }));\n  }\n\n  function generateSpiralPath(bounds: {lat: number, lng: number}[], altitude: number) {\n    // Simplified spiral pattern  \n    return bounds.map(point => ({ ...point, altitude }));\n  }\n\n  function handleAreaClick() {\n    // Simulate area selection - in real implementation, this would be a map interface\n    const demoArea = [\n      { lat: 37.7749, lng: -122.4194 },\n      { lat: 37.7759, lng: -122.4184 },\n      { lat: 37.7769, lng: -122.4204 },\n      { lat: 37.7759, lng: -122.4214 }\n    ];\n    setSelectedArea(demoArea);\n    const pattern = form.getValues('pattern');\n    const altitude = form.getValues('altitude');\n    setFlightPath(generateFlightPath(demoArea, pattern, altitude));\n  }\n\n  if (dronesLoading || missionsLoading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Mission Planning & Configuration</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Plan autonomous drone surveys with precision flight paths and data collection parameters\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"px-3 py-1\">\n          {availableDrones.length} drones available\n        </Badge>\n      </div>\n\n      {/* Planning Overview Stats */}\n      <div>\n        <h3 className=\"text-xl font-semibold text-high-contrast mb-6\">Planning Overview</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-total-missions\">\n            <Calendar className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Total Missions</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{missions.length}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-pending-missions\">\n            <AlertCircle className=\"h-10 w-10 text-orange-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Pending</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{missions.filter(m => m.status === 'planned').length}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-available-drones\">\n            <Plane className=\"h-10 w-10 text-green-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Available Drones</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{availableDrones.length}</span>\n          </div>\n\n          <div className=\"card-premium rounded-xl p-6 text-center\" data-testid=\"stat-sensors-available\">\n            <Settings className=\"h-10 w-10 text-purple-400 mx-auto mb-3\" />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Sensor Types</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{availableSensors.length}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\" style={{ marginTop: '60px' }}>\n        {/* Mission Configuration Form */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card data-testid=\"mission-config-card\" className=\"bg-gradient-to-br from-white to-blue-50 dark:from-gray-900 dark:to-blue-950/20 border-2 border-blue-200 dark:border-blue-800 shadow-xl hover:shadow-2xl transition-all duration-300\">\n            <CardHeader className=\"card-header bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-b border-blue-200 dark:border-blue-800\">\n              <CardTitle className=\"card-title flex items-center gap-2 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                <Settings className=\"h-5 w-5 text-blue-500\" />\n                Mission Configuration\n              </CardTitle>\n              <CardDescription className=\"card-description\">Define survey parameters and flight specifications</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(data => createMissionMutation.mutate(data))} className=\"space-y-6\">\n                {/* Basic Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Mission Name</Label>\n                    <Input\n                      id=\"name\"\n                      data-testid=\"input-mission-name\"\n                      {...form.register('name')}\n                      placeholder=\"e.g. Weekly Facility Inspection\"\n                    />\n                    {form.formState.errors.name && (\n                      <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.name.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"type\">Mission Type</Label>\n                    <Select\n                      value={form.watch('type')}\n                      onValueChange={(value) => form.setValue('type', value as any)}\n                    >\n                      <SelectTrigger data-testid=\"select-mission-type\" className=\"select-trigger-solid\">\n                        <SelectValue placeholder=\"Select mission type\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        <SelectItem value=\"facility-inspection\">Facility Inspection</SelectItem>\n                        <SelectItem value=\"security-patrol\">Security Patrol</SelectItem>\n                        <SelectItem value=\"site-mapping\">Site Mapping</SelectItem>\n                        <SelectItem value=\"perimeter-survey\">Perimeter Survey</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Priority and Drone Assignment */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"priority\">Priority Level</Label>\n                    <Select\n                      value={form.watch('priority')}\n                      onValueChange={(value) => form.setValue('priority', value as any)}\n                    >\n                      <SelectTrigger data-testid=\"select-priority\" className=\"select-trigger-solid\">\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        <SelectItem value=\"low\">Low Priority</SelectItem>\n                        <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                        <SelectItem value=\"high\">High Priority</SelectItem>\n                        <SelectItem value=\"emergency\">Emergency</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"droneId\">Assign Drone (Optional)</Label>\n                    <Select\n                      value={form.watch('droneId') || ''}\n                      onValueChange={(value) => form.setValue('droneId', value || undefined)}\n                    >\n                      <SelectTrigger data-testid=\"select-drone\" className=\"select-trigger-solid\">\n                        <SelectValue placeholder=\"Auto-assign or select drone\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"select-content-solid\">\n                        <SelectItem value=\"auto\">Auto-assign best available</SelectItem>\n                        {availableDrones.map((drone) => (\n                          <SelectItem key={drone.id} value={drone.id}>\n                            {drone.name} - {drone.batteryLevel}% battery\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Survey Area Definition */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-5 w-5\" />\n                    <Label className=\"text-base font-semibold\">Survey Area Definition</Label>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"areaName\">Area Name</Label>\n                      <Input\n                        id=\"areaName\"\n                        data-testid=\"input-area-name\"\n                        {...form.register('areaName')}\n                        placeholder=\"e.g. North Wing Building Complex\"\n                      />\n                      {form.formState.errors.areaName && (\n                        <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.areaName.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"pattern\">Flight Pattern</Label>\n                      <Select\n                        value={form.watch('pattern')}\n                        onValueChange={(value) => {\n                          form.setValue('pattern', value as any);\n                          if (selectedArea.length > 0) {\n                            setFlightPath(generateFlightPath(selectedArea, value, form.getValues('altitude')));\n                          }\n                        }}\n                      >\n                        <SelectTrigger data-testid=\"select-pattern\" className=\"select-trigger-solid\">\n                          <SelectValue placeholder=\"Select flight pattern\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"select-content-solid\">\n                          <SelectItem value=\"crosshatch\">Crosshatch (Optimal Coverage)</SelectItem>\n                          <SelectItem value=\"perimeter\">Perimeter (Border Inspection)</SelectItem>\n                          <SelectItem value=\"grid\">Grid (Systematic Survey)</SelectItem>\n                          <SelectItem value=\"spiral\">Spiral (Efficient Path)</SelectItem>\n                          <SelectItem value=\"custom\">Custom Path</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"areaDescription\">Area Description (Optional)</Label>\n                    <Textarea\n                      id=\"areaDescription\"\n                      data-testid=\"textarea-area-description\"\n                      {...form.register('areaDescription')}\n                      placeholder=\"Additional details about the survey area...\"\n                      className=\"resize-none h-20\"\n                    />\n                  </div>\n\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={handleAreaClick}\n                    data-testid=\"button-select-area\"\n                    className=\"w-full\"\n                  >\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    {selectedArea.length > 0 ? 'Area Selected - Click to Redefine' : 'Click to Define Survey Area'}\n                  </Button>\n\n                  {selectedArea.length > 0 && (\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Survey area defined with {selectedArea.length} boundary points. \n                        Flight path generated with {flightPath.length} waypoints.\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                <Separator />\n\n                {/* Flight Parameters */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Plane className=\"h-5 w-5\" />\n                    <Label className=\"text-base font-semibold\">Flight Parameters</Label>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <Label htmlFor=\"altitude\">Altitude (m)</Label>\n                      <Input\n                        id=\"altitude\"\n                        type=\"number\"\n                        min=\"10\"\n                        max=\"400\"\n                        data-testid=\"input-altitude\"\n                        {...form.register('altitude', { valueAsNumber: true })}\n                      />\n                      {form.formState.errors.altitude && (\n                        <p className=\"text-xs text-destructive mt-1\">{form.formState.errors.altitude.message}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"speed\">Speed (m/s)</Label>\n                      <Input\n                        id=\"speed\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"15\"\n                        step=\"0.1\"\n                        data-testid=\"input-speed\"\n                        {...form.register('speed', { valueAsNumber: true })}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"overlapPercentage\">Overlap (%)</Label>\n                      <Input\n                        id=\"overlapPercentage\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        data-testid=\"input-overlap\"\n                        {...form.register('overlapPercentage', { valueAsNumber: true })}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"captureFrequency\">Capture (sec)</Label>\n                      <Input\n                        id=\"captureFrequency\"\n                        type=\"number\"\n                        min=\"0.1\"\n                        max=\"10\"\n                        step=\"0.1\"\n                        data-testid=\"input-capture-freq\"\n                        {...form.register('captureFrequency', { valueAsNumber: true })}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Sensor Configuration */}\n                <div className=\"space-y-4\">\n                  <Label className=\"text-base font-semibold\">Sensor Configuration</Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                    {availableSensors.map((sensor) => (\n                      <label key={sensor} className=\"flex items-center space-x-2 cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          data-testid={`checkbox-sensor-${sensor.toLowerCase().replace(/\\s+/g, '-')}`}\n                          value={sensor}\n                          checked={form.watch('sensors')?.includes(sensor) || false}\n                          onChange={(e) => {\n                            const currentSensors = form.getValues('sensors') || [];\n                            if (e.target.checked) {\n                              form.setValue('sensors', [...currentSensors, sensor]);\n                            } else {\n                              form.setValue('sensors', currentSensors.filter(s => s !== sensor));\n                            }\n                          }}\n                          className=\"rounded border-border\"\n                        />\n                        <span className=\"text-sm\">{sensor}</span>\n                      </label>\n                    ))}\n                  </div>\n                  {form.formState.errors.sensors && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.sensors.message}</p>\n                  )}\n                </div>\n\n                <Separator />\n\n                {/* Schedule and Duration */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"estimatedDuration\">Estimated Duration (minutes)</Label>\n                    <Input\n                      id=\"estimatedDuration\"\n                      type=\"number\"\n                      min=\"5\"\n                      data-testid=\"input-duration\"\n                      {...form.register('estimatedDuration', { valueAsNumber: true })}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"scheduledAt\">Schedule Mission (Optional)</Label>\n                    <Input\n                      id=\"scheduledAt\"\n                      type=\"datetime-local\"\n                      data-testid=\"input-scheduled-time\"\n                      {...form.register('scheduledAt')}\n                    />\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createMissionMutation.isPending || selectedArea.length === 0}\n                    data-testid=\"button-create-mission\"\n                    className=\"w-full\"\n                  >\n                    {createMissionMutation.isPending ? 'Creating Mission...' : 'Create Survey Mission'}\n                  </Button>\n                  \n                  {selectedArea.length === 0 && (\n                    <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      Please define a survey area before creating the mission\n                    </p>\n                  )}\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Mission Queue & Status */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"mission-queue-card\" className=\"bg-gradient-to-br from-white to-green-50 dark:from-gray-900 dark:to-green-950/20 border-2 border-green-200 dark:border-green-800 shadow-xl hover:shadow-2xl transition-all duration-300\">\n            <CardHeader className=\"card-header bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 border-b border-green-200 dark:border-green-800\">\n              <CardTitle className=\"card-title flex items-center gap-2 bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                <Calendar className=\"h-5 w-5 text-green-500\" />\n                Mission Queue\n              </CardTitle>\n              <CardDescription className=\"card-description\">Upcoming and active missions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {missions.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No missions planned</p>\n                ) : (\n                  missions.slice(0, 5).map((mission) => (\n                    <div key={mission.id} className=\"p-3 border rounded-lg space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium text-sm\">{mission.name}</h4>\n                        <Badge \n                          className={`text-xs text-white ${\n                            mission.status === 'in-progress' ? 'bg-blue-500 hover:bg-blue-600' :\n                            mission.status === 'completed' ? 'bg-green-500 hover:bg-green-600' :\n                            mission.status === 'paused' ? 'bg-yellow-500 hover:bg-yellow-600' :\n                            mission.status === 'aborted' ? 'bg-red-500 hover:bg-red-600' :\n                            'bg-gray-500 hover:bg-gray-600'\n                          }`}\n                        >\n                          {mission.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {mission.type} • {mission.estimatedDuration}min • {mission.priority} priority\n                      </p>\n                      {mission.progress > 0 && (\n                        <div className=\"w-full bg-muted rounded-full h-1.5\">\n                          <div \n                            className=\"bg-primary h-1.5 rounded-full\" \n                            style={{ width: `${mission.progress}%` }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"card-header\">\n              <CardTitle className=\"card-title\">Available Drones</CardTitle>\n              <CardDescription className=\"card-description\">Fleet status for mission assignment</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {availableDrones.length === 0 ? (\n                  <p className=\"text-sm text-muted-foreground\">No drones available</p>\n                ) : (\n                  availableDrones.map((drone) => (\n                    <div key={drone.id} className=\"flex items-center justify-between p-2 border rounded\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{drone.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{drone.model}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">{drone.batteryLevel}%</p>\n                        <p className=\"text-xs text-muted-foreground\">{drone.maxFlightTime}min max</p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28627},"client/src/pages/ReportingDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  BarChart,\n  Download,\n  TrendingUp,\n  Clock,\n  MapPin,\n  Activity,\n  Calendar,\n  FileText,\n  PieChart,\n  Target,\n  Zap,\n  Users,\n  AlertCircle\n} from 'lucide-react';\nimport type { Drone, Mission, Organization } from '@shared/schema';\n\nexport default function ReportingDashboard() {\n  const [timeRange, setTimeRange] = useState<string>('7d');\n  const [reportType, setReportType] = useState<string>('overview');\n\n  const { data: missions = [], isLoading: missionsLoading } = useQuery<Mission[]>({\n    queryKey: ['/api/missions'],\n  });\n\n  const { data: drones = [], isLoading: dronesLoading } = useQuery<Drone[]>({\n    queryKey: ['/api/drones'],\n  });\n\n  const { data: orgStats, isLoading: orgLoading } = useQuery<Organization>({\n    queryKey: ['/api/organization/stats'],\n  });\n\n  // Filter missions by time range\n  const filterMissionsByTimeRange = (missions: Mission[], range: string) => {\n    const now = new Date();\n    let startDate: Date;\n    \n    switch (range) {\n      case '24h':\n        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case '7d':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case '30d':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      case '90d':\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return missions;\n    }\n\n    return missions.filter(m => \n      m.createdAt && new Date(m.createdAt) >= startDate\n    );\n  };\n\n  const filteredMissions = filterMissionsByTimeRange(missions, timeRange);\n\n  // Calculate analytics\n  const analytics = {\n    totalMissions: filteredMissions.length,\n    completedMissions: filteredMissions.filter(m => m.status === 'completed').length,\n    inProgressMissions: filteredMissions.filter(m => m.status === 'in-progress').length,\n    abortedMissions: filteredMissions.filter(m => m.status === 'aborted').length,\n    totalFlightTime: filteredMissions.reduce((sum, m) => sum + (m.actualDuration || 0), 0),\n    totalDistance: filteredMissions.reduce((sum, m) => \n      sum + (m.stats?.distanceCovered || 0), 0\n    ),\n    totalAreaSurveyed: filteredMissions.reduce((sum, m) => \n      sum + (m.stats?.areasCovered || 0), 0\n    ),\n    totalDataPoints: filteredMissions.reduce((sum, m) => \n      sum + (m.stats?.dataPointsCollected || 0), 0\n    ),\n    averageFlightTime: filteredMissions.length > 0 \n      ? filteredMissions.reduce((sum, m) => sum + (m.actualDuration || 0), 0) / filteredMissions.length\n      : 0,\n    successRate: filteredMissions.length > 0 \n      ? (filteredMissions.filter(m => m.status === 'completed').length / filteredMissions.length) * 100\n      : 0,\n  };\n\n  // Mission type distribution\n  const missionTypeStats = filteredMissions.reduce((acc, mission) => {\n    acc[mission.type] = (acc[mission.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // Priority distribution\n  const priorityStats = filteredMissions.reduce((acc, mission) => {\n    acc[mission.priority] = (acc[mission.priority] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // Drone utilization\n  const droneUtilization = drones.map(drone => {\n    const droneMissions = filteredMissions.filter(m => m.droneId === drone.id);\n    const completedMissions = droneMissions.filter(m => m.status === 'completed');\n    const totalFlightTime = completedMissions.reduce((sum, m) => sum + (m.actualDuration || 0), 0);\n    \n    return {\n      drone,\n      missionsCompleted: completedMissions.length,\n      totalFlightTime,\n      utilizationRate: drone.maxFlightTime > 0 ? (totalFlightTime / drone.maxFlightTime) * 100 : 0,\n    };\n  });\n\n  const generateReport = () => {\n    // In a real implementation, this would generate and download a PDF/CSV report\n    const reportData = {\n      timeRange,\n      reportType,\n      analytics,\n      missions: filteredMissions,\n      drones: droneUtilization,\n      generatedAt: new Date().toISOString(),\n    };\n    \n    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `drone-survey-report-${timeRange}-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (missionsLoading || dronesLoading || orgLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        Loading analytics data...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-2\">📊 Survey Reports & Analytics</h1>\n          <p className=\"text-medium-contrast text-lg\">\n            Comprehensive survey summaries and organizational flight statistics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32 select-trigger-solid\" data-testid=\"select-time-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"select-content-solid\">\n              <SelectItem value=\"24h\">Last 24h</SelectItem>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={generateReport} data-testid=\"button-generate-report\" className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n      {/* Key Performance Indicators */}\n      <div>\n        <h3 className=\"text-xl font-semibold text-high-contrast mb-6\">Performance Overview</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 grid-comfortable\">\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200\" data-testid=\"kpi-total-missions\">\n          <Activity className=\"h-10 w-10 text-purple-500 mx-auto mb-3 animate-pulse\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Total Missions</h4>\n          <span className=\"text-3xl font-bold text-purple-700 animate-pulse\">{analytics.totalMissions}</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-green-50 to-green-100 border border-green-200\" data-testid=\"kpi-completed-missions\">\n          <Target className=\"h-10 w-10 text-green-500 mx-auto mb-3 animate-bounce\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Completed</h4>\n          <span className=\"text-3xl font-bold text-green-600 animate-pulse\">{analytics.completedMissions}</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-emerald-50 to-emerald-100 border border-emerald-200\" data-testid=\"kpi-success-rate\">\n          <TrendingUp className=\"h-10 w-10 text-emerald-500 mx-auto mb-3 animate-pulse\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Success Rate</h4>\n          <span className=\"text-3xl font-bold text-emerald-600 animate-pulse\">{analytics.successRate.toFixed(1)}%</span>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-indigo-50 to-indigo-100 border border-indigo-200\" data-testid=\"kpi-flight-time\">\n          <Clock className=\"h-10 w-10 text-indigo-500 mx-auto mb-3 animate-spin\" style={{ animationDuration: '3s' }} />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Total Flight Time</h4>\n          <span className=\"text-3xl font-bold text-indigo-600 animate-pulse\">{Math.round(analytics.totalFlightTime)}</span>\n          <p className=\"text-xs text-medium-contrast mt-1\">minutes</p>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-orange-50 to-orange-100 border border-orange-200\" data-testid=\"kpi-area-surveyed\">\n          <MapPin className=\"h-10 w-10 text-orange-500 mx-auto mb-3 animate-bounce\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Area Surveyed</h4>\n          <span className=\"text-3xl font-bold text-orange-600 animate-pulse\">{analytics.totalAreaSurveyed.toFixed(1)}</span>\n          <p className=\"text-xs text-medium-contrast mt-1\">km²</p>\n        </div>\n\n        <div className=\"card-premium rounded-xl p-6 text-center transform hover:scale-105 transition-all duration-300 hover:shadow-2xl bg-gradient-to-br from-cyan-50 to-cyan-100 border border-cyan-200\" data-testid=\"kpi-data-points\">\n          <BarChart className=\"h-10 w-10 text-cyan-500 mx-auto mb-3 animate-pulse\" />\n          <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Data Points</h4>\n          <span className=\"text-3xl font-bold text-cyan-600 animate-pulse\">{analytics.totalDataPoints}</span>\n        </div>\n        </div>\n      </div>\n      <div>\n        <h3 className=\"text-xl font-semibold text-high-contrast animate-fade-in bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\" style={{ marginTop: '60px', marginBottom: '20px' }}>✨ Analysis Dashboard</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <button\n            onClick={() => setReportType('overview')}\n            data-testid=\"tab-overview\"\n            className=\"group relative p-6 rounded-xl transition-all duration-500 hover:scale-110 hover:shadow-2xl hover:shadow-purple-500/25 border-2 bg-gradient-to-br from-white to-purple-50 hover:from-purple-100 hover:to-purple-200\"\n            style={{\n              borderColor: reportType === 'overview' ? '#8b5cf6' : '#e5e7eb',\n              background: reportType === 'overview' ? 'linear-gradient(135deg, #faf5ff 0%, #e9d5ff 100%)' : '',\n              boxShadow: reportType === 'overview' ? '0 20px 25px -5px rgba(139, 92, 246, 0.1), 0 10px 10px -5px rgba(139, 92, 246, 0.04)' : '',\n              borderWidth: reportType === 'overview' ? '2px' : '1px',\n              backgroundColor: reportType === 'overview' ? '#faf5ff' : 'white',\n              transform: reportType === 'overview' ? 'scale(1.05)' : 'scale(1)',\n              boxShadow: reportType === 'overview' ? '0 10px 15px -3px rgba(0, 0, 0, 0.1)' : '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n            }}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-3 rounded-lg transition-colors duration-300 ${\n                reportType === 'overview'\n                  ? 'bg-purple-500 text-white'\n                  : 'bg-gray-100 text-gray-600 group-hover:bg-purple-100 group-hover:text-purple-600'\n              }`}>\n                <BarChart className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h4 className={`font-semibold transition-colors duration-300 ${\n                  reportType === 'overview'\n                    ? 'text-purple-700'\n                    : 'text-gray-700 group-hover:text-purple-600'\n                }`}>\n                  Overview\n                </h4>\n                <p className=\"text-xs text-gray-500 group-hover:text-purple-500 transition-colors duration-300\">\n                  Key metrics\n                </p>\n              </div>\n            </div>\n            {reportType === 'overview' && (\n              <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-purple-500 to-blue-500 opacity-20 animate-pulse\"></div>\n            )}\n            <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-transparent via-white/10 to-transparent transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000 ease-in-out\"></div>\n          </button>\n\n          <button\n            onClick={() => setReportType('missions')}\n            data-testid=\"tab-missions\"\n            className=\"group relative p-6 rounded-xl transition-all duration-500 hover:scale-110 hover:shadow-2xl hover:shadow-blue-500/25 border-2 bg-gradient-to-br from-white to-blue-50 hover:from-blue-100 hover:to-blue-200\"\n            style={{\n              borderColor: reportType === 'missions' ? '#3b82f6' : '#e5e7eb',\n              background: reportType === 'missions' ? 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)' : '',\n              boxShadow: reportType === 'missions' ? '0 20px 25px -5px rgba(59, 130, 246, 0.1), 0 10px 10px -5px rgba(59, 130, 246, 0.04)' : '',\n              borderWidth: reportType === 'missions' ? '2px' : '1px',\n              backgroundColor: reportType === 'missions' ? '#eff6ff' : 'white',\n              transform: reportType === 'missions' ? 'scale(1.05)' : 'scale(1)',\n              boxShadow: reportType === 'missions' ? '0 10px 15px -3px rgba(0, 0, 0, 0.1)' : '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n            }}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-3 rounded-lg transition-colors duration-300 ${\n                reportType === 'missions'\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-100 text-gray-600 group-hover:bg-blue-100 group-hover:text-blue-600'\n              }`}>\n                <Target className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h4 className={`font-semibold transition-colors duration-300 ${\n                  reportType === 'missions'\n                    ? 'text-blue-700'\n                    : 'text-gray-700 group-hover:text-blue-600'\n                }`}>\n                  Mission Analysis\n                </h4>\n                <p className=\"text-xs text-gray-500 group-hover:text-blue-500 transition-colors duration-300\">\n                  Performance data\n                </p>\n              </div>\n            </div>\n            {reportType === 'missions' && (\n              <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 opacity-20 animate-pulse\"></div>\n            )}\n            <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-transparent via-white/10 to-transparent transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000 ease-in-out\"></div>\n          </button>\n\n          <button\n            onClick={() => setReportType('fleet')}\n            data-testid=\"tab-fleet\"\n            className=\"group relative p-6 rounded-xl transition-all duration-500 hover:scale-110 hover:shadow-2xl hover:shadow-green-500/25 border-2 bg-gradient-to-br from-white to-green-50 hover:from-green-100 hover:to-green-200\"\n            style={{\n              borderColor: reportType === 'fleet' ? '#10b981' : '#e5e7eb',\n              background: reportType === 'fleet' ? 'linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%)' : '',\n              boxShadow: reportType === 'fleet' ? '0 20px 25px -5px rgba(16, 185, 129, 0.1), 0 10px 10px -5px rgba(16, 185, 129, 0.04)' : '',\n              borderWidth: reportType === 'fleet' ? '2px' : '1px',\n              backgroundColor: reportType === 'fleet' ? '#f0fdf4' : 'white',\n              transform: reportType === 'fleet' ? 'scale(1.05)' : 'scale(1)',\n              boxShadow: reportType === 'fleet' ? '0 10px 15px -3px rgba(0, 0, 0, 0.1)' : '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n            }}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-3 rounded-lg transition-colors duration-300 ${\n                reportType === 'fleet'\n                  ? 'bg-green-500 text-white'\n                  : 'bg-gray-100 text-gray-600 group-hover:bg-green-100 group-hover:text-green-600'\n              }`}>\n                <Users className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h4 className={`font-semibold transition-colors duration-300 ${\n                  reportType === 'fleet'\n                    ? 'text-green-700'\n                    : 'text-gray-700 group-hover:text-green-600'\n                }`}>\n                  Fleet Performance\n                </h4>\n                <p className=\"text-xs text-gray-500 group-hover:text-green-500 transition-colors duration-300\">\n                  Drone utilization\n                </p>\n              </div>\n            </div>\n            {reportType === 'fleet' && (\n              <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-green-500 to-emerald-500 opacity-20 animate-pulse\"></div>\n            )}\n            <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-transparent via-white/10 to-transparent transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000 ease-in-out\"></div>\n          </button>\n\n          <button\n            onClick={() => setReportType('detailed')}\n            data-testid=\"tab-detailed\"\n            className=\"group relative p-6 rounded-xl transition-all duration-500 hover:scale-110 hover:shadow-2xl hover:shadow-orange-500/25 border-2 bg-gradient-to-br from-white to-orange-50 hover:from-orange-100 hover:to-orange-200\"\n            style={{\n              borderColor: reportType === 'detailed' ? '#f97316' : '#e5e7eb',\n              background: reportType === 'detailed' ? 'linear-gradient(135deg, #fff7ed 0%, #fed7aa 100%)' : '',\n              boxShadow: reportType === 'detailed' ? '0 20px 25px -5px rgba(249, 115, 22, 0.1), 0 10px 10px -5px rgba(249, 115, 22, 0.04)' : '',\n              borderWidth: reportType === 'detailed' ? '2px' : '1px',\n              backgroundColor: reportType === 'detailed' ? '#fff7ed' : 'white',\n              transform: reportType === 'detailed' ? 'scale(1.05)' : 'scale(1)',\n              boxShadow: reportType === 'detailed' ? '0 10px 15px -3px rgba(0, 0, 0, 0.1)' : '0 1px 3px 0 rgba(0, 0, 0, 0.1)'\n            }}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div \n                className=\"p-3 rounded-lg transition-colors duration-300\"\n                style={{\n                  backgroundColor: reportType === 'detailed' ? '#ea580c' : '#f3f4f6',\n                  color: reportType === 'detailed' ? 'white' : '#4b5563'\n                }}\n              >\n                <FileText className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h4 className={`font-semibold transition-colors duration-300 ${\n                  reportType === 'detailed'\n                    ? 'text-orange-700'\n                    : 'text-gray-700 group-hover:text-orange-600'\n                }`}>\n                  Detailed Reports\n                </h4>\n                <p className=\"text-xs text-gray-500 group-hover:text-orange-500 transition-colors duration-300\">\n                  Export options\n                </p>\n              </div>\n            </div>\n            {reportType === 'detailed' && (\n              <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-orange-500 to-red-500 opacity-20 animate-pulse\"></div>\n            )}\n            <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-transparent via-white/10 to-transparent transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000 ease-in-out\"></div>\n          </button>\n        </div>\n\n        <div className=\"space-y-8 mt-8\">\n\n        {reportType === 'overview' && (\n          <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Mission Type Distribution */}\n            <Card data-testid=\"chart-mission-types\">\n              <CardHeader className=\"card-header\">\n                <CardTitle className=\"card-title flex items-center gap-2\">\n                  <PieChart className=\"h-5 w-5\" />\n                  Mission Type Distribution\n                </CardTitle>\n                <CardDescription className=\"card-description\">Breakdown of survey missions by type ({timeRange})</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(missionTypeStats).map(([type, count]) => {\n                    const percentage = analytics.totalMissions > 0 ? (count / analytics.totalMissions) * 100 : 0;\n                    return (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                          <span className=\"capitalize\">{type.replace('-', ' ')}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{count}</span>\n                          <span className=\"text-sm text-muted-foreground\">({percentage.toFixed(1)}%)</span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Priority Distribution */}\n            <Card data-testid=\"chart-priority-distribution\">\n              <CardHeader className=\"card-header\">\n                <CardTitle className=\"card-title flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5\" />\n                  Priority Distribution\n                </CardTitle>\n                <CardDescription className=\"card-description\">Mission priorities over selected period</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(priorityStats).map(([priority, count]) => {\n                    const percentage = analytics.totalMissions > 0 ? (count / analytics.totalMissions) * 100 : 0;\n                    const color = priority === 'emergency' ? 'bg-red-500' : \n                                priority === 'high' ? 'bg-orange-500' :\n                                priority === 'medium' ? 'bg-blue-500' : 'bg-green-500';\n                    return (\n                      <div key={priority} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-4 h-4 ${color} rounded`}></div>\n                          <span className=\"capitalize\">{priority}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{count}</span>\n                          <span className=\"text-sm text-muted-foreground\">({percentage.toFixed(1)}%)</span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Mission Summary */}\n          <Card>\n            <CardHeader className=\"card-header\">\n              <CardTitle className=\"card-title flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Recent Mission Summary\n              </CardTitle>\n              <CardDescription className=\"card-description\">Latest completed survey missions and their statistics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredMissions\n                  .filter(m => m.status === 'completed')\n                  .slice(0, 5)\n                  .map((mission) => (\n                    <div key={mission.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`recent-mission-${mission.id}`}>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{mission.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {mission.type.replace('-', ' ')} • {mission.area.name} • \n                          {mission.completedAt && new Date(mission.completedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-6 text-sm\">\n                        <div className=\"text-center\">\n                          <p className=\"font-semibold\">{mission.actualDuration || mission.estimatedDuration}min</p>\n                          <p className=\"text-muted-foreground\">Duration</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-semibold\">{mission.stats?.distanceCovered?.toFixed(1) || 0}km</p>\n                          <p className=\"text-muted-foreground\">Distance</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-semibold\">{mission.stats?.dataPointsCollected || 0}</p>\n                          <p className=\"text-muted-foreground\">Data Points</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                {filteredMissions.filter(m => m.status === 'completed').length === 0 && (\n                  <p className=\"text-muted-foreground text-center py-8\">\n                    No completed missions in selected time range\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          </div>\n        )}\n\n        {reportType === 'missions' && (\n          <div className=\"space-y-6\">\n          <Card>\n            <CardHeader className=\"pt-[0px] pb-[0px]\">\n              <CardTitle>Mission Performance Analysis</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-[2px] pb-[2px]\">\n              <div className=\"space-y-6\">\n                <p className=\"text-muted-foreground -mt-4\">Detailed analysis of mission execution and efficiency</p>\n                {/* Mission Status Overview */}\n                <div className=\"grid grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-blue-600\">{analytics.inProgressMissions}</p>\n                    <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                  </div>\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-green-600\">{analytics.completedMissions}</p>\n                    <p className=\"text-sm text-muted-foreground\">Completed</p>\n                  </div>\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-red-600\">{analytics.abortedMissions}</p>\n                    <p className=\"text-sm text-muted-foreground\">Aborted</p>\n                  </div>\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <p className=\"text-2xl font-bold text-purple-600\">{analytics.averageFlightTime.toFixed(1)}</p>\n                    <p className=\"text-sm text-muted-foreground\">Avg Duration (min)</p>\n                  </div>\n                </div>\n\n                {/* Individual Mission Details */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold\">Mission Details</h4>\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    {filteredMissions.map((mission) => (\n                      <div key={mission.id} className=\"p-4 border rounded-lg space-y-2\" data-testid={`mission-detail-${mission.id}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <h5 className=\"font-medium\">{mission.name}</h5>\n                          <Badge \n                            className={`text-white ${\n                              mission.status === 'in-progress' ? 'bg-blue-500 hover:bg-blue-600' :\n                              mission.status === 'completed' ? 'bg-green-500 hover:bg-green-600' :\n                              mission.status === 'paused' ? 'bg-yellow-500 hover:bg-yellow-600' :\n                              mission.status === 'aborted' ? 'bg-red-500 hover:bg-red-600' :\n                              'bg-gray-500 hover:bg-gray-600'\n                            }`}\n                          >\n                            {mission.status}\n                          </Badge>\n                        </div>\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Type</span>\n                            <p className=\"capitalize\">{mission.type.replace('-', ' ')}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Priority</span>\n                            <p className=\"capitalize\">{mission.priority}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Duration</span>\n                            <p>{mission.actualDuration || mission.estimatedDuration}min</p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Progress</span>\n                            <p>{mission.progress}%</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          </div>\n        )}\n\n        {reportType === 'fleet' && (\n          <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Fleet Performance Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <p className=\"text-muted-foreground -mt-4\">Individual drone utilization and performance metrics</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {droneUtilization.map(({ drone, missionsCompleted, totalFlightTime, utilizationRate }) => (\n                    <div key={drone.id} className=\"p-4 border rounded-lg space-y-3\" data-testid={`drone-performance-${drone.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">{drone.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{drone.model}</p>\n                        </div>\n                        <Badge \n                          className={`\n                            transition-all duration-300 ease-in-out transform hover:scale-105 font-medium\n                            ${drone.status === 'available' \n                              ? 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200' \n                              : drone.status === 'in-mission'\n                              ? 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200'\n                              : drone.status === 'charging'\n                              ? 'bg-yellow-100 text-yellow-800 border-yellow-200 hover:bg-yellow-200'\n                              : 'bg-gray-100 text-gray-800 border-gray-200 hover:bg-gray-200'\n                            }\n                          `}\n                        >\n                          <div className={`\n                            flex items-center gap-1\n                            ${drone.status === 'available' ? 'animate-pulse' : ''}\n                          `}>\n                            <div className={`\n                              w-2 h-2 rounded-full\n                              ${drone.status === 'available' \n                                ? 'bg-green-500' \n                                : drone.status === 'in-mission'\n                                ? 'bg-blue-500 animate-ping'\n                                : drone.status === 'charging'\n                                ? 'bg-yellow-500 animate-bounce'\n                                : 'bg-gray-500'\n                              }\n                            `} />\n                            {drone.status === 'in-mission' ? 'In Mission' : drone.status.charAt(0).toUpperCase() + drone.status.slice(1)}\n                          </div>\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Missions</span>\n                          <p className=\"font-semibold\">{missionsCompleted}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Flight Hours</span>\n                          <p className=\"font-semibold\">{(totalFlightTime / 60).toFixed(1)}h</p>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex items-center justify-between text-sm mb-1\">\n                          <span>Utilization Rate</span>\n                          <span className=\"font-semibold\">{utilizationRate.toFixed(1)}%</span>\n                        </div>\n                        <div className=\"w-full bg-muted rounded-full h-2\">\n                          <div \n                            className=\"bg-primary h-2 rounded-full\" \n                            style={{ width: `${Math.min(utilizationRate, 100)}%` }}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"flex items-center gap-1\">\n                          <Zap className=\"h-3 w-3\" />\n                          Battery\n                        </span>\n                        <span className=\"font-semibold\">{drone.batteryLevel}%</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          </div>\n        )}\n\n        {reportType === 'detailed' && (\n          <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Detailed Survey Reports\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <p className=\"text-muted-foreground -mt-4\">Comprehensive mission reports and data analysis</p>\n                {/* Organization-wide Statistics */}\n                {orgStats && (\n                  <div className=\"p-6 bg-muted/50 rounded-lg\">\n                    <h4 className=\"font-semibold mb-4\">Organization-wide Statistics</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-blue-600\">{orgStats.totalSurveys}</p>\n                        <p className=\"text-sm text-muted-foreground\">Total Surveys</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-green-600\">{orgStats.totalFlightHours.toFixed(1)}</p>\n                        <p className=\"text-sm text-muted-foreground\">Flight Hours</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-purple-600\">{orgStats.activeDrones}</p>\n                        <p className=\"text-sm text-muted-foreground\">Active Drones</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-orange-600\">{orgStats.completedMissions}</p>\n                        <p className=\"text-sm text-muted-foreground\">Completed Missions</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Export Options */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Export Options</h4>\n                  <p className=\"text-sm text-muted-foreground -mt-2\">Generate comprehensive reports for different analysis needs</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Button variant=\"outline\" onClick={generateReport} className=\"h-auto p-8 export-button\" data-testid=\"export-summary\">\n                      <div className=\"flex flex-col items-center space-y-4\">\n                        <FileText className=\"h-20 w-20\" />\n                        <div className=\"text-center space-y-1\">\n                          <div className=\"font-medium\">Summary Report</div>\n                          <div className=\"text-xs text-muted-foreground\">Key metrics and KPIs</div>\n                        </div>\n                      </div>\n                    </Button>\n                    <Button variant=\"outline\" onClick={generateReport} className=\"h-auto p-8 export-button\" data-testid=\"export-detailed\">\n                      <div className=\"flex flex-col items-center space-y-4\">\n                        <BarChart className=\"h-20 w-20\" />\n                        <div className=\"text-center space-y-1\">\n                          <div className=\"font-medium\">Detailed Analytics</div>\n                          <div className=\"text-xs text-muted-foreground\">Full mission data</div>\n                        </div>\n                      </div>\n                    </Button>\n                    <Button variant=\"outline\" onClick={generateReport} className=\"h-auto p-8 export-button\" data-testid=\"export-fleet\">\n                      <div className=\"flex flex-col items-center space-y-4\">\n                        <Users className=\"h-20 w-20\" />\n                        <div className=\"text-center space-y-1\">\n                          <div className=\"font-medium\">Fleet Report</div>\n                          <div className=\"text-xs text-muted-foreground\">Drone performance data</div>\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":39986},"client/src/pages/SettingsPanel.tsx":{"content":"import { Settings, Bell, Shield, Database, Globe } from 'lucide-react';\n\nconst SettingsPanel = () => {\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-high-contrast mb-1\" data-testid=\"text-page-title\">Settings</h2>\n        <p className=\"text-medium-contrast text-lg\">Manage your organization's drone operations preferences</p>\n      </div>\n\n      <div className=\"grid gap-8\">\n        {/* General Settings */}\n        <div className=\"card-premium\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-purple-100\">\n              <Settings className=\"h-6 w-6 text-purple-600\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-high-contrast\">General Settings</h3>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Organization Name\n              </label>\n              <input\n                type=\"text\"\n                defaultValue=\"DroneFlow Operations\"\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all\"\n                data-testid=\"input-org-name\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Default Flight Altitude (m)\n              </label>\n              <input\n                type=\"number\"\n                defaultValue=\"50\"\n                min=\"10\"\n                max=\"120\"\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all\"\n                data-testid=\"input-default-altitude\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Notification Settings */}\n        <div className=\"card-premium\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-green-100\">\n              <Bell className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-high-contrast\">Notifications</h3>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-high-contrast font-medium\">Mission Alerts</div>\n                <div className=\"text-sm text-medium-contrast\">Get notified when missions start, complete, or encounter issues</div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked data-testid=\"toggle-mission-alerts\" />\n                <div className=\"w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n              </label>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-high-contrast font-medium\">Battery Warnings</div>\n                <div className=\"text-sm text-medium-contrast\">Alert when drone batteries are low</div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked data-testid=\"toggle-battery-warnings\" />\n                <div className=\"w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Settings */}\n        <div className=\"card-premium\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-red-100\">\n              <Shield className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-high-contrast\">Security</h3>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-high-contrast font-medium\">Geofencing</div>\n                <div className=\"text-sm text-medium-contrast\">Restrict drone operations to designated areas</div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked data-testid=\"toggle-geofencing\" />\n                <div className=\"w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n              </label>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Emergency Landing Protocol\n              </label>\n              <select\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                data-testid=\"select-emergency-protocol\"\n              >\n                <option value=\"return-to-home\">Return to Home</option>\n                <option value=\"immediate-landing\">Immediate Landing</option>\n                <option value=\"manual-control\">Manual Control</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Data Management */}\n        <div className=\"card-premium\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-blue-100\">\n              <Database className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-high-contrast\">Data Management</h3>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Data Retention Period\n              </label>\n              <select\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent select-trigger-solid\"\n                data-testid=\"select-retention-period\"\n              >\n                <option value=\"30\">30 days</option>\n                <option value=\"90\" selected>90 days</option>\n                <option value=\"365\">1 year</option>\n                <option value=\"forever\">Forever</option>\n              </select>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-high-contrast font-medium\">Automatic Backup</div>\n                <div className=\"text-sm text-medium-contrast\">Automatically backup mission data and settings</div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked data-testid=\"toggle-auto-backup\" />\n                <div className=\"w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Integration Settings */}\n        <div className=\"card-premium\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-orange-100\">\n              <Globe className=\"h-6 w-6 text-orange-600\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-high-contrast\">Integrations</h3>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Weather Service API\n              </label>\n              <input\n                type=\"text\"\n                placeholder=\"Enter API key\"\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all\"\n                data-testid=\"input-weather-api\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-medium-contrast mb-2\">\n                Map Provider\n              </label>\n              <select\n                className=\"w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-high-contrast focus:ring-2 focus:ring-purple-500 focus:border-transparent select-trigger-solid\"\n                data-testid=\"select-map-provider\"\n              >\n                <option value=\"mapbox\">Mapbox</option>\n                <option value=\"google\" selected>Google Maps</option>\n                <option value=\"openstreetmap\">OpenStreetMap</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end\">\n          <button\n            className=\"btn-primary text-white px-8 py-3 rounded-lg transition-colors\"\n            data-testid=\"button-save-settings\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPanel;","size_bytes":10717},"client/src/types/index.ts":{"content":"export interface Drone {\n  id: string;\n  name: string;\n  model: string;\n  serialNumber: string;\n  status: 'available' | 'in-mission' | 'maintenance' | 'charging';\n  batteryLevel: number;\n  location: {\n    lat: number;\n    lng: number;\n  };\n  flightHours: number;\n  lastMaintenance: string;\n  maxFlightTime: number;\n  sensors: string[];\n}\n\nexport interface Mission {\n  id: string;\n  name: string;\n  type: 'inspection' | 'security' | 'mapping';\n  status: 'planned' | 'in-progress' | 'completed' | 'aborted' | 'paused';\n  droneId: string;\n  area: {\n    name: string;\n    bounds: Array<{ lat: number; lng: number }>;\n  };\n  flightPath: Array<{ lat: number; lng: number; altitude: number }>;\n  pattern: 'crosshatch' | 'perimeter' | 'custom';\n  parameters: {\n    altitude: number;\n    speed: number;\n    overlapPercentage: number;\n    captureFrequency: number;\n  };\n  progress: number;\n  estimatedDuration: number;\n  actualDuration?: number;\n  createdAt: string;\n  startedAt?: string;\n  completedAt?: string;\n  stats?: {\n    distanceCovered: number;\n    areasCovered: number;\n    dataPointsCollected: number;\n  };\n}\n\nexport interface Organization {\n  totalSurveys: number;\n  totalFlightHours: number;\n  activeDrones: number;\n  completedMissions: number;\n}","size_bytes":1249},"src/components/dashboard/DroneCard.tsx":{"content":"import React from 'react';\nimport { Drone } from '../../types';\nimport { Battery, MapPin, Clock, Wrench, Activity, AlertTriangle } from 'lucide-react';\n\ninterface DroneCardProps {\n  drone: Drone;\n}\n\nconst DroneCard: React.FC<DroneCardProps> = ({ drone }) => {\n  const getStatusColor = (status: Drone['status']) => {\n    switch (status) {\n      case 'available': return 'text-green-400 bg-green-100';\n      case 'in-mission': return 'text-orange-400 bg-orange-100';\n      case 'maintenance': return 'text-red-400 bg-red-100';\n      case 'charging': return 'text-yellow-400 bg-yellow-100';\n      default: return 'text-gray-400 bg-gray-100';\n    }\n  };\n\n  const getStatusIcon = (status: Drone['status']) => {\n    switch (status) {\n      case 'available': return Activity;\n      case 'in-mission': return MapPin;\n      case 'maintenance': return Wrench;\n      case 'charging': return Battery;\n      default: return AlertTriangle;\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 60) return 'text-green-500';\n    if (level > 30) return 'text-yellow-500';\n    return 'text-red-500';\n  };\n\n  const StatusIcon = getStatusIcon(drone.status);\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 hover:shadow-lg transition-all duration-200 hover:border-blue-500\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-semibold text-white text-lg\">{drone.name}</h3>\n        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(drone.status)}`}>\n          <StatusIcon className=\"h-3 w-3 mr-1\" />\n          {drone.status.replace('-', ' ').toUpperCase()}\n        </span>\n      </div>\n\n      <div className=\"space-y-3 text-sm\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400\">Model</span>\n          <span className=\"text-white font-medium\">{drone.model}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400 flex items-center gap-1\">\n            <Battery className=\"h-3 w-3\" />\n            Battery\n          </span>\n          <span className={`font-medium ${getBatteryColor(drone.batteryLevel)}`}>\n            {drone.batteryLevel}%\n          </span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400 flex items-center gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            Flight Hours\n          </span>\n          <span className=\"text-white font-medium\">{drone.flightHours}h</span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400 flex items-center gap-1\">\n            <MapPin className=\"h-3 w-3\" />\n            Location\n          </span>\n          <span className=\"text-white font-medium\">\n            {drone.location.lat.toFixed(3)}, {drone.location.lng.toFixed(3)}\n          </span>\n        </div>\n\n        <div className=\"pt-2 border-t border-gray-700\">\n          <span className=\"text-gray-400 text-xs\">Sensors</span>\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {drone.sensors.map((sensor) => (\n              <span\n                key={sensor}\n                className=\"inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\"\n              >\n                {sensor}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-4 pt-4 border-t border-gray-700\">\n        <div className=\"flex gap-2\">\n          <button className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n            View Details\n          </button>\n          {drone.status === 'available' && (\n            <button className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors\">\n              Start Mission\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DroneCard;","size_bytes":4085},"src/components/dashboard/FleetDashboard.tsx":{"content":"import React from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport DroneCard from './DroneCard';\nimport StatsOverview from './StatsOverview';\nimport { Battery, Activity, AlertTriangle, CheckCircle, Clock } from 'lucide-react';\n\nconst FleetDashboard: React.FC = () => {\n  const { drones, organization } = useDrone();\n\n  const statusCounts = drones.reduce((acc, drone) => {\n    acc[drone.status] = (acc[drone.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const averageBattery = drones.reduce((sum, drone) => sum + drone.batteryLevel, 0) / drones.length;\n\n  const stats = [\n    {\n      title: 'Total Drones',\n      value: organization.activeDrones.toString(),\n      icon: Activity,\n      color: 'text-blue-400',\n      bgColor: 'bg-blue-50'\n    },\n    {\n      title: 'Available',\n      value: (statusCounts.available || 0).toString(),\n      icon: CheckCircle,\n      color: 'text-green-400',\n      bgColor: 'bg-green-50'\n    },\n    {\n      title: 'Active Missions',\n      value: (statusCounts['in-mission'] || 0).toString(),\n      icon: Activity,\n      color: 'text-orange-400',\n      bgColor: 'bg-orange-50'\n    },\n    {\n      title: 'Charging',\n      value: (statusCounts.charging || 0).toString(),\n      icon: Battery,\n      color: 'text-yellow-400',\n      bgColor: 'bg-yellow-50'\n    },\n    {\n      title: 'Avg Battery',\n      value: `${Math.round(averageBattery)}%`,\n      icon: Battery,\n      color: 'text-purple-400',\n      bgColor: 'bg-purple-50'\n    },\n    {\n      title: 'Total Flight Hours',\n      value: `${organization.totalFlightHours}`,\n      icon: Clock,\n      color: 'text-cyan-400',\n      bgColor: 'bg-cyan-50'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Fleet Dashboard</h2>\n        <div className=\"flex gap-2\">\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            {statusCounts.available || 0} Available\n          </span>\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\">\n            <Activity className=\"h-3 w-3 mr-1\" />\n            {statusCounts['in-mission'] || 0} Active\n          </span>\n          {statusCounts.maintenance && (\n            <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n              <AlertTriangle className=\"h-3 w-3 mr-1\" />\n              {statusCounts.maintenance} Maintenance\n            </span>\n          )}\n        </div>\n      </div>\n\n      <StatsOverview stats={stats} />\n\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-medium text-white\">Fleet Management</h3>\n          <p className=\"text-sm text-gray-400\">Monitor and manage your drone fleet inventory</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {drones.map((drone) => (\n            <DroneCard key={drone.id} drone={drone} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FleetDashboard;","size_bytes":3341},"src/components/dashboard/StatsOverview.tsx":{"content":"import React from 'react';\nimport { LucideIcon } from 'lucide-react';\n\ninterface Stat {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  bgColor: string;\n}\n\ninterface StatsOverviewProps {\n  stats: Stat[];\n}\n\nconst StatsOverview: React.FC<StatsOverviewProps> = ({ stats }) => {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 grid-comfortable\">\n      {stats.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <div key={stat.title} className=\"card-premium rounded-xl p-6 text-center hover:shadow-lg transition-all duration-200\">\n            <Icon className={`h-10 w-10 ${stat.color} mx-auto mb-3`} />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">{stat.title}</h4>\n            <span className={`text-3xl font-bold ${stat.color}`}>{stat.value}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StatsOverview;","size_bytes":941},"src/components/monitoring/LiveMonitoring.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionCard from './MissionCard';\nimport MapView from './MapView';\nimport { Play, Pause, Square, RotateCcw } from 'lucide-react';\n\nconst LiveMonitoring: React.FC = () => {\n  const { missions, updateMission, drones } = useDrone();\n  const [selectedMission, setSelectedMission] = useState<string | null>(null);\n  \n  const activeMissions = missions.filter(m => m.status === 'in-progress' || m.status === 'paused');\n  const selectedMissionData = selectedMission \n    ? missions.find(m => m.id === selectedMission)\n    : activeMissions[0];\n\n  const handleMissionControl = (missionId: string, action: 'pause' | 'resume' | 'abort') => {\n    const mission = missions.find(m => m.id === missionId);\n    if (!mission) return;\n\n    switch (action) {\n      case 'pause':\n        updateMission(missionId, { status: 'paused' });\n        break;\n      case 'resume':\n        updateMission(missionId, { status: 'in-progress' });\n        break;\n      case 'abort':\n        updateMission(missionId, { status: 'aborted', progress: 0 });\n        break;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Live Mission Monitoring</h2>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-gray-400 text-sm\">\n            {activeMissions.length} Active Mission{activeMissions.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Mission List */}\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-medium text-white\">Mission Queue</h3>\n            <p className=\"text-sm text-gray-400\">Active and pending missions</p>\n          </div>\n          {activeMissions.length === 0 ? (\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n              <p className=\"text-gray-400\">No active missions</p>\n            </div>\n          ) : (\n            activeMissions.map((mission) => (\n              <MissionCard\n                key={mission.id}\n                mission={mission}\n                isSelected={selectedMission === mission.id}\n                onSelect={() => setSelectedMission(mission.id)}\n                onControl={handleMissionControl}\n              />\n            ))\n          )}\n        </div>\n\n        {/* Map and Controls */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          {selectedMissionData && (\n            <>\n              {/* Mission Controls */}\n              <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-medium text-white\">{selectedMissionData.name}</h4>\n                  <div className=\"flex items-center gap-2\">\n                    {selectedMissionData.status === 'in-progress' && (\n                      <button\n                        onClick={() => handleMissionControl(selectedMissionData.id, 'pause')}\n                        className=\"bg-yellow-600 hover:bg-yellow-700 text-white p-2 rounded-md transition-colors\"\n                      >\n                        <Pause className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                    {selectedMissionData.status === 'paused' && (\n                      <button\n                        onClick={() => handleMissionControl(selectedMissionData.id, 'resume')}\n                        className=\"bg-green-600 hover:bg-green-700 text-white p-2 rounded-md transition-colors\"\n                      >\n                        <Play className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                    <button\n                      onClick={() => handleMissionControl(selectedMissionData.id, 'abort')}\n                      className=\"bg-red-600 hover:bg-red-700 text-white p-2 rounded-md transition-colors\"\n                    >\n                      <Square className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                    <span>Progress</span>\n                    <span>{Math.round(selectedMissionData.progress)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${selectedMissionData.progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Mission Stats */}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <span className=\"text-sm font-medium text-medium-contrast mb-1 block\">Status</span>\n                    <span className=\"text-lg font-bold text-high-contrast\">{selectedMissionData.status}</span>\n                  </div>\n                  <div className=\"text-center\">\n                    <span className=\"text-sm font-medium text-medium-contrast mb-1 block\">Duration</span>\n                    <span className=\"text-lg font-bold text-high-contrast\">{selectedMissionData.estimatedDuration}m</span>\n                  </div>\n                  <div className=\"text-center\">\n                    <span className=\"text-sm font-medium text-medium-contrast mb-1 block\">Altitude</span>\n                    <span className=\"text-lg font-bold text-high-contrast\">{selectedMissionData.parameters.altitude}m</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Map */}\n              <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n                <MapView mission={selectedMissionData} drones={drones} />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LiveMonitoring;","size_bytes":6280},"src/components/monitoring/MapView.tsx":{"content":"import React from 'react';\nimport { Mission, Drone } from '../../types';\n\ninterface MapViewProps {\n  mission: Mission;\n  drones: Drone[];\n}\n\nconst MapView: React.FC<MapViewProps> = ({ mission, drones }) => {\n  // Find the drone for this mission\n  const missionDrone = drones.find(d => d.id === mission.droneId);\n  \n  // Calculate bounds for the map view\n  const bounds = mission.area.bounds;\n  const minLat = Math.min(...bounds.map(p => p.lat));\n  const maxLat = Math.max(...bounds.map(p => p.lat));\n  const minLng = Math.min(...bounds.map(p => p.lng));\n  const maxLng = Math.max(...bounds.map(p => p.lng));\n  \n  const centerLat = (minLat + maxLat) / 2;\n  const centerLng = (minLng + maxLng) / 2;\n  \n  // Calculate current drone position based on mission progress\n  const progressIndex = Math.floor((mission.progress / 100) * mission.flightPath.length);\n  const currentWaypoint = mission.flightPath[Math.min(progressIndex, mission.flightPath.length - 1)];\n\n  return (\n    <div className=\"h-96 bg-gray-900 rounded-lg relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-blue-900/20 to-purple-900/20\" />\n      \n      {/* Map Content */}\n      <div className=\"absolute inset-0 p-4\">\n        <div className=\"text-white text-sm mb-4\">\n          <h4 className=\"font-medium mb-2\">{mission.area.name}</h4>\n          <p className=\"text-gray-400 text-xs\">\n            Center: {centerLat.toFixed(4)}, {centerLng.toFixed(4)}\n          </p>\n        </div>\n\n        {/* Flight Path Visualization */}\n        <div className=\"bg-gray-800/80 rounded-lg p-4 mb-4\">\n          <h5 className=\"text-white text-sm font-medium mb-2\">Flight Path</h5>\n          <div className=\"grid grid-cols-2 gap-4 text-xs\">\n            <div>\n              <span className=\"text-gray-400 block\">Pattern</span>\n              <span className=\"text-white capitalize\">{mission.pattern}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Waypoints</span>\n              <span className=\"text-white\">{mission.flightPath.length}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Current Position</span>\n              <span className=\"text-white\">\n                {currentWaypoint.lat.toFixed(4)}, {currentWaypoint.lng.toFixed(4)}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Altitude</span>\n              <span className=\"text-white\">{currentWaypoint.altitude}m</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Drone Status */}\n        {missionDrone && (\n          <div className=\"bg-gray-800/80 rounded-lg p-4\">\n            <h5 className=\"text-white text-sm font-medium mb-2\">Drone Status</h5>\n            <div className=\"grid grid-cols-2 gap-4 text-xs\">\n              <div>\n                <span className=\"text-gray-400 block\">Drone</span>\n                <span className=\"text-white\">{missionDrone.name}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Battery</span>\n                <span className={`font-medium ${\n                  missionDrone.batteryLevel > 60 ? 'text-green-400' :\n                  missionDrone.batteryLevel > 30 ? 'text-yellow-400' : 'text-red-400'\n                }`}>\n                  {missionDrone.batteryLevel}%\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Speed</span>\n                <span className=\"text-white\">{mission.parameters.speed} m/s</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">ETA</span>\n                <span className=\"text-white\">\n                  {Math.max(0, Math.round(mission.estimatedDuration * (1 - mission.progress / 100)))}m\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Visual indicator of drone position */}\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n          <div className=\"w-4 h-4 bg-blue-500 rounded-full animate-pulse shadow-lg\">\n            <div className=\"absolute inset-0 bg-blue-400 rounded-full animate-ping opacity-75\" />\n          </div>\n          <div className=\"text-xs text-white mt-1 text-center\">Drone</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MapView;","size_bytes":4421},"src/components/monitoring/MissionCard.tsx":{"content":"import React from 'react';\nimport { Mission } from '../../types';\nimport { Play, Pause, Square, MapPin, Clock, Activity } from 'lucide-react';\n\ninterface MissionCardProps {\n  mission: Mission;\n  isSelected: boolean;\n  onSelect: () => void;\n  onControl: (missionId: string, action: 'pause' | 'resume' | 'abort') => void;\n}\n\nconst MissionCard: React.FC<MissionCardProps> = ({ mission, isSelected, onSelect, onControl }) => {\n  const getStatusColor = (status: Mission['status']) => {\n    switch (status) {\n      case 'in-progress': return 'text-green-400 bg-green-100';\n      case 'paused': return 'text-yellow-400 bg-yellow-100';\n      case 'completed': return 'text-blue-400 bg-blue-100';\n      case 'aborted': return 'text-red-400 bg-red-100';\n      default: return 'text-gray-400 bg-gray-100';\n    }\n  };\n\n  return (\n    <div\n      className={`bg-gray-800 rounded-lg border p-4 cursor-pointer transition-all duration-200 hover:shadow-lg ${\n        isSelected ? 'border-blue-500 ring-1 ring-blue-500' : 'border-gray-700 hover:border-gray-600'\n      }`}\n      onClick={onSelect}\n    >\n      <div className=\"flex items-center justify-between mb-3\">\n        <h4 className=\"font-medium text-white text-sm\">{mission.name}</h4>\n        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(mission.status)}`}>\n          {mission.status === 'in-progress' && <Activity className=\"h-3 w-3 mr-1\" />}\n          {mission.status === 'paused' && <Pause className=\"h-3 w-3 mr-1\" />}\n          {mission.status.replace('-', ' ').toUpperCase()}\n        </span>\n      </div>\n\n      <div className=\"space-y-2 text-xs\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400 flex items-center gap-1\">\n            <MapPin className=\"h-3 w-3\" />\n            Area\n          </span>\n          <span className=\"text-white\">{mission.area.name}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-gray-400 flex items-center gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            Progress\n          </span>\n          <span className=\"text-white\">{Math.round(mission.progress)}%</span>\n        </div>\n\n        <div className=\"w-full bg-gray-700 rounded-full h-1.5 mt-2\">\n          <div\n            className=\"bg-blue-500 h-1.5 rounded-full transition-all duration-300\"\n            style={{ width: `${mission.progress}%` }}\n          />\n        </div>\n\n        {mission.stats && (\n          <div className=\"pt-2 mt-2 border-t border-gray-700\">\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div>\n                <span className=\"text-gray-400 block\">Distance</span>\n                <span className=\"text-white\">{mission.stats.distanceCovered} km</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Data Points</span>\n                <span className=\"text-white\">{mission.stats.dataPointsCollected}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {isSelected && (\n        <div className=\"mt-3 pt-3 border-t border-gray-700\">\n          <div className=\"flex gap-2\">\n            {mission.status === 'in-progress' && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onControl(mission.id, 'pause');\n                }}\n                className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors\"\n              >\n                Pause\n              </button>\n            )}\n            {mission.status === 'paused' && (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onControl(mission.id, 'resume');\n                }}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors\"\n              >\n                Resume\n              </button>\n            )}\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                onControl(mission.id, 'abort');\n              }}\n              className=\"flex-1 bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded text-xs font-medium transition-colors\"\n            >\n              Abort\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionCard;","size_bytes":4500},"src/components/planning/MissionForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Mission, Drone } from '../../types';\nimport { MapPin, Settings, Calendar, Zap } from 'lucide-react';\n\ninterface MissionFormProps {\n  drones: Drone[];\n  onSubmit: (mission: Omit<Mission, 'id' | 'createdAt'>) => void;\n  onCancel: () => void;\n}\n\nconst MissionForm: React.FC<MissionFormProps> = ({ drones, onSubmit, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'inspection' as Mission['type'],\n    droneId: '',\n    areaName: '',\n    pattern: 'crosshatch' as Mission['pattern'],\n    altitude: 75,\n    speed: 6,\n    overlapPercentage: 70,\n    captureFrequency: 1,\n    estimatedDuration: 30\n  });\n\n  const [activeStep, setActiveStep] = useState(1);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Generate sample flight path based on pattern\n    const flightPath = generateFlightPath(formData.pattern, formData.altitude);\n    const area = {\n      name: formData.areaName,\n      bounds: [\n        { lat: 37.7749, lng: -122.4194 },\n        { lat: 37.7759, lng: -122.4184 },\n        { lat: 37.7769, lng: -122.4204 },\n        { lat: 37.7759, lng: -122.4214 }\n      ]\n    };\n\n    const mission: Omit<Mission, 'id' | 'createdAt'> = {\n      name: formData.name,\n      type: formData.type,\n      status: 'planned',\n      droneId: formData.droneId,\n      area,\n      flightPath,\n      pattern: formData.pattern,\n      parameters: {\n        altitude: formData.altitude,\n        speed: formData.speed,\n        overlapPercentage: formData.overlapPercentage,\n        captureFrequency: formData.captureFrequency\n      },\n      progress: 0,\n      estimatedDuration: formData.estimatedDuration\n    };\n\n    onSubmit(mission);\n  };\n\n  const generateFlightPath = (pattern: string, altitude: number) => {\n    // Generate sample waypoints based on pattern\n    const basePoints = [\n      { lat: 37.7749, lng: -122.4194, altitude },\n      { lat: 37.7759, lng: -122.4184, altitude },\n      { lat: 37.7769, lng: -122.4204, altitude },\n      { lat: 37.7759, lng: -122.4214, altitude }\n    ];\n\n    if (pattern === 'crosshatch') {\n      return [\n        ...basePoints,\n        { lat: 37.7754, lng: -122.4199, altitude },\n        { lat: 37.7764, lng: -122.4189, altitude },\n        { lat: 37.7774, lng: -122.4209, altitude }\n      ];\n    }\n\n    return basePoints;\n  };\n\n  const steps = [\n    { number: 1, title: 'Basic Info', icon: Calendar },\n    { number: 2, title: 'Area & Pattern', icon: MapPin },\n    { number: 3, title: 'Parameters', icon: Settings },\n    { number: 4, title: 'Review', icon: Zap }\n  ];\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-4\">Create New Mission</h3>\n        \n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mb-8\">\n          {steps.map((step) => {\n            const Icon = step.icon;\n            return (\n              <div key={step.number} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                  activeStep >= step.number\n                    ? 'bg-blue-600 border-blue-600 text-white'\n                    : 'border-gray-600 text-gray-400'\n                }`}>\n                  <Icon className=\"h-5 w-5\" />\n                </div>\n                <span className={`ml-2 text-sm font-medium ${\n                  activeStep >= step.number ? 'text-white' : 'text-gray-400'\n                }`}>\n                  {step.title}\n                </span>\n                {step.number < steps.length && (\n                  <div className={`ml-4 w-12 h-0.5 ${\n                    activeStep > step.number ? 'bg-blue-600' : 'bg-gray-600'\n                  }`} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Step 1: Basic Info */}\n        {activeStep === 1 && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Mission Name\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter mission name\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Mission Type\n              </label>\n              <select\n                value={formData.type}\n                onChange={(e) => setFormData({ ...formData, type: e.target.value as Mission['type'] })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"inspection\">Infrastructure Inspection</option>\n                <option value=\"security\">Security Patrol</option>\n                <option value=\"mapping\">Site Mapping</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Select Drone\n              </label>\n              <select\n                value={formData.droneId}\n                onChange={(e) => setFormData({ ...formData, droneId: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"\">Select a drone</option>\n                {drones.map((drone) => (\n                  <option key={drone.id} value={drone.id}>\n                    {drone.name} - {drone.model} (Battery: {drone.batteryLevel}%)\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Area & Pattern */}\n        {activeStep === 2 && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Survey Area Name\n              </label>\n              <input\n                type=\"text\"\n                value={formData.areaName}\n                onChange={(e) => setFormData({ ...formData, areaName: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter area name\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Pattern\n              </label>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                {[\n                  { value: 'crosshatch', label: 'Crosshatch', description: 'Grid pattern for comprehensive coverage' },\n                  { value: 'perimeter', label: 'Perimeter', description: 'Follow boundary edges' },\n                  { value: 'custom', label: 'Custom', description: 'Define custom waypoints' }\n                ].map((pattern) => (\n                  <div\n                    key={pattern.value}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      formData.pattern === pattern.value\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 hover:border-gray-500'\n                    }`}\n                    onClick={() => setFormData({ ...formData, pattern: pattern.value as Mission['pattern'] })}\n                  >\n                    <h4 className=\"font-medium text-white text-sm\">{pattern.label}</h4>\n                    <p className=\"text-gray-400 text-xs mt-1\">{pattern.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Step 3: Parameters */}\n        {activeStep === 3 && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Altitude (m)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.altitude}\n                onChange={(e) => setFormData({ ...formData, altitude: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"10\"\n                max=\"400\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Speed (m/s)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.speed}\n                onChange={(e) => setFormData({ ...formData, speed: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"1\"\n                max=\"15\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Overlap Percentage (%)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.overlapPercentage}\n                onChange={(e) => setFormData({ ...formData, overlapPercentage: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"50\"\n                max=\"90\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Capture Frequency (sec)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.captureFrequency}\n                onChange={(e) => setFormData({ ...formData, captureFrequency: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0.5\"\n                max=\"10\"\n                step=\"0.5\"\n              />\n            </div>\n\n            <div className=\"sm:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Estimated Duration (minutes)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.estimatedDuration}\n                onChange={(e) => setFormData({ ...formData, estimatedDuration: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"5\"\n                max=\"120\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Review */}\n        {activeStep === 4 && (\n          <div className=\"bg-gray-900 rounded-lg p-4\">\n            <h4 className=\"font-medium text-white mb-4\">Mission Review</h4>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-400 block\">Name:</span>\n                <span className=\"text-white\">{formData.name}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Type:</span>\n                <span className=\"text-white capitalize\">{formData.type}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Drone:</span>\n                <span className=\"text-white\">\n                  {drones.find(d => d.id === formData.droneId)?.name || 'Not selected'}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Pattern:</span>\n                <span className=\"text-white capitalize\">{formData.pattern}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Altitude:</span>\n                <span className=\"text-white\">{formData.altitude}m</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Duration:</span>\n                <span className=\"text-white\">{formData.estimatedDuration} minutes</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Buttons */}\n        <div className=\"flex justify-between pt-6 border-t border-gray-700\">\n          <div className=\"flex gap-2\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors\"\n            >\n              Cancel\n            </button>\n            {activeStep > 1 && (\n              <button\n                type=\"button\"\n                onClick={() => setActiveStep(activeStep - 1)}\n                className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors\"\n              >\n                Back\n              </button>\n            )}\n          </div>\n          \n          <div>\n            {activeStep < 4 ? (\n              <button\n                type=\"button\"\n                onClick={() => setActiveStep(activeStep + 1)}\n                className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors\"\n                disabled={\n                  (activeStep === 1 && (!formData.name || !formData.droneId)) ||\n                  (activeStep === 2 && !formData.areaName)\n                }\n              >\n                Next\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md font-medium transition-colors\"\n              >\n                Create Mission\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default MissionForm;","size_bytes":14712},"src/components/planning/MissionPlanning.tsx":{"content":"import React, { useState } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionForm from './MissionForm';\nimport { Mission } from '../../types';\n\nconst MissionPlanning: React.FC = () => {\n  const { drones, addMission } = useDrone();\n  const [showForm, setShowForm] = useState(false);\n\n  const availableDrones = drones.filter(drone => drone.status === 'available');\n\n  const handleMissionCreate = (missionData: Omit<Mission, 'id' | 'createdAt'>) => {\n    addMission(missionData);\n    setShowForm(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Mission Planning</h2>\n        <button\n          onClick={() => setShowForm(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\"\n        >\n          Create New Mission\n        </button>\n      </div>\n\n      {showForm ? (\n        <MissionForm\n          drones={availableDrones}\n          onSubmit={handleMissionCreate}\n          onCancel={() => setShowForm(false)}\n        />\n      ) : (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-8 text-center\">\n          <h3 className=\"text-xl font-medium text-white mb-4\">Plan autonomous drone surveys with precision flight paths and data collection parameters</h3>\n          <p className=\"text-gray-400 mb-6\">\n            {availableDrones.length} drones available\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"card-premium rounded-xl p-6 text-center\">\n              <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Survey Patterns</h4>\n              <p className=\"text-high-contrast text-sm\">Crosshatch, perimeter, or custom flight paths</p>\n            </div>\n            <div className=\"card-premium rounded-xl p-6 text-center\">\n              <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Real-time Control</h4>\n              <p className=\"text-high-contrast text-sm\">Monitor and control missions as they happen</p>\n            </div>\n            <div className=\"card-premium rounded-xl p-6 text-center\">\n              <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">Detailed Analytics</h4>\n              <p className=\"text-high-contrast text-sm\">Comprehensive reporting and data insights</p>\n            </div>\n          </div>\n          <button\n            onClick={() => setShowForm(true)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-md font-medium transition-colors\"\n          >\n            Start Planning\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionPlanning;","size_bytes":2784},"src/components/reporting/AnalyticsCharts.tsx":{"content":"import React from 'react';\nimport { Mission } from '../../types';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\n\ninterface AnalyticsChartsProps {\n  missions: Mission[];\n}\n\nconst AnalyticsCharts: React.FC<AnalyticsChartsProps> = ({ missions }) => {\n  // Mission types data\n  const typeData = ['inspection', 'security', 'mapping'].map(type => ({\n    name: type.charAt(0).toUpperCase() + type.slice(1),\n    count: missions.filter(m => m.type === type).length,\n    color: type === 'inspection' ? '#3B82F6' : type === 'security' ? '#10B981' : '#8B5CF6'\n  }));\n\n  // Monthly missions data\n  const monthlyData = React.useMemo(() => {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    return monthNames.map((month, index) => ({\n      month,\n      missions: Math.floor(Math.random() * 20) + 10,\n      flightTime: Math.floor(Math.random() * 50) + 30\n    }));\n  }, []);\n\n  // Flight duration distribution\n  const durationData = React.useMemo(() => {\n    const ranges = ['0-15min', '15-30min', '30-45min', '45-60min', '60min+'];\n    return ranges.map(range => ({\n      range,\n      count: Math.floor(Math.random() * 15) + 5\n    }));\n  }, []);\n\n  // Success rate data\n  const successData = React.useMemo(() => {\n    const total = missions.length;\n    const completed = missions.filter(m => m.status === 'completed').length;\n    const aborted = missions.filter(m => m.status === 'aborted').length;\n    const inProgress = total - completed - aborted;\n\n    return [\n      { name: 'Completed', value: completed, color: '#10B981' },\n      { name: 'In Progress', value: inProgress, color: '#F59E0B' },\n      { name: 'Aborted', value: aborted, color: '#EF4444' }\n    ];\n  }, [missions]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Mission Types Chart */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Mission Types Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={typeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"name\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis tick={{ fill: '#9CA3AF' }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Bar dataKey=\"count\" fill=\"#3B82F6\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Success Rate Pie Chart */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Mission Success Rate</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={successData}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                dataKey=\"value\"\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n              >\n                {successData.map((entry, index) => (\n                  <Cell key={index} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Monthly Trends */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Monthly Mission Trends</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={monthlyData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"month\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis tick={{ fill: '#9CA3AF' }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"missions\"\n                stroke=\"#3B82F6\"\n                strokeWidth={2}\n                dot={{ fill: '#3B82F6', r: 4 }}\n                name=\"Missions\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"flightTime\"\n                stroke=\"#10B981\"\n                strokeWidth={2}\n                dot={{ fill: '#10B981', r: 4 }}\n                name=\"Flight Hours\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Duration Distribution */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Flight Duration Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={durationData} layout=\"horizontal\">\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis type=\"number\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis dataKey=\"range\" type=\"category\" tick={{ fill: '#9CA3AF' }} width={80} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Bar dataKey=\"count\" fill=\"#8B5CF6\" radius={[0, 4, 4, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Average Mission Duration</h4>\n          <p className=\"text-2xl font-bold text-white\">\n            {missions.length > 0 \n              ? Math.round(missions.reduce((sum, m) => sum + (m.actualDuration || m.estimatedDuration), 0) / missions.length)\n              : 0\n            } min\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Success Rate</h4>\n          <p className=\"text-2xl font-bold text-green-400\">\n            {missions.length > 0\n              ? Math.round((missions.filter(m => m.status === 'completed').length / missions.length) * 100)\n              : 0\n            }%\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Total Distance</h4>\n          <p className=\"text-2xl font-bold text-blue-400\">\n            {missions\n              .filter(m => m.stats)\n              .reduce((sum, m) => sum + (m.stats?.distanceCovered || 0), 0)\n              .toFixed(1)} km\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Data Points Collected</h4>\n          <p className=\"text-2xl font-bold text-purple-400\">\n            {missions\n              .filter(m => m.stats)\n              .reduce((sum, m) => sum + (m.stats?.dataPointsCollected || 0), 0)\n              .toLocaleString()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsCharts;","size_bytes":8097},"src/components/reporting/MissionHistory.tsx":{"content":"import React, { useState } from 'react';\nimport { Mission } from '../../types';\nimport { Search, Filter, Calendar, MapPin, Clock, BarChart } from 'lucide-react';\n\ninterface MissionHistoryProps {\n  missions: Mission[];\n}\n\nconst MissionHistory: React.FC<MissionHistoryProps> = ({ missions }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n\n  const filteredMissions = missions.filter(mission => {\n    const matchesSearch = mission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         mission.area.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || mission.status === statusFilter;\n    const matchesType = typeFilter === 'all' || mission.type === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: Mission['status']) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'in-progress': return 'bg-blue-100 text-blue-800';\n      case 'aborted': return 'bg-red-100 text-red-800';\n      case 'paused': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeColor = (type: Mission['type']) => {\n    switch (type) {\n      case 'inspection': return 'bg-blue-100 text-blue-800';\n      case 'security': return 'bg-green-100 text-green-800';\n      case 'mapping': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search missions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          \n          <select\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Statuses</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"aborted\">Aborted</option>\n            <option value=\"paused\">Paused</option>\n          </select>\n\n          <select\n            value={typeFilter}\n            onChange={(e) => setTypeFilter(e.target.value)}\n            className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Types</option>\n            <option value=\"inspection\">Inspection</option>\n            <option value=\"security\">Security</option>\n            <option value=\"mapping\">Mapping</option>\n          </select>\n\n          <div className=\"text-sm text-gray-400 flex items-center\">\n            <Filter className=\"h-4 w-4 mr-1\" />\n            {filteredMissions.length} of {missions.length} missions\n          </div>\n        </div>\n      </div>\n\n      {/* Mission List */}\n      <div className=\"space-y-4\">\n        {filteredMissions.map((mission) => (\n          <div key={mission.id} className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 hover:shadow-lg transition-all duration-200 hover:border-blue-500\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-white\">{mission.name}</h3>\n              <div className=\"flex items-center gap-2\">\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(mission.type)}`}>\n                  {mission.type.charAt(0).toUpperCase() + mission.type.slice(1)}\n                </span>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(mission.status)}`}>\n                  {mission.status.charAt(0).toUpperCase() + mission.status.slice(1)}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n              <div className=\"flex items-center text-gray-300\">\n                <MapPin className=\"h-4 w-4 mr-2 text-blue-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Area</span>\n                  <span className=\"text-white\">{mission.area.name}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <Calendar className=\"h-4 w-4 mr-2 text-green-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Created</span>\n                  <span className=\"text-white\">{new Date(mission.createdAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <Clock className=\"h-4 w-4 mr-2 text-yellow-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Duration</span>\n                  <span className=\"text-white\">\n                    {mission.actualDuration || mission.estimatedDuration}m\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <BarChart className=\"h-4 w-4 mr-2 text-purple-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Progress</span>\n                  <span className=\"text-white\">{Math.round(mission.progress)}%</span>\n                </div>\n              </div>\n            </div>\n\n            {mission.stats && (\n              <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400 block\">Distance Covered</span>\n                    <span className=\"text-white font-medium\">{mission.stats.distanceCovered} km</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Area Covered</span>\n                    <span className=\"text-white font-medium\">{mission.stats.areasCovered} km²</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Data Points</span>\n                    <span className=\"text-white font-medium\">{mission.stats.dataPointsCollected}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"mt-4 flex justify-end\">\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\">\n                View Details\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredMissions.length === 0 && (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-12 text-center\">\n          <p className=\"text-gray-400 text-lg\">No missions found matching your criteria</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionHistory;","size_bytes":7821},"src/components/reporting/ReportingDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionHistory from './MissionHistory';\nimport AnalyticsCharts from './AnalyticsCharts';\nimport StatsCards from './StatsCards';\nimport { FileText, TrendingUp, Clock, CheckCircle } from 'lucide-react';\n\nconst ReportingDashboard: React.FC = () => {\n  const { missions, organization } = useDrone();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const completedMissions = missions.filter(m => m.status === 'completed');\n  const totalDistance = completedMissions.reduce((sum, mission) => \n    sum + (mission.stats?.distanceCovered || 0), 0);\n  const totalDataPoints = completedMissions.reduce((sum, mission) => \n    sum + (mission.stats?.dataPointsCollected || 0), 0);\n  const avgMissionDuration = completedMissions.length > 0 \n    ? completedMissions.reduce((sum, mission) => sum + (mission.actualDuration || mission.estimatedDuration), 0) / completedMissions.length\n    : 0;\n\n  const stats = [\n    {\n      title: 'Total Surveys',\n      value: organization.totalSurveys.toString(),\n      icon: FileText,\n      color: 'text-blue-400',\n      change: '+12% from last month'\n    },\n    {\n      title: 'Flight Hours',\n      value: `${organization.totalFlightHours.toFixed(1)}h`,\n      icon: Clock,\n      color: 'text-green-400',\n      change: '+8% from last month'\n    },\n    {\n      title: 'Completed Missions',\n      value: completedMissions.length.toString(),\n      icon: CheckCircle,\n      color: 'text-purple-400',\n      change: '+15% from last month'\n    },\n    {\n      title: 'Data Points Collected',\n      value: totalDataPoints.toLocaleString(),\n      icon: TrendingUp,\n      color: 'text-orange-400',\n      change: '+22% from last month'\n    }\n  ];\n\n  const tabs = [\n    { id: 'overview', label: 'Overview' },\n    { id: 'missions', label: 'Mission History' },\n    { id: 'analytics', label: 'Analytics' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Reports & Analytics</h2>\n        <div className=\"flex bg-gray-800 rounded-lg p-1\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                activeTab === tab.id\n                  ? 'bg-blue-600 text-white'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          <StatsCards stats={stats} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-medium text-white\">Overview</h3>\n                <p className=\"text-sm text-gray-400\">Mission Analysis</p>\n              </div>\n              <div className=\"mb-4\">\n                <h4 className=\"text-white font-medium mb-2\">Fleet Performance</h4>\n                <p className=\"text-gray-400 text-sm mb-4\">Detailed Reports</p>\n              </div>\n              <div className=\"space-y-4\">\n                {missions.slice(0, 5).map((mission) => (\n                  <div key={mission.id} className=\"flex items-center justify-between p-3 bg-gray-900 rounded-lg\">\n                    <div>\n                      <h4 className=\"text-white text-sm font-medium\">{mission.name}</h4>\n                      <p className=\"text-gray-400 text-xs\">{mission.area.name}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        mission.status === 'completed' ? 'bg-green-100 text-green-800' :\n                        mission.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :\n                        mission.status === 'aborted' ? 'bg-red-100 text-red-800' :\n                        'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {mission.status}\n                      </span>\n                      <p className=\"text-gray-400 text-xs mt-1\">\n                        {new Date(mission.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-medium text-white\">Mission Type Distribution</h3>\n                <p className=\"text-sm text-gray-400\">Breakdown of survey missions by type (7d)</p>\n              </div>\n              <div className=\"space-y-3\">\n                {['inspection', 'security', 'mapping'].map((type) => {\n                  const count = missions.filter(m => m.type === type).length;\n                  const percentage = missions.length > 0 ? (count / missions.length) * 100 : 0;\n                  return (\n                    <div key={type}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-300 capitalize\">{type}</span>\n                        <span className=\"text-white\">{count} missions</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full ${\n                            type === 'inspection' ? 'bg-blue-500' :\n                            type === 'security' ? 'bg-green-500' :\n                            'bg-purple-500'\n                          }`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'missions' && <MissionHistory missions={missions} />}\n      \n      {activeTab === 'analytics' && <AnalyticsCharts missions={completedMissions} />}\n    </div>\n  );\n};\n\nexport default ReportingDashboard;","size_bytes":6507},"src/components/reporting/StatsCards.tsx":{"content":"import React from 'react';\nimport { LucideIcon } from 'lucide-react';\n\ninterface Stat {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  change: string;\n}\n\ninterface StatsCardsProps {\n  stats: Stat[];\n}\n\nconst StatsCards: React.FC<StatsCardsProps> = ({ stats }) => {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 grid-comfortable\">\n      {stats.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <div key={stat.title} className=\"card-premium rounded-xl p-6 text-center hover:shadow-lg transition-all duration-200\">\n            <Icon className={`h-10 w-10 ${stat.color} mx-auto mb-3`} />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">{stat.title}</h4>\n            <span className={`text-3xl font-bold ${stat.color}`}>{stat.value}</span>\n            <p className=\"text-xs text-green-400 bg-green-100/10 px-2 py-1 rounded mt-2 inline-block\">\n              {stat.change}\n            </p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StatsCards;","size_bytes":1076},"src/components/settings/SettingsPanel.tsx":{"content":"import React, { useState } from 'react';\nimport { Settings, Users, Shield, Bell, Database, Wifi } from 'lucide-react';\n\nconst SettingsPanel: React.FC = () => {\n  const [activeSection, setActiveSection] = useState('general');\n\n  const sections = [\n    { id: 'general', label: 'General', icon: Settings },\n    { id: 'users', label: 'Users & Permissions', icon: Users },\n    { id: 'security', label: 'Security', icon: Shield },\n    { id: 'notifications', label: 'Notifications', icon: Bell },\n    { id: 'integration', label: 'API & Integration', icon: Database },\n    { id: 'connectivity', label: 'Connectivity', icon: Wifi }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-white\">Settings</h2>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Sidebar */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n          <nav className=\"space-y-2\">\n            {sections.map((section) => {\n              const Icon = section.icon;\n              return (\n                <button\n                  key={section.id}\n                  onClick={() => setActiveSection(section.id)}\n                  className={`w-full text-left px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${\n                    activeSection === section.id\n                      ? 'bg-blue-600 text-white'\n                      : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  {section.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"lg:col-span-3 bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          {activeSection === 'general' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">General Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Organization Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    defaultValue=\"FlytBase Drone Operations\"\n                    className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Default Flight Altitude (meters)\n                  </label>\n                  <input\n                    type=\"number\"\n                    defaultValue=\"75\"\n                    min=\"10\"\n                    max=\"400\"\n                    className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Time Zone\n                  </label>\n                  <select className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    <option value=\"UTC\">UTC</option>\n                    <option value=\"PST\">Pacific Standard Time</option>\n                    <option value=\"EST\">Eastern Standard Time</option>\n                    <option value=\"GMT\">Greenwich Mean Time</option>\n                  </select>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"autoBackup\"\n                    defaultChecked\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"autoBackup\" className=\"ml-2 block text-sm text-gray-300\">\n                    Enable automatic data backup\n                  </label>\n                </div>\n              </div>\n\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\">\n                Save Changes\n              </button>\n            </div>\n          )}\n\n          {activeSection === 'users' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Users & Permissions</h3>\n              \n              <div className=\"bg-gray-900 rounded-lg p-4\">\n                <p className=\"text-gray-400 text-center\">\n                  User management features would be implemented here, including role-based access control, \n                  user invitations, and permission management for different organizational levels.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'security' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Security Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-medium\">Two-Factor Authentication</h4>\n                    <p className=\"text-gray-400 text-sm\">Add an extra layer of security to your account</p>\n                  </div>\n                  <button className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\">\n                    Enable\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-medium\">Session Timeout</h4>\n                    <p className=\"text-gray-400 text-sm\">Automatically log out after inactivity</p>\n                  </div>\n                  <select className=\"px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    <option value=\"30\">30 minutes</option>\n                    <option value=\"60\">1 hour</option>\n                    <option value=\"240\">4 hours</option>\n                    <option value=\"480\">8 hours</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'notifications' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Notification Settings</h3>\n              \n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Mission Completion', description: 'Get notified when missions are completed' },\n                  { label: 'Low Battery Alerts', description: 'Receive alerts when drone battery is low' },\n                  { label: 'System Maintenance', description: 'Notifications about system updates and maintenance' },\n                  { label: 'Emergency Alerts', description: 'Critical alerts for mission failures or emergencies' }\n                ].map((notification) => (\n                  <div key={notification.label} className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                    <div>\n                      <h4 className=\"text-white font-medium\">{notification.label}</h4>\n                      <p className=\"text-gray-400 text-sm\">{notification.description}</p>\n                    </div>\n                    <input\n                      type=\"checkbox\"\n                      defaultChecked\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'integration' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">API & Integration</h3>\n              \n              <div className=\"bg-gray-900 rounded-lg p-6\">\n                <h4 className=\"text-white font-medium mb-4\">API Configuration</h4>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      API Base URL\n                    </label>\n                    <input\n                      type=\"url\"\n                      defaultValue=\"https://api.droneflow.com/v1\"\n                      className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      readOnly\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      API Key\n                    </label>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"password\"\n                        defaultValue=\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"\n                        className=\"flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        readOnly\n                      />\n                      <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\">\n                        Regenerate\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'connectivity' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Connectivity Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-900 rounded-lg\">\n                  <h4 className=\"text-white font-medium mb-2\">Ground Control Connection</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-gray-300 text-sm\">Connected to Ground Control Station</span>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-900 rounded-lg\">\n                  <h4 className=\"text-white font-medium mb-2\">Telemetry Settings</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-300 text-sm\">Update Frequency</span>\n                      <select className=\"px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm\">\n                        <option value=\"1\">1 Hz</option>\n                        <option value=\"5\">5 Hz</option>\n                        <option value=\"10\" selected>10 Hz</option>\n                        <option value=\"20\">20 Hz</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPanel;","size_bytes":11493},"client/src/components/dashboard/DroneCard.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Drone } from '../../types';\nimport { Battery, MapPin, Clock, Wrench, Activity, AlertTriangle, Zap, Wifi, Shield } from 'lucide-react';\n\ninterface DroneCardProps {\n  drone: Drone;\n}\n\nconst DroneCard: React.FC<DroneCardProps> = ({ drone }) => {\n  const getStatusColor = (status: Drone['status']) => {\n    switch (status) {\n      case 'available': return 'text-green-400 bg-green-100';\n      case 'in-mission': return 'text-orange-400 bg-orange-100';\n      case 'maintenance': return 'text-red-400 bg-red-100';\n      case 'charging': return 'text-yellow-400 bg-yellow-100';\n      default: return 'text-gray-400 bg-gray-100';\n    }\n  };\n\n  const getStatusIcon = (status: Drone['status']) => {\n    switch (status) {\n      case 'available': return Activity;\n      case 'in-mission': return MapPin;\n      case 'maintenance': return Wrench;\n      case 'charging': return Battery;\n      default: return AlertTriangle;\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 60) return 'text-green-500';\n    if (level > 30) return 'text-yellow-500';\n    return 'text-red-500';\n  };\n\n  const StatusIcon = getStatusIcon(drone.status);\n\n  return (\n    <motion.div \n      className=\"card-premium hover-lift relative overflow-hidden group\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n      whileHover={{ scale: 1.02 }}\n    >\n      {/* Icon */}\n      <div className=\"flex justify-center mb-4\">\n        <div className=\"p-3 rounded-full bg-purple-100\">\n          <StatusIcon className=\"h-8 w-8 text-purple-600\" />\n        </div>\n      </div>\n      \n      {/* Title */}\n      <h3 className=\"text-lg font-bold text-high-contrast mb-1 text-center\">\n        {drone.name}\n      </h3>\n      <p className=\"text-sm text-medium-contrast mb-4 text-center\">{drone.model}</p>\n      \n      {/* Status */}\n      <div className=\"mb-6 text-center\">\n        <motion.span \n          className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold ${getStatusColor(drone.status)} shadow-lg`}\n          whileHover={{ scale: 1.05 }}\n        >\n          <StatusIcon className=\"h-3 w-3 mr-1.5\" />\n          {drone.status.replace('-', ' ').toUpperCase()}\n        </motion.span>\n      </div>\n\n      {/* Stats */}\n      <div className=\"space-y-3 mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-medium-contrast font-medium\">Battery Level</span>\n          <span className={`font-bold text-sm ${getBatteryColor(drone.batteryLevel)}`}>\n            {drone.batteryLevel}%\n          </span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-medium-contrast font-medium\">Flight Hours</span>\n          <span className=\"font-bold text-sm text-high-contrast\">{drone.flightHours}h</span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-medium-contrast font-medium\">Sensors</span>\n          <span className=\"font-bold text-sm text-high-contrast\">{drone.sensors.length}</span>\n        </div>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <motion.button \n          className=\"flex-1 btn-primary text-white px-4 py-2.5 rounded-lg text-sm font-bold\"\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n        >\n          View Details\n        </motion.button>\n        {drone.status === 'available' && (\n          <motion.button \n            className=\"flex-1 btn-secondary text-white px-4 py-2.5 rounded-lg text-sm font-bold\"\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            Start Mission\n          </motion.button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DroneCard;","size_bytes":3884},"client/src/components/dashboard/FleetDashboard.tsx":{"content":"import React from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport DroneCard from './DroneCard';\nimport StatsOverview from './StatsOverview';\nimport { Battery, Activity, AlertTriangle, CheckCircle } from 'lucide-react';\n\nconst FleetDashboard: React.FC = () => {\n  const { drones, organization } = useDrone();\n\n  const statusCounts = drones.reduce((acc, drone) => {\n    acc[drone.status] = (acc[drone.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const averageBattery = drones.reduce((sum, drone) => sum + drone.batteryLevel, 0) / drones.length;\n\n  const stats = [\n    {\n      title: 'Total Drones',\n      value: organization.activeDrones.toString(),\n      icon: Activity,\n      color: 'text-blue-400',\n      bgColor: 'bg-blue-50'\n    },\n    {\n      title: 'Available',\n      value: (statusCounts.available || 0).toString(),\n      icon: CheckCircle,\n      color: 'text-green-400',\n      bgColor: 'bg-green-50'\n    },\n    {\n      title: 'In Mission',\n      value: (statusCounts['in-mission'] || 0).toString(),\n      icon: Activity,\n      color: 'text-orange-400',\n      bgColor: 'bg-orange-50'\n    },\n    {\n      title: 'Avg Battery',\n      value: `${Math.round(averageBattery)}%`,\n      icon: Battery,\n      color: 'text-purple-400',\n      bgColor: 'bg-purple-50'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-high-contrast mb-1\">Fleet Dashboard</h2>\n        <p className=\"text-medium-contrast text-lg\">Monitor and manage your drone fleet in real-time</p>\n      </div>\n\n      <div className=\"mb-10\">\n        <StatsOverview stats={stats} />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 grid-comfortable\">\n        {drones.map((drone) => (\n          <DroneCard key={drone.id} drone={drone} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FleetDashboard;","size_bytes":1965},"client/src/components/dashboard/StatsOverview.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LucideIcon } from 'lucide-react';\n\ninterface Stat {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  bgColor: string;\n}\n\ninterface StatsOverviewProps {\n  stats: Stat[];\n}\n\nconst StatsOverview: React.FC<StatsOverviewProps> = ({ stats }) => {\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, y: 20, scale: 0.95 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.div \n      className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <motion.div \n            key={stat.title} \n            className=\"card-premium hover-lift relative overflow-hidden group\"\n            variants={cardVariants}\n            whileHover={{ y: -4 }}\n          >\n            {/* Background gradient overlay */}\n            <div className=\"absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-300\"\n                 style={{ background: 'var(--gradient-primary)' }} />\n            \n            <div className=\"relative z-10 text-center\">\n              {/* Icon */}\n              <Icon className={`h-10 w-10 ${stat.color} mx-auto mb-3`} />\n              \n              {/* Title */}\n              <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">{stat.title}</h4>\n              \n              {/* Value */}\n              <motion.p \n                className=\"text-3xl font-bold text-high-contrast\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ \n                  type: \"spring\", \n                  stiffness: 300, \n                  damping: 20, \n                  delay: index * 0.1 + 0.5 \n                }}\n              >\n                {stat.value}\n              </motion.p>\n            </div>\n          </motion.div>\n        );\n      })}\n    </motion.div>\n  );\n};\n\nexport default StatsOverview;","size_bytes":2344},"client/src/components/monitoring/LiveMonitoring.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionCard from './MissionCard';\nimport MapView from './MapView';\nimport { Play, Pause, Square, RotateCcw } from 'lucide-react';\n\nconst LiveMonitoring: React.FC = () => {\n  const { missions, updateMission, drones } = useDrone();\n  const [selectedMission, setSelectedMission] = useState<string | null>(null);\n  \n  const activeMissions = missions.filter(m => m.status === 'in-progress' || m.status === 'paused');\n  const selectedMissionData = selectedMission \n    ? missions.find(m => m.id === selectedMission)\n    : activeMissions[0];\n\n  const handleMissionControl = (missionId: string, action: 'pause' | 'resume' | 'abort') => {\n    const mission = missions.find(m => m.id === missionId);\n    if (!mission) return;\n\n    switch (action) {\n      case 'pause':\n        updateMission(missionId, { status: 'paused' });\n        break;\n      case 'resume':\n        updateMission(missionId, { status: 'in-progress' });\n        break;\n      case 'abort':\n        updateMission(missionId, { status: 'aborted', progress: 0 });\n        break;\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-3xl font-bold text-high-contrast mb-2\">Live Mission Monitoring</h2>\n          <p className=\"text-medium-contrast text-lg\">Track active missions and control drone operations</p>\n        </div>\n        <div className=\"glass-effect-strong px-6 py-3 rounded-xl\">\n          <span className=\"text-high-contrast text-lg font-bold\">\n            {activeMissions.length} Active Mission{activeMissions.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 grid-comfortable\">\n        {/* Mission List */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Active Missions</h3>\n          {activeMissions.length === 0 ? (\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n              <p className=\"text-gray-400\">No active missions</p>\n            </div>\n          ) : (\n            activeMissions.map((mission) => (\n              <MissionCard\n                key={mission.id}\n                mission={mission}\n                isSelected={selectedMission === mission.id}\n                onSelect={() => setSelectedMission(mission.id)}\n                onControl={handleMissionControl}\n              />\n            ))\n          )}\n        </div>\n\n        {/* Map and Controls */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          {selectedMissionData && (\n            <>\n              {/* Mission Controls */}\n              <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-medium text-white\">{selectedMissionData.name}</h4>\n                  <div className=\"flex items-center gap-2\">\n                    {selectedMissionData.status === 'in-progress' && (\n                      <button\n                        onClick={() => handleMissionControl(selectedMissionData.id, 'pause')}\n                        className=\"bg-yellow-600 hover:bg-yellow-700 text-white p-2 rounded-md transition-colors\"\n                      >\n                        <Pause className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                    {selectedMissionData.status === 'paused' && (\n                      <button\n                        onClick={() => handleMissionControl(selectedMissionData.id, 'resume')}\n                        className=\"bg-green-600 hover:bg-green-700 text-white p-2 rounded-md transition-colors\"\n                      >\n                        <Play className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                    <button\n                      onClick={() => handleMissionControl(selectedMissionData.id, 'abort')}\n                      className=\"bg-red-600 hover:bg-red-700 text-white p-2 rounded-md transition-colors\"\n                    >\n                      <Square className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                    <span>Progress</span>\n                    <span>{Math.round(selectedMissionData.progress)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${selectedMissionData.progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Mission Stats */}\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400 block\">Status</span>\n                    <span className=\"text-white font-medium\">{selectedMissionData.status}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Duration</span>\n                    <span className=\"text-white font-medium\">{selectedMissionData.estimatedDuration}m</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Altitude</span>\n                    <span className=\"text-white font-medium\">{selectedMissionData.parameters.altitude}m</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Map */}\n              <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n                <MapView mission={selectedMissionData} drones={drones} />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LiveMonitoring;","size_bytes":6156},"client/src/components/monitoring/MapView.tsx":{"content":"import React from 'react';\nimport { Mission, Drone } from '../../types';\n\ninterface MapViewProps {\n  mission: Mission;\n  drones: Drone[];\n}\n\nconst MapView: React.FC<MapViewProps> = ({ mission, drones }) => {\n  // Find the drone for this mission\n  const missionDrone = drones.find(d => d.id === mission.droneId);\n  \n  // Calculate bounds for the map view\n  const bounds = mission.area.bounds;\n  const minLat = Math.min(...bounds.map(p => p.lat));\n  const maxLat = Math.max(...bounds.map(p => p.lat));\n  const minLng = Math.min(...bounds.map(p => p.lng));\n  const maxLng = Math.max(...bounds.map(p => p.lng));\n  \n  const centerLat = (minLat + maxLat) / 2;\n  const centerLng = (minLng + maxLng) / 2;\n  \n  // Calculate current drone position based on mission progress\n  const progressIndex = Math.floor((mission.progress / 100) * mission.flightPath.length);\n  const currentWaypoint = mission.flightPath[Math.min(progressIndex, mission.flightPath.length - 1)];\n\n  return (\n    <div className=\"h-96 bg-gray-900 rounded-lg relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-blue-900/20 to-purple-900/20\" />\n      \n      {/* Map Content */}\n      <div className=\"absolute inset-0 p-4\">\n        <div className=\"text-white text-sm mb-4\">\n          <h4 className=\"font-medium mb-2\">{mission.area.name}</h4>\n          <p className=\"text-gray-400 text-xs\">\n            Center: {centerLat.toFixed(4)}, {centerLng.toFixed(4)}\n          </p>\n        </div>\n\n        {/* Flight Path Visualization */}\n        <div className=\"bg-gray-800/80 rounded-lg p-4 mb-4\">\n          <h5 className=\"text-white text-sm font-medium mb-2\">Flight Path</h5>\n          <div className=\"grid grid-cols-2 gap-4 text-xs\">\n            <div>\n              <span className=\"text-gray-400 block\">Pattern</span>\n              <span className=\"text-white capitalize\">{mission.pattern}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Waypoints</span>\n              <span className=\"text-white\">{mission.flightPath.length}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Current Position</span>\n              <span className=\"text-white\">\n                {currentWaypoint.lat.toFixed(4)}, {currentWaypoint.lng.toFixed(4)}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-400 block\">Altitude</span>\n              <span className=\"text-white\">{currentWaypoint.altitude}m</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Drone Status */}\n        {missionDrone && (\n          <div className=\"bg-gray-800/80 rounded-lg p-4\">\n            <h5 className=\"text-white text-sm font-medium mb-2\">Drone Status</h5>\n            <div className=\"grid grid-cols-2 gap-4 text-xs\">\n              <div>\n                <span className=\"text-gray-400 block\">Drone</span>\n                <span className=\"text-white\">{missionDrone.name}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Battery</span>\n                <span className={`font-medium ${\n                  missionDrone.batteryLevel > 60 ? 'text-green-400' :\n                  missionDrone.batteryLevel > 30 ? 'text-yellow-400' : 'text-red-400'\n                }`}>\n                  {missionDrone.batteryLevel}%\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Speed</span>\n                <span className=\"text-white\">{mission.parameters.speed} m/s</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">ETA</span>\n                <span className=\"text-white\">\n                  {Math.max(0, Math.round(mission.estimatedDuration * (1 - mission.progress / 100)))}m\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Visual indicator of drone position */}\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n          <div className=\"w-4 h-4 bg-blue-500 rounded-full animate-pulse shadow-lg\">\n            <div className=\"absolute inset-0 bg-blue-400 rounded-full animate-ping opacity-75\" />\n          </div>\n          <div className=\"text-xs text-white mt-1 text-center\">Drone</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MapView;","size_bytes":4421},"client/src/components/monitoring/MissionCard.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Mission } from '../../types';\nimport { Play, Pause, Square, MapPin, Clock, Activity, Zap, Target } from 'lucide-react';\n\ninterface MissionCardProps {\n  mission: Mission;\n  isSelected: boolean;\n  onSelect: () => void;\n  onControl: (missionId: string, action: 'pause' | 'resume' | 'abort') => void;\n}\n\nconst MissionCard: React.FC<MissionCardProps> = ({ mission, isSelected, onSelect, onControl }) => {\n  const getStatusColor = (status: Mission['status']) => {\n    switch (status) {\n      case 'in-progress': return 'text-white bg-blue-500';\n      case 'paused': return 'text-white bg-yellow-500';\n      case 'completed': return 'text-white bg-green-500';\n      case 'aborted': return 'text-white bg-red-500';\n      default: return 'text-gray-800 bg-gray-200';\n    }\n  };\n\n  return (\n    <motion.div\n      className={`card-premium hover-lift cursor-pointer relative overflow-hidden group ${\n        isSelected ? 'ring-2 ring-purple-500 ring-opacity-50' : ''\n      }`}\n      onClick={onSelect}\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      whileHover={{ scale: 1.02, y: -2 }}\n      whileTap={{ scale: 0.98 }}\n      layout\n    >\n      {/* Background animation */}\n      {isSelected && (\n        <motion.div\n          className=\"absolute inset-0 bg-purple-500/5 rounded-xl\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        />\n      )}\n      \n      <div className=\"relative z-10\">\n        {/* Icon */}\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-3 rounded-full bg-purple-100\">\n            <Target className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </div>\n        \n        {/* Title */}\n        <h3 className=\"text-lg font-bold text-high-contrast mb-1 text-center\">\n          {mission.name}\n        </h3>\n        <p className=\"text-sm text-medium-contrast mb-4 text-center capitalize\">{mission.type}</p>\n        \n        {/* Status */}\n        <div className=\"mb-6 text-center\">\n          <motion.span \n            className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold ${getStatusColor(mission.status)} shadow-lg`}\n            whileHover={{ scale: 1.05 }}\n          >\n            {mission.status === 'in-progress' && <Activity className=\"h-3 w-3 mr-1.5\" />}\n            {mission.status === 'paused' && <Pause className=\"h-3 w-3 mr-1.5\" />}\n            {mission.status === 'completed' && <Zap className=\"h-3 w-3 mr-1.5\" />}\n            {mission.status.replace('-', ' ').toUpperCase()}\n          </motion.span>\n        </div>\n\n        {/* Stats */}\n        <div className=\"space-y-3 mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-medium-contrast font-medium\">Area</span>\n            <span className=\"font-bold text-sm text-high-contrast\">{mission.area.name}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-medium-contrast font-medium\">Progress</span>\n            <span className=\"font-bold text-sm text-high-contrast\">{Math.round(mission.progress)}%</span>\n          </div>\n          {mission.stats && (\n            <>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-medium-contrast font-medium\">Distance</span>\n                <span className=\"font-bold text-sm text-high-contrast\">{mission.stats.distanceCovered} km</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-medium-contrast font-medium\">Data Points</span>\n                <span className=\"font-bold text-sm text-high-contrast\">{mission.stats.dataPointsCollected}</span>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-6\">\n          <motion.div\n            className=\"h-2 bg-purple-600 rounded-full\"\n            initial={{ width: 0 }}\n            animate={{ width: `${mission.progress}%` }}\n            transition={{ duration: 1, ease: \"easeOut\" }}\n          />\n        </div>\n\n        {/* Control Buttons */}\n        {isSelected && (\n          <div className=\"flex gap-2\">\n            {mission.status === 'in-progress' && (\n              <motion.button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onControl(mission.id, 'pause');\n                }}\n                className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2.5 rounded-lg text-sm font-bold transition-colors\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Pause className=\"h-4 w-4 mr-2\" />\n                Pause\n              </motion.button>\n            )}\n            {mission.status === 'paused' && (\n              <motion.button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onControl(mission.id, 'resume');\n                }}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2.5 rounded-lg text-sm font-bold transition-colors\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                Resume\n              </motion.button>\n            )}\n            <motion.button\n              onClick={(e) => {\n                e.stopPropagation();\n                onControl(mission.id, 'abort');\n              }}\n              className=\"flex-1 bg-red-600 hover:bg-red-700 text-white px-4 py-2.5 rounded-lg text-sm font-bold transition-colors\"\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n            >\n              <Square className=\"h-4 w-4 mr-2\" />\n              Abort\n            </motion.button>\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default MissionCard;","size_bytes":6142},"client/src/components/planning/MissionForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Mission, Drone } from '../../types';\nimport { MapPin, Settings, Calendar, Zap } from 'lucide-react';\n\ninterface MissionFormProps {\n  drones: Drone[];\n  onSubmit: (mission: Omit<Mission, 'id' | 'createdAt'>) => void;\n  onCancel: () => void;\n}\n\nconst MissionForm: React.FC<MissionFormProps> = ({ drones, onSubmit, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'inspection' as Mission['type'],\n    droneId: '',\n    areaName: '',\n    pattern: 'crosshatch' as Mission['pattern'],\n    altitude: 75,\n    speed: 6,\n    overlapPercentage: 70,\n    captureFrequency: 1,\n    estimatedDuration: 30\n  });\n\n  const [activeStep, setActiveStep] = useState(1);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Generate sample flight path based on pattern\n    const flightPath = generateFlightPath(formData.pattern, formData.altitude);\n    const area = {\n      name: formData.areaName,\n      bounds: [\n        { lat: 37.7749, lng: -122.4194 },\n        { lat: 37.7759, lng: -122.4184 },\n        { lat: 37.7769, lng: -122.4204 },\n        { lat: 37.7759, lng: -122.4214 }\n      ]\n    };\n\n    const mission: Omit<Mission, 'id' | 'createdAt'> = {\n      name: formData.name,\n      type: formData.type,\n      status: 'planned',\n      droneId: formData.droneId,\n      area,\n      flightPath,\n      pattern: formData.pattern,\n      parameters: {\n        altitude: formData.altitude,\n        speed: formData.speed,\n        overlapPercentage: formData.overlapPercentage,\n        captureFrequency: formData.captureFrequency\n      },\n      progress: 0,\n      estimatedDuration: formData.estimatedDuration\n    };\n\n    onSubmit(mission);\n  };\n\n  const generateFlightPath = (pattern: string, altitude: number) => {\n    // Generate sample waypoints based on pattern\n    const basePoints = [\n      { lat: 37.7749, lng: -122.4194, altitude },\n      { lat: 37.7759, lng: -122.4184, altitude },\n      { lat: 37.7769, lng: -122.4204, altitude },\n      { lat: 37.7759, lng: -122.4214, altitude }\n    ];\n\n    if (pattern === 'crosshatch') {\n      return [\n        ...basePoints,\n        { lat: 37.7754, lng: -122.4199, altitude },\n        { lat: 37.7764, lng: -122.4189, altitude },\n        { lat: 37.7774, lng: -122.4209, altitude }\n      ];\n    }\n\n    return basePoints;\n  };\n\n  const steps = [\n    { number: 1, title: 'Basic Info', icon: Calendar },\n    { number: 2, title: 'Area & Pattern', icon: MapPin },\n    { number: 3, title: 'Parameters', icon: Settings },\n    { number: 4, title: 'Review', icon: Zap }\n  ];\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold text-white mb-4\">Create New Mission</h3>\n        \n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mb-8\">\n          {steps.map((step) => {\n            const Icon = step.icon;\n            return (\n              <div key={step.number} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                  activeStep >= step.number\n                    ? 'bg-blue-600 border-blue-600 text-white'\n                    : 'border-gray-600 text-gray-400'\n                }`}>\n                  <Icon className=\"h-5 w-5\" />\n                </div>\n                <span className={`ml-2 text-sm font-medium ${\n                  activeStep >= step.number ? 'text-white' : 'text-gray-400'\n                }`}>\n                  {step.title}\n                </span>\n                {step.number < steps.length && (\n                  <div className={`ml-4 w-12 h-0.5 ${\n                    activeStep > step.number ? 'bg-blue-600' : 'bg-gray-600'\n                  }`} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Step 1: Basic Info */}\n        {activeStep === 1 && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Mission Name\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter mission name\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Mission Type\n              </label>\n              <select\n                value={formData.type}\n                onChange={(e) => setFormData({ ...formData, type: e.target.value as Mission['type'] })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"inspection\">Infrastructure Inspection</option>\n                <option value=\"security\">Security Patrol</option>\n                <option value=\"mapping\">Site Mapping</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Select Drone\n              </label>\n              <select\n                value={formData.droneId}\n                onChange={(e) => setFormData({ ...formData, droneId: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"\">Select a drone</option>\n                {drones.map((drone) => (\n                  <option key={drone.id} value={drone.id}>\n                    {drone.name} - {drone.model} (Battery: {drone.batteryLevel}%)\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Area & Pattern */}\n        {activeStep === 2 && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Survey Area Name\n              </label>\n              <input\n                type=\"text\"\n                value={formData.areaName}\n                onChange={(e) => setFormData({ ...formData, areaName: e.target.value })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter area name\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Pattern\n              </label>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                {[\n                  { value: 'crosshatch', label: 'Crosshatch', description: 'Grid pattern for comprehensive coverage' },\n                  { value: 'perimeter', label: 'Perimeter', description: 'Follow boundary edges' },\n                  { value: 'custom', label: 'Custom', description: 'Define custom waypoints' }\n                ].map((pattern) => (\n                  <div\n                    key={pattern.value}\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                      formData.pattern === pattern.value\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 hover:border-gray-500'\n                    }`}\n                    onClick={() => setFormData({ ...formData, pattern: pattern.value as Mission['pattern'] })}\n                  >\n                    <h4 className=\"font-medium text-white text-sm\">{pattern.label}</h4>\n                    <p className=\"text-gray-400 text-xs mt-1\">{pattern.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Step 3: Parameters */}\n        {activeStep === 3 && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Altitude (m)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.altitude}\n                onChange={(e) => setFormData({ ...formData, altitude: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"10\"\n                max=\"400\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Flight Speed (m/s)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.speed}\n                onChange={(e) => setFormData({ ...formData, speed: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"1\"\n                max=\"15\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Overlap Percentage (%)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.overlapPercentage}\n                onChange={(e) => setFormData({ ...formData, overlapPercentage: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"50\"\n                max=\"90\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Capture Frequency (sec)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.captureFrequency}\n                onChange={(e) => setFormData({ ...formData, captureFrequency: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"0.5\"\n                max=\"10\"\n                step=\"0.5\"\n              />\n            </div>\n\n            <div className=\"sm:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Estimated Duration (minutes)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.estimatedDuration}\n                onChange={(e) => setFormData({ ...formData, estimatedDuration: parseInt(e.target.value) })}\n                className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"5\"\n                max=\"120\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Review */}\n        {activeStep === 4 && (\n          <div className=\"bg-gray-900 rounded-lg p-4\">\n            <h4 className=\"font-medium text-white mb-4\">Mission Review</h4>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-400 block\">Name:</span>\n                <span className=\"text-white\">{formData.name}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Type:</span>\n                <span className=\"text-white capitalize\">{formData.type}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Drone:</span>\n                <span className=\"text-white\">\n                  {drones.find(d => d.id === formData.droneId)?.name || 'Not selected'}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Pattern:</span>\n                <span className=\"text-white capitalize\">{formData.pattern}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Altitude:</span>\n                <span className=\"text-white\">{formData.altitude}m</span>\n              </div>\n              <div>\n                <span className=\"text-gray-400 block\">Duration:</span>\n                <span className=\"text-white\">{formData.estimatedDuration} minutes</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Buttons */}\n        <div className=\"flex justify-between pt-6 border-t border-gray-700\">\n          <div className=\"flex gap-2\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors\"\n            >\n              Cancel\n            </button>\n            {activeStep > 1 && (\n              <button\n                type=\"button\"\n                onClick={() => setActiveStep(activeStep - 1)}\n                className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors\"\n              >\n                Back\n              </button>\n            )}\n          </div>\n          \n          <div>\n            {activeStep < 4 ? (\n              <button\n                type=\"button\"\n                onClick={() => setActiveStep(activeStep + 1)}\n                className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors\"\n                disabled={\n                  (activeStep === 1 && (!formData.name || !formData.droneId)) ||\n                  (activeStep === 2 && !formData.areaName)\n                }\n              >\n                Next\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md font-medium transition-colors\"\n              >\n                Create Mission\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default MissionForm;","size_bytes":14712},"client/src/components/planning/MissionPlanning.tsx":{"content":"import React, { useState } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionForm from './MissionForm';\nimport { Mission } from '../../types';\n\nconst MissionPlanning: React.FC = () => {\n  const { drones, addMission } = useDrone();\n  const [showForm, setShowForm] = useState(false);\n\n  const availableDrones = drones.filter(drone => drone.status === 'available');\n\n  const handleMissionCreate = (missionData: Omit<Mission, 'id' | 'createdAt'>) => {\n    addMission(missionData);\n    setShowForm(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Mission Planning</h2>\n        <button\n          onClick={() => setShowForm(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\"\n        >\n          Create New Mission\n        </button>\n      </div>\n\n      {showForm ? (\n        <MissionForm\n          drones={availableDrones}\n          onSubmit={handleMissionCreate}\n          onCancel={() => setShowForm(false)}\n        />\n      ) : (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-8 text-center\">\n          <h3 className=\"text-xl font-medium text-white mb-4\">Ready to Plan a Mission?</h3>\n          <p className=\"text-gray-400 mb-6\">\n            Create a new survey mission with custom flight paths, parameters, and survey patterns.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-gray-900 rounded-lg p-6\">\n              <h4 className=\"text-white font-medium mb-2\">Survey Patterns</h4>\n              <p className=\"text-gray-400 text-sm\">Crosshatch, perimeter, or custom flight paths</p>\n            </div>\n            <div className=\"bg-gray-900 rounded-lg p-6\">\n              <h4 className=\"text-white font-medium mb-2\">Real-time Control</h4>\n              <p className=\"text-gray-400 text-sm\">Monitor and control missions as they happen</p>\n            </div>\n            <div className=\"bg-gray-900 rounded-lg p-6\">\n              <h4 className=\"text-white font-medium mb-2\">Detailed Analytics</h4>\n              <p className=\"text-gray-400 text-sm\">Comprehensive reporting and data insights</p>\n            </div>\n          </div>\n          <button\n            onClick={() => setShowForm(true)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-md font-medium transition-colors\"\n          >\n            Start Planning\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionPlanning;","size_bytes":2657},"client/src/components/reporting/AnalyticsCharts.tsx":{"content":"import React from 'react';\nimport { Mission } from '../../types';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\n\ninterface AnalyticsChartsProps {\n  missions: Mission[];\n}\n\nconst AnalyticsCharts: React.FC<AnalyticsChartsProps> = ({ missions }) => {\n  // Mission types data\n  const typeData = ['inspection', 'security', 'mapping'].map(type => ({\n    name: type.charAt(0).toUpperCase() + type.slice(1),\n    count: missions.filter(m => m.type === type).length,\n    color: type === 'inspection' ? '#3B82F6' : type === 'security' ? '#10B981' : '#8B5CF6'\n  }));\n\n  // Monthly missions data\n  const monthlyData = React.useMemo(() => {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    return monthNames.map((month, index) => ({\n      month,\n      missions: Math.floor(Math.random() * 20) + 10,\n      flightTime: Math.floor(Math.random() * 50) + 30\n    }));\n  }, []);\n\n  // Flight duration distribution\n  const durationData = React.useMemo(() => {\n    const ranges = ['0-15min', '15-30min', '30-45min', '45-60min', '60min+'];\n    return ranges.map(range => ({\n      range,\n      count: Math.floor(Math.random() * 15) + 5\n    }));\n  }, []);\n\n  // Success rate data\n  const successData = React.useMemo(() => {\n    const total = missions.length;\n    const completed = missions.filter(m => m.status === 'completed').length;\n    const aborted = missions.filter(m => m.status === 'aborted').length;\n    const inProgress = total - completed - aborted;\n\n    return [\n      { name: 'Completed', value: completed, color: '#10B981' },\n      { name: 'In Progress', value: inProgress, color: '#F59E0B' },\n      { name: 'Aborted', value: aborted, color: '#EF4444' }\n    ];\n  }, [missions]);\n\n  return (\n    <div className=\"space-y-8 p-6\">\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Mission Types Chart */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Mission Types Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={typeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"name\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis tick={{ fill: '#9CA3AF' }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Bar dataKey=\"count\" fill=\"#3B82F6\" radius={[4, 4, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Success Rate Pie Chart */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Mission Success Rate</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={successData}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                dataKey=\"value\"\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n              >\n                {successData.map((entry, index) => (\n                  <Cell key={index} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Monthly Trends */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Monthly Mission Trends</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={monthlyData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"month\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis tick={{ fill: '#9CA3AF' }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"missions\"\n                stroke=\"#3B82F6\"\n                strokeWidth={2}\n                dot={{ fill: '#3B82F6', r: 4 }}\n                name=\"Missions\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"flightTime\"\n                stroke=\"#10B981\"\n                strokeWidth={2}\n                dot={{ fill: '#10B981', r: 4 }}\n                name=\"Flight Hours\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Duration Distribution */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          <h3 className=\"text-lg font-medium text-white mb-4\">Flight Duration Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={durationData} layout=\"horizontal\">\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis type=\"number\" tick={{ fill: '#9CA3AF' }} />\n              <YAxis dataKey=\"range\" type=\"category\" tick={{ fill: '#9CA3AF' }} width={80} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '0.5rem',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Bar dataKey=\"count\" fill=\"#8B5CF6\" radius={[0, 4, 4, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Average Mission Duration</h4>\n          <p className=\"text-2xl font-bold text-white\">\n            {missions.length > 0 \n              ? Math.round(missions.reduce((sum, m) => sum + (m.actualDuration || m.estimatedDuration), 0) / missions.length)\n              : 0\n            } min\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Success Rate</h4>\n          <p className=\"text-2xl font-bold text-green-400\">\n            {missions.length > 0\n              ? Math.round((missions.filter(m => m.status === 'completed').length / missions.length) * 100)\n              : 0\n            }%\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Total Distance</h4>\n          <p className=\"text-2xl font-bold text-blue-400\">\n            {missions\n              .filter(m => m.stats)\n              .reduce((sum, m) => sum + (m.stats?.distanceCovered || 0), 0)\n              .toFixed(1)} km\n          </p>\n        </div>\n\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 text-center\">\n          <h4 className=\"text-sm font-medium text-gray-400 mb-2\">Data Points Collected</h4>\n          <p className=\"text-2xl font-bold text-purple-400\">\n            {missions\n              .filter(m => m.stats)\n              .reduce((sum, m) => sum + (m.stats?.dataPointsCollected || 0), 0)\n              .toLocaleString()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsCharts;","size_bytes":8101},"client/src/components/reporting/MissionHistory.tsx":{"content":"import React, { useState } from 'react';\nimport { Mission } from '../../types';\nimport { Search, Filter, Calendar, MapPin, Clock, BarChart } from 'lucide-react';\n\ninterface MissionHistoryProps {\n  missions: Mission[];\n}\n\nconst MissionHistory: React.FC<MissionHistoryProps> = ({ missions }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n\n  const filteredMissions = missions.filter(mission => {\n    const matchesSearch = mission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         mission.area.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || mission.status === statusFilter;\n    const matchesType = typeFilter === 'all' || mission.type === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: Mission['status']) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500 text-white';\n      case 'in-progress': return 'bg-blue-500 text-white';\n      case 'aborted': return 'bg-red-500 text-white';\n      case 'paused': return 'bg-yellow-500 text-white';\n      default: return 'bg-gray-200 text-gray-800';\n    }\n  };\n\n  const getTypeColor = (type: Mission['type']) => {\n    switch (type) {\n      case 'inspection': return 'bg-blue-100 text-blue-800';\n      case 'security': return 'bg-green-100 text-green-800';\n      case 'mapping': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search missions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          \n          <select\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Statuses</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"aborted\">Aborted</option>\n            <option value=\"paused\">Paused</option>\n          </select>\n\n          <select\n            value={typeFilter}\n            onChange={(e) => setTypeFilter(e.target.value)}\n            className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Types</option>\n            <option value=\"inspection\">Inspection</option>\n            <option value=\"security\">Security</option>\n            <option value=\"mapping\">Mapping</option>\n          </select>\n\n          <div className=\"text-sm text-gray-400 flex items-center\">\n            <Filter className=\"h-4 w-4 mr-1\" />\n            {filteredMissions.length} of {missions.length} missions\n          </div>\n        </div>\n      </div>\n\n      {/* Mission List */}\n      <div className=\"space-y-4\">\n        {filteredMissions.map((mission) => (\n          <div key={mission.id} className=\"bg-gray-800 rounded-lg border border-gray-700 p-6 hover:shadow-lg transition-all duration-200 hover:border-blue-500\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-white\">{mission.name}</h3>\n              <div className=\"flex items-center gap-2\">\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(mission.type)}`}>\n                  {mission.type.charAt(0).toUpperCase() + mission.type.slice(1)}\n                </span>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(mission.status)}`}>\n                  {mission.status.charAt(0).toUpperCase() + mission.status.slice(1)}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n              <div className=\"flex items-center text-gray-300\">\n                <MapPin className=\"h-4 w-4 mr-2 text-blue-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Area</span>\n                  <span className=\"text-white\">{mission.area.name}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <Calendar className=\"h-4 w-4 mr-2 text-green-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Created</span>\n                  <span className=\"text-white\">{new Date(mission.createdAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <Clock className=\"h-4 w-4 mr-2 text-yellow-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Duration</span>\n                  <span className=\"text-white\">\n                    {mission.actualDuration || mission.estimatedDuration}m\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-gray-300\">\n                <BarChart className=\"h-4 w-4 mr-2 text-purple-400\" />\n                <div>\n                  <span className=\"text-gray-400 block\">Progress</span>\n                  <span className=\"text-white\">{Math.round(mission.progress)}%</span>\n                </div>\n              </div>\n            </div>\n\n            {mission.stats && (\n              <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400 block\">Distance Covered</span>\n                    <span className=\"text-white font-medium\">{mission.stats.distanceCovered} km</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Area Covered</span>\n                    <span className=\"text-white font-medium\">{mission.stats.areasCovered} km²</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400 block\">Data Points</span>\n                    <span className=\"text-white font-medium\">{mission.stats.dataPointsCollected}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"mt-4 flex justify-end\">\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\">\n                View Details\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredMissions.length === 0 && (\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-12 text-center\">\n          <p className=\"text-gray-400 text-lg\">No missions found matching your criteria</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MissionHistory;","size_bytes":7807},"client/src/components/reporting/ReportingDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useDrone } from '../../contexts/DroneContext';\nimport MissionHistory from './MissionHistory';\nimport AnalyticsCharts from './AnalyticsCharts';\nimport StatsCards from './StatsCards';\nimport { FileText, TrendingUp, Clock, CheckCircle } from 'lucide-react';\n\nconst ReportingDashboard: React.FC = () => {\n  const { missions, organization } = useDrone();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const completedMissions = missions.filter(m => m.status === 'completed');\n  const totalDistance = completedMissions.reduce((sum, mission) => \n    sum + (mission.stats?.distanceCovered || 0), 0);\n  const totalDataPoints = completedMissions.reduce((sum, mission) => \n    sum + (mission.stats?.dataPointsCollected || 0), 0);\n  const avgMissionDuration = completedMissions.length > 0 \n    ? completedMissions.reduce((sum, mission) => sum + (mission.actualDuration || mission.estimatedDuration), 0) / completedMissions.length\n    : 0;\n\n  const stats = [\n    {\n      title: 'Total Surveys',\n      value: organization.totalSurveys.toString(),\n      icon: FileText,\n      color: 'text-blue-400',\n      change: '+12% from last month'\n    },\n    {\n      title: 'Flight Hours',\n      value: `${organization.totalFlightHours.toFixed(1)}h`,\n      icon: Clock,\n      color: 'text-green-400',\n      change: '+8% from last month'\n    },\n    {\n      title: 'Completed Missions',\n      value: completedMissions.length.toString(),\n      icon: CheckCircle,\n      color: 'text-purple-400',\n      change: '+15% from last month'\n    },\n    {\n      title: 'Data Points Collected',\n      value: totalDataPoints.toLocaleString(),\n      icon: TrendingUp,\n      color: 'text-orange-400',\n      change: '+22% from last month'\n    }\n  ];\n\n  const tabs = [\n    { id: 'overview', label: 'Overview' },\n    { id: 'missions', label: 'Mission History' },\n    { id: 'analytics', label: 'Analytics' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Reports & Analytics</h2>\n        <div className=\"flex bg-gray-800 rounded-lg p-1\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                activeTab === tab.id\n                  ? 'bg-blue-600 text-white'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          <StatsCards stats={stats} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n              <h3 className=\"text-lg font-medium text-white mb-4\">Recent Activity</h3>\n              <div className=\"space-y-4\">\n                {missions.slice(0, 5).map((mission) => (\n                  <div key={mission.id} className=\"flex items-center justify-between p-3 bg-gray-900 rounded-lg\">\n                    <div>\n                      <h4 className=\"text-white text-sm font-medium\">{mission.name}</h4>\n                      <p className=\"text-gray-400 text-xs\">{mission.area.name}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        mission.status === 'completed' ? 'bg-green-100 text-green-800' :\n                        mission.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :\n                        mission.status === 'aborted' ? 'bg-red-100 text-red-800' :\n                        'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {mission.status}\n                      </span>\n                      <p className=\"text-gray-400 text-xs mt-1\">\n                        {new Date(mission.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-6\">\n              <h3 className=\"text-lg font-medium text-white mb-4\">Mission Types</h3>\n              <div className=\"space-y-3\">\n                {['inspection', 'security', 'mapping'].map((type) => {\n                  const count = missions.filter(m => m.type === type).length;\n                  const percentage = missions.length > 0 ? (count / missions.length) * 100 : 0;\n                  return (\n                    <div key={type}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-300 capitalize\">{type}</span>\n                        <span className=\"text-white\">{count} missions</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full ${\n                            type === 'inspection' ? 'bg-blue-500' :\n                            type === 'security' ? 'bg-green-500' :\n                            'bg-purple-500'\n                          }`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'missions' && <MissionHistory missions={missions} />}\n      \n      {activeTab === 'analytics' && (\n        <div className=\"pt-8\">\n          <AnalyticsCharts missions={completedMissions} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReportingDashboard;","size_bytes":5997},"client/src/components/reporting/StatsCards.tsx":{"content":"import React from 'react';\nimport { LucideIcon } from 'lucide-react';\n\ninterface Stat {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  color: string;\n  change: string;\n}\n\ninterface StatsCardsProps {\n  stats: Stat[];\n}\n\nconst StatsCards: React.FC<StatsCardsProps> = ({ stats }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <div key={stat.title} className=\"card-premium rounded-xl p-6 text-center\">\n            <Icon className={`h-10 w-10 ${stat.color} mx-auto mb-3`} />\n            <h4 className=\"text-sm font-medium text-medium-contrast mb-2\">{stat.title}</h4>\n            <span className=\"text-3xl font-bold text-high-contrast\">{stat.value}</span>\n            <p className=\"text-xs text-green-400 mt-2\">{stat.change}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StatsCards;","size_bytes":949},"client/src/components/settings/SettingsPanel.tsx":{"content":"import React, { useState } from 'react';\nimport { Settings, Users, Shield, Bell, Database, Wifi } from 'lucide-react';\n\nconst SettingsPanel: React.FC = () => {\n  const [activeSection, setActiveSection] = useState('general');\n\n  const sections = [\n    { id: 'general', label: 'General', icon: Settings },\n    { id: 'users', label: 'Users & Permissions', icon: Users },\n    { id: 'security', label: 'Security', icon: Shield },\n    { id: 'notifications', label: 'Notifications', icon: Bell },\n    { id: 'integration', label: 'API & Integration', icon: Database },\n    { id: 'connectivity', label: 'Connectivity', icon: Wifi }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-white\">Settings</h2>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Sidebar */}\n        <div className=\"bg-gray-800 rounded-lg border border-gray-700 p-4\">\n          <nav className=\"space-y-2\">\n            {sections.map((section) => {\n              const Icon = section.icon;\n              return (\n                <button\n                  key={section.id}\n                  onClick={() => setActiveSection(section.id)}\n                  className={`w-full text-left px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center gap-2 ${\n                    activeSection === section.id\n                      ? 'bg-blue-600 text-white'\n                      : 'text-gray-300 hover:bg-gray-700 hover:text-white'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  {section.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"lg:col-span-3 bg-gray-800 rounded-lg border border-gray-700 p-6\">\n          {activeSection === 'general' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">General Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Organization Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    defaultValue=\"FlytBase Drone Operations\"\n                    className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Default Flight Altitude (meters)\n                  </label>\n                  <input\n                    type=\"number\"\n                    defaultValue=\"75\"\n                    min=\"10\"\n                    max=\"400\"\n                    className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Time Zone\n                  </label>\n                  <select className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    <option value=\"UTC\">UTC</option>\n                    <option value=\"PST\">Pacific Standard Time</option>\n                    <option value=\"EST\">Eastern Standard Time</option>\n                    <option value=\"GMT\">Greenwich Mean Time</option>\n                  </select>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"autoBackup\"\n                    defaultChecked\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"autoBackup\" className=\"ml-2 block text-sm text-gray-300\">\n                    Enable automatic data backup\n                  </label>\n                </div>\n              </div>\n\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\">\n                Save Changes\n              </button>\n            </div>\n          )}\n\n          {activeSection === 'users' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Users & Permissions</h3>\n              \n              <div className=\"bg-gray-900 rounded-lg p-4\">\n                <p className=\"text-gray-400 text-center\">\n                  User management features would be implemented here, including role-based access control, \n                  user invitations, and permission management for different organizational levels.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'security' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Security Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-medium\">Two-Factor Authentication</h4>\n                    <p className=\"text-gray-400 text-sm\">Add an extra layer of security to your account</p>\n                  </div>\n                  <button className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\">\n                    Enable\n                  </button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-medium\">Session Timeout</h4>\n                    <p className=\"text-gray-400 text-sm\">Automatically log out after inactivity</p>\n                  </div>\n                  <select className=\"px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    <option value=\"30\">30 minutes</option>\n                    <option value=\"60\">1 hour</option>\n                    <option value=\"240\">4 hours</option>\n                    <option value=\"480\">8 hours</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'notifications' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Notification Settings</h3>\n              \n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Mission Completion', description: 'Get notified when missions are completed' },\n                  { label: 'Low Battery Alerts', description: 'Receive alerts when drone battery is low' },\n                  { label: 'System Maintenance', description: 'Notifications about system updates and maintenance' },\n                  { label: 'Emergency Alerts', description: 'Critical alerts for mission failures or emergencies' }\n                ].map((notification) => (\n                  <div key={notification.label} className=\"flex items-center justify-between p-4 bg-gray-900 rounded-lg\">\n                    <div>\n                      <h4 className=\"text-white font-medium\">{notification.label}</h4>\n                      <p className=\"text-gray-400 text-sm\">{notification.description}</p>\n                    </div>\n                    <input\n                      type=\"checkbox\"\n                      defaultChecked\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'integration' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">API & Integration</h3>\n              \n              <div className=\"bg-gray-900 rounded-lg p-6\">\n                <h4 className=\"text-white font-medium mb-4\">API Configuration</h4>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      API Base URL\n                    </label>\n                    <input\n                      type=\"url\"\n                      defaultValue=\"https://api.droneflow.com/v1\"\n                      className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      readOnly\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      API Key\n                    </label>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"password\"\n                        defaultValue=\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"\n                        className=\"flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        readOnly\n                      />\n                      <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors\">\n                        Regenerate\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'connectivity' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-white\">Connectivity Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-900 rounded-lg\">\n                  <h4 className=\"text-white font-medium mb-2\">Ground Control Connection</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-gray-300 text-sm\">Connected to Ground Control Station</span>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-900 rounded-lg\">\n                  <h4 className=\"text-white font-medium mb-2\">Telemetry Settings</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-300 text-sm\">Update Frequency</span>\n                      <select className=\"px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm\">\n                        <option value=\"1\">1 Hz</option>\n                        <option value=\"5\">5 Hz</option>\n                        <option value=\"10\" selected>10 Hz</option>\n                        <option value=\"20\">20 Hz</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPanel;","size_bytes":11493},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1834},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-0.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1876},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":709},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-3 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5402},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":755},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"NETLIFY_DEPLOYMENT.md":{"content":"# Deploying DroneFlow to Netlify\n\n## Prerequisites\n- GitHub account\n- Netlify account (free tier available)\n- Your DroneFlow project code\n\n## Step-by-Step Deployment Guide\n\n### 1. Prepare Your Project for Netlify\n\n**Create build configuration file:**\nCreate a `netlify.toml` file in your project root:\n\n```toml\n[build]\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[build.environment]\n  NODE_VERSION = \"20\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[dev]\n  command = \"npm run dev\"\n  port = 5000\n  publish = \"dist\"\n```\n\n**Update package.json scripts (if needed):**\nEnsure your build script creates a static build:\n```json\n{\n  \"scripts\": {\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\n### 2. Push Code to GitHub\n\n1. **Create a new GitHub repository:**\n   - Go to github.com and click \"New repository\"\n   - Name it \"droneflow\" or similar\n   - Make it public (required for free Netlify deployments)\n   - Don't initialize with README (you already have files)\n\n2. **Push your local code:**\n   ```bash\n   git init\n   git add .\n   git commit -m \"Initial commit - DroneFlow drone survey management system\"\n   git branch -M main\n   git remote add origin https://github.com/yourusername/droneflow.git\n   git push -u origin main\n   ```\n\n### 3. Deploy on Netlify\n\n#### Option A: GitHub Integration (Recommended)\n\n1. **Connect to Netlify:**\n   - Go to [netlify.com](https://netlify.com) and sign up/login\n   - Click \"Add new site\" → \"Import an existing project\"\n   - Choose \"Deploy with GitHub\"\n   - Authorize Netlify to access your GitHub account\n\n2. **Configure deployment:**\n   - Select your DroneFlow repository\n   - Branch to deploy: `main`\n   - Build command: `npm run build`\n   - Publish directory: `dist`\n   - Click \"Deploy site\"\n\n#### Option B: Manual Deployment\n\n1. **Build locally:**\n   ```bash\n   npm run build\n   ```\n\n2. **Deploy to Netlify:**\n   - Go to [netlify.com](https://netlify.com) and login\n   - Drag and drop your `dist` folder onto the deploy area\n   - Your site will be deployed instantly\n\n### 4. Configure Custom Domain (Optional)\n\n1. **In Netlify dashboard:**\n   - Go to Site settings → Domain management\n   - Click \"Add custom domain\"\n   - Follow DNS configuration instructions\n\n### 5. Environment Variables (If Needed)\n\n1. **In Netlify dashboard:**\n   - Go to Site settings → Environment variables\n   - Add any required environment variables\n   - For DroneFlow, you might need:\n     - `VITE_API_BASE_URL` (if using external APIs)\n\n### 6. Enable Forms (If Using Contact Forms)\n\n1. **In Netlify dashboard:**\n   - Go to Site settings → Forms\n   - Enable form processing if your app uses forms\n\n## Important Notes for DroneFlow\n\n### Backend Considerations\n**⚠️ Important:** Your current DroneFlow setup includes an Express.js backend, but Netlify only hosts static sites. You have two options:\n\n#### Option 1: Frontend-Only Deployment (Recommended for Demo)\n- Deploy only the frontend to Netlify\n- Mock data will work perfectly for demonstration\n- All UI functionality will be available\n- This is ideal for the FlytBase submission\n\n#### Option 2: Full-Stack Deployment\n- Frontend on Netlify\n- Backend on a service like:\n  - Railway.app\n  - Render.com\n  - Vercel (supports both)\n  - Heroku\n\n### Build Optimization\n\nAdd these optimizations to your `vite.config.ts`:\n```typescript\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    outDir: 'dist',\n    assetsDir: 'assets',\n    sourcemap: false,\n    minify: 'esbuild',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-select'],\n        },\n      },\n    },\n  },\n});\n```\n\n## Expected Results\n\nAfter deployment:\n- **Build time:** ~2-3 minutes\n- **URL:** You'll get a random URL like `https://amazing-pastry-123456.netlify.app`\n- **Custom domain:** Available with free plan\n- **SSL:** Automatic HTTPS\n- **CDN:** Global content delivery\n\n## Troubleshooting\n\n**Build fails?**\n- Check that all dependencies are in `package.json`\n- Ensure Node.js version compatibility\n- Review build logs in Netlify dashboard\n\n**404 errors on refresh?**\n- Make sure `netlify.toml` includes the redirect rule\n- Or add `_redirects` file: `/* /index.html 200`\n\n**Environment variables not working?**\n- Prefix frontend variables with `VITE_`\n- Add them in Netlify dashboard under Site settings\n\nYour DroneFlow application will be live and accessible worldwide within minutes of deployment!","size_bytes":4506},"PROJECT_WRITEUP.md":{"content":"# DroneFlow: Drone Survey Management System\n## Design Challenge Write-up\n\n### How We Approached the Problem\n\n**1. Requirements Analysis and Prioritization**\nWe started by breaking down the FlytBase design challenge into four core functional areas:\n- Mission Planning and Configuration System\n- Fleet Visualization and Management Dashboard  \n- Real-time Mission Monitoring Interface\n- Survey Reporting and Analytics Portal\n\n**2. Architecture-First Design**\nRather than building features in isolation, we established a solid technical foundation:\n- **Full-stack TypeScript**: Ensures type safety across the entire application\n- **Shared Schema Design**: Created unified data models in `shared/schema.ts` for consistency between frontend and backend\n- **Interface-Based Storage**: Designed `IStorage` interface for easy transition from in-memory to database storage\n- **Component-Driven Development**: Built reusable UI components using Shadcn/ui for consistency\n\n**3. Modern Development Stack Selection**\nWe chose technologies that prioritize developer experience and maintainability:\n- **React + TanStack Query**: Efficient state management and server synchronization\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL readiness\n- **Wouter**: Lightweight routing for single-page application navigation\n- **Express.js**: Familiar and reliable backend framework\n\n**4. Real-time First Approach**\nImplemented automatic data refresh intervals (5-30 seconds) across all dashboards to simulate real-time monitoring capabilities that would be essential for actual drone operations.\n\n### Trade-offs Considered During Development\n\n**1. In-Memory vs Database Storage**\n- **Decision**: Started with in-memory storage using MemStorage class\n- **Trade-off**: Immediate development velocity vs production readiness\n- **Rationale**: Allows rapid prototyping while maintaining clean interfaces for database integration\n- **Future Path**: Easy migration to PostgreSQL using existing Drizzle schema\n\n**2. Mock Data vs External APIs**\n- **Decision**: Rich, realistic mock data with proper data relationships\n- **Trade-off**: Development speed vs real-world integration complexity\n- **Rationale**: Demonstrates full functionality without external dependencies while maintaining authentic data structure for future API integration\n\n**3. Map Visualization Implementation**\n- **Decision**: Conceptual map interface rather than full mapping library integration\n- **Trade-off**: Development time vs visual fidelity\n- **Rationale**: Focus resources on core mission management logic while providing clear hooks for map library integration (Google Maps, Mapbox, etc.)\n\n**4. Authentication System**\n- **Decision**: Architecture prepared but not implemented\n- **Trade-off**: Feature completeness vs core functionality focus\n- **Rationale**: Prepared session-based authentication infrastructure while prioritizing mission-critical features\n\n**5. WebSocket vs Polling for Real-time Updates**\n- **Decision**: Polling-based updates with configurable intervals\n- **Trade-off**: Network efficiency vs implementation complexity\n- **Rationale**: Reliable cross-platform compatibility with clear upgrade path to WebSocket implementation\n\n### Strategy for Ensuring Safety and Adaptability\n\n**1. Safety Through Type Safety**\n- **Full TypeScript Implementation**: Prevents runtime errors through compile-time checking\n- **Zod Schema Validation**: Runtime validation ensures data integrity at API boundaries\n- **Shared Type Definitions**: Eliminates type mismatches between frontend and backend\n\n**2. Mission Safety Controls**\n- **Multi-Level Status Management**: Clear state transitions (planned → in-progress → paused/completed/aborted)\n- **Mission Control Actions**: Implemented pause, resume, and abort capabilities for emergency situations\n- **Battery Level Monitoring**: Real-time battery tracking to prevent mid-mission failures\n- **Progress Tracking**: Detailed progress monitoring with estimated completion times\n\n**3. Data Integrity and Validation**\n- **Form Validation**: React Hook Form with Zod resolvers prevent invalid mission configurations\n- **Parameter Constraints**: Altitude limits (10-400m), speed limits (1-15 m/s), overlap percentages (0-100%)\n- **Sensor Configuration**: Validation ensures at least one sensor is selected for data collection missions\n\n**4. System Adaptability**\n- **Modular Architecture**: Clean separation between components allows independent updates\n- **Interface-Based Design**: Storage, authentication, and external service integrations use interfaces for easy swapping\n- **Configuration-Driven Features**: Mission patterns, drone types, and sensor configurations are data-driven rather than hard-coded\n- **Scalable State Management**: TanStack Query provides caching and synchronization that scales with application growth\n\n**5. Error Handling and Recovery**\n- **Graceful Degradation**: Application continues functioning even if some services are unavailable\n- **User Feedback Systems**: Toast notifications provide clear status updates and error messages\n- **Mission Recovery**: Paused missions can be resumed, aborted missions provide detailed failure information\n- **Data Consistency**: Optimistic updates with automatic cache invalidation ensure UI consistency\n\n**6. Future-Proof Design Decisions**\n- **Database Ready**: Drizzle schema prepared for production PostgreSQL deployment\n- **Authentication Ready**: Passport.js integration prepared for user management\n- **API Extensibility**: RESTful design allows easy addition of new endpoints\n- **Component Reusability**: UI components built for reuse across different contexts\n- **Deployment Ready**: Vite build system optimized for production deployment\n\n**7. Monitoring and Analytics**\n- **Comprehensive Reporting**: Multiple time ranges and report types for operational insights\n- **Drone Utilization Tracking**: Identifies underused assets and maintenance needs\n- **Mission Success Analytics**: Tracks completion rates and identifies improvement areas\n- **Fleet Performance Metrics**: Battery usage, flight hours, and efficiency monitoring\n\n### Conclusion\n\nDroneFlow demonstrates a production-ready approach to drone survey management by prioritizing safety, scalability, and maintainability. The architecture supports immediate deployment while providing clear paths for enhanced features like real-time WebSocket communication, advanced mapping integration, and multi-tenant authentication systems.\n\nThe system successfully addresses all required functional areas while maintaining code quality and user experience standards expected in mission-critical applications.","size_bytes":6646},"netlify.toml":{"content":"[build]\n  publish = \"dist/public\"\n  command = \"vite build\"\n\n[build.environment]\n  NODE_VERSION = \"20\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[dev]\n  command = \"npm run dev\"\n  port = 5000\n  publish = \"client/dist\"","size_bytes":239},"client/src/lib/frontendQueryClient.ts":{"content":"import { QueryClient } from '@tanstack/react-query';\nimport { MockApiService } from './mockApiService';\n\n// Frontend-only query functions that use mock data service\nconst frontendQueryFn = async ({ queryKey }: { queryKey: readonly unknown[] }) => {\n  const [url] = queryKey as [string];\n  \n  // Route API calls to mock service methods\n  switch (url) {\n    case '/api/drones':\n      return MockApiService.getDrones();\n    \n    case '/api/missions':\n      return MockApiService.getMissions();\n    \n    case '/api/organization/stats':\n      return MockApiService.getOrganizationStats();\n    \n    default:\n      // Handle specific drone/mission requests\n      if (url.startsWith('/api/drones/')) {\n        const droneId = url.split('/')[3];\n        return MockApiService.getDrone(droneId);\n      }\n      \n      if (url.startsWith('/api/missions/')) {\n        const missionId = url.split('/')[3];\n        return MockApiService.getMission(missionId);\n      }\n      \n      throw new Error(`Unknown endpoint: ${url}`);\n  }\n};\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: frontendQueryFn,\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 2,\n    },\n  },\n});\n\n// Frontend-only API request function\nexport async function apiRequest(url: string, options: RequestInit = {}) {\n  const method = options.method || 'GET';\n  \n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 100));\n  \n  if (method === 'POST' && url === '/api/missions') {\n    const body = options.body ? JSON.parse(options.body as string) : {};\n    return MockApiService.createMission(body);\n  }\n  \n  if (method === 'PATCH') {\n    const body = options.body ? JSON.parse(options.body as string) : {};\n    \n    if (url.startsWith('/api/drones/')) {\n      const droneId = url.split('/')[3];\n      return MockApiService.updateDrone(droneId, body);\n    }\n    \n    if (url.startsWith('/api/missions/')) {\n      const missionId = url.split('/')[3];\n      return MockApiService.updateMission(missionId, body);\n    }\n  }\n  \n  throw new Error(`Unsupported operation: ${method} ${url}`);\n}","size_bytes":2116},"client/src/lib/mockApiService.ts":{"content":"import type { Drone, Mission, InsertMission, Organization } from '@shared/schema';\n\n// Mock data for frontend-only deployment\nconst mockDrones: Drone[] = [\n  {\n    id: 'drone-001',\n    name: 'Surveyor Alpha',\n    model: 'DJI Matrice 300 RTK',\n    serialNumber: 'DJ001MAT300',\n    status: 'available',\n    batteryLevel: 85,\n    location: { lat: 37.7749, lng: -122.4194 },\n    flightHours: 245.5,\n    lastMaintenance: '2024-01-15',\n    maxFlightTime: 55,\n    sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n  },\n  {\n    id: 'drone-002',\n    name: 'Inspector Beta',\n    model: 'DJI Phantom 4 RTK',\n    serialNumber: 'DJ002PH4RTK',\n    status: 'in-mission',\n    batteryLevel: 72,\n    location: { lat: 37.7849, lng: -122.4094 },\n    flightHours: 189.2,\n    lastMaintenance: '2024-01-20',\n    maxFlightTime: 30,\n    sensors: ['RGB Camera', 'Multispectral']\n  },\n  {\n    id: 'drone-003',\n    name: 'Guardian Gamma',\n    model: 'Autel EVO Max 4T',\n    serialNumber: 'AU003EVMax4T',\n    status: 'charging',\n    batteryLevel: 15,\n    location: { lat: 37.7649, lng: -122.4294 },\n    flightHours: 156.8,\n    lastMaintenance: '2024-01-10',\n    maxFlightTime: 42,\n    sensors: ['RGB Camera', 'Thermal', 'Night Vision']\n  },\n  {\n    id: 'drone-004',\n    name: 'Mapper Delta',\n    model: 'Parrot ANAFI USA',\n    serialNumber: 'PR004ANFUSA',\n    status: 'maintenance',\n    batteryLevel: 0,\n    location: { lat: 37.7549, lng: -122.4394 },\n    flightHours: 98.3,\n    lastMaintenance: '2024-01-05',\n    maxFlightTime: 32,\n    sensors: ['RGB Camera', 'Zoom', 'Thermal']\n  },\n  {\n    id: 'drone-005',\n    name: 'Scout Echo',\n    model: 'Skydio 2+',\n    serialNumber: 'SK005SkyD2P',\n    status: 'available',\n    batteryLevel: 95,\n    location: { lat: 37.7449, lng: -122.4494 },\n    flightHours: 67.1,\n    lastMaintenance: '2024-01-25',\n    maxFlightTime: 23,\n    sensors: ['RGB Camera', 'Obstacle Avoidance']\n  },\n  {\n    id: 'drone-006',\n    name: 'Patrol Zeta',\n    model: 'DJI Mini 3 Pro',\n    serialNumber: 'DJ006Min3Pro',\n    status: 'offline',\n    batteryLevel: 0,\n    location: { lat: 37.7349, lng: -122.4594 },\n    flightHours: 34.7,\n    lastMaintenance: '2024-01-18',\n    maxFlightTime: 34,\n    sensors: ['RGB Camera', '4K Video']\n  }\n];\n\nconst mockMissions: Mission[] = [\n  {\n    id: 'mission-001',\n    name: 'Weekly Security Patrol',\n    type: 'security-patrol',\n    status: 'in-progress',\n    droneId: 'drone-002',\n    area: {\n      name: 'North Perimeter',\n      bounds: [\n        { lat: 37.7849, lng: -122.4094 },\n        { lat: 37.7859, lng: -122.4084 },\n        { lat: 37.7869, lng: -122.4104 },\n        { lat: 37.7859, lng: -122.4114 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7849, lng: -122.4094, altitude: 50 },\n      { lat: 37.7859, lng: -122.4084, altitude: 50 },\n      { lat: 37.7869, lng: -122.4104, altitude: 50 },\n      { lat: 37.7859, lng: -122.4114, altitude: 50 }\n    ],\n    pattern: 'perimeter',\n    parameters: {\n      altitude: 50,\n      speed: 8,\n      overlapPercentage: 60,\n      captureFrequency: 2,\n      sensors: ['RGB Camera', 'Thermal']\n    },\n    progress: 65,\n    estimatedDuration: 25,\n    actualDuration: null,\n    priority: 'high',\n    createdAt: new Date('2024-01-28T10:00:00Z'),\n    scheduledAt: new Date('2024-01-28T14:00:00Z'),\n    startedAt: new Date('2024-01-28T14:05:00Z'),\n    completedAt: null,\n    stats: {\n      distanceCovered: 1.2,\n      areasCovered: 0.8,\n      dataPointsCollected: 245\n    }\n  },\n  {\n    id: 'mission-002',\n    name: 'Facility Roof Inspection',\n    type: 'facility-inspection',\n    status: 'completed',\n    droneId: 'drone-001',\n    area: {\n      name: 'Building A Roof',\n      bounds: [\n        { lat: 37.7749, lng: -122.4194 },\n        { lat: 37.7759, lng: -122.4184 },\n        { lat: 37.7769, lng: -122.4204 },\n        { lat: 37.7759, lng: -122.4214 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7749, lng: -122.4194, altitude: 30 },\n      { lat: 37.7759, lng: -122.4184, altitude: 30 },\n      { lat: 37.7769, lng: -122.4204, altitude: 30 },\n      { lat: 37.7759, lng: -122.4214, altitude: 30 }\n    ],\n    pattern: 'crosshatch',\n    parameters: {\n      altitude: 30,\n      speed: 6,\n      overlapPercentage: 80,\n      captureFrequency: 3,\n      sensors: ['RGB Camera', 'Thermal', 'LiDAR']\n    },\n    progress: 100,\n    estimatedDuration: 18,\n    actualDuration: 19,\n    priority: 'medium',\n    createdAt: new Date('2024-01-27T09:00:00Z'),\n    scheduledAt: new Date('2024-01-27T11:00:00Z'),\n    startedAt: new Date('2024-01-27T11:02:00Z'),\n    completedAt: new Date('2024-01-27T11:21:00Z'),\n    stats: {\n      distanceCovered: 2.1,\n      areasCovered: 1.5,\n      dataPointsCollected: 428,\n      averageSpeed: 6.2,\n      batteryUsed: 35\n    }\n  },\n  {\n    id: 'mission-003',\n    name: 'Site Mapping Survey',\n    type: 'site-mapping',\n    status: 'planned',\n    droneId: 'drone-005',\n    area: {\n      name: 'Construction Zone C',\n      bounds: [\n        { lat: 37.7449, lng: -122.4494 },\n        { lat: 37.7459, lng: -122.4484 },\n        { lat: 37.7469, lng: -122.4504 },\n        { lat: 37.7459, lng: -122.4514 }\n      ]\n    },\n    flightPath: [\n      { lat: 37.7449, lng: -122.4494, altitude: 75 },\n      { lat: 37.7459, lng: -122.4484, altitude: 75 },\n      { lat: 37.7469, lng: -122.4504, altitude: 75 },\n      { lat: 37.7459, lng: -122.4514, altitude: 75 }\n    ],\n    pattern: 'grid',\n    parameters: {\n      altitude: 75,\n      speed: 10,\n      overlapPercentage: 70,\n      captureFrequency: 1.5,\n      sensors: ['RGB Camera', 'Obstacle Avoidance']\n    },\n    progress: 0,\n    estimatedDuration: 35,\n    actualDuration: null,\n    priority: 'low',\n    createdAt: new Date('2024-01-28T08:00:00Z'),\n    scheduledAt: new Date('2024-01-29T09:00:00Z'),\n    startedAt: null,\n    completedAt: null,\n    stats: null\n  }\n];\n\n// Simulate network delay\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport class MockApiService {\n  private static drones = new Map(mockDrones.map(d => [d.id, { ...d }]));\n  private static missions = new Map(mockMissions.map(m => [m.id, { ...m }]));\n\n  static async getDrones(): Promise<Drone[]> {\n    await delay(200);\n    return Array.from(this.drones.values());\n  }\n\n  static async getDrone(id: string): Promise<Drone | undefined> {\n    await delay(100);\n    return this.drones.get(id);\n  }\n\n  static async updateDrone(id: string, updates: Partial<Drone>): Promise<Drone | undefined> {\n    await delay(150);\n    const drone = this.drones.get(id);\n    if (drone) {\n      const updated = { ...drone, ...updates };\n      this.drones.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  static async getMissions(): Promise<Mission[]> {\n    await delay(200);\n    return Array.from(this.missions.values());\n  }\n\n  static async getMission(id: string): Promise<Mission | undefined> {\n    await delay(100);\n    return this.missions.get(id);\n  }\n\n  static async createMission(missionData: InsertMission): Promise<Mission> {\n    await delay(300);\n    const id = `mission-${Date.now()}`;\n    const mission: Mission = {\n      id,\n      ...missionData,\n      createdAt: new Date(),\n      progress: 0,\n      status: 'planned'\n    };\n    this.missions.set(id, mission);\n    return mission;\n  }\n\n  static async updateMission(id: string, updates: Partial<Mission>): Promise<Mission | undefined> {\n    await delay(150);\n    const mission = this.missions.get(id);\n    if (mission) {\n      const updated = { ...mission, ...updates };\n      this.missions.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  static async getOrganizationStats(): Promise<Organization> {\n    await delay(250);\n    const missions = Array.from(this.missions.values());\n    const drones = Array.from(this.drones.values());\n    \n    return {\n      totalSurveys: missions.filter(m => m.status === 'completed').length,\n      totalFlightHours: drones.reduce((sum, d) => sum + d.flightHours, 0),\n      activeDrones: drones.filter(d => d.status === 'available').length,\n      completedMissions: missions.filter(m => m.status === 'completed').length,\n    };\n  }\n}","size_bytes":8081}}}